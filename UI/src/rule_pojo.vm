#set ($rulePackageName = $ruleDescriptor.getRulePackageName())
package $rulePackageName;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import java.util.List;
import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFPOJORulesException;
import com.xerox.enterprise.ghs.mmis.rif.core.Rule;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesContext;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesResult;

#foreach ($importName in $ruleDescriptor.getImportsList())
import $importName;
#end

#set ($ruleClassName = $ruleDescriptor.getRuleClassName())
#set ($classExt = ".class")
#set ($methodexist = $ruleDescriptor.getRuleMethods().size())
/**
 * POJO for the rule "$ruleDescriptor.getRuleName()"
 * @author $authorName
 * @source $ruleDescriptor.getRuleExtractClassName()
 */
public class $ruleClassName extends Rule{
	
	/*Static logger to log a message */
	private static final Logger LOG = Logger.getLogger($ruleClassName$classExt);
	
	
	
	/**
	 * Execute method of the rule. This holds the rule conditions and actions.
	 * The required objects are initialized through init() method.
	 * return - execution result of rule either SUCCESS or FAILURE
	 */
	public static RulesResult execute(RulesContext ctx, String ruleId) throws RIFPOJORulesException {
		
		//Construct rules result object
		RulesResult rulesResult;
		rulesResult = new RulesResult(ruleId);
		$ruleTempUtility.getLocalVariableDeclarations($ruleDescriptor.getRuleContextParams())
		if (ctx != null) {
				
			List<Object> inputObjs = ctx.getContextObject();

			$ruleTempUtility.getAssignmentStatementsFromContext($ruleDescriptor.getRuleContextParams(),"inputObjs")
						
		} else {
			LOG.log(Level.ERROR,"Input Context Object is null during intialization for the rule "+ruleId);
			
			throw new RIFPOJORulesException("Unable to initialize the required rules objects for rule "+ruleId);
		}
		LOG.log(Level.INFO,"Executing the actions for the rule:" + ruleId);
		
		$ruleDescriptor.getRuleText()
		
		#if($ruleDescriptor.getRuleReturnField())
		rulesResult.setReturnBooleanValue($ruleDescriptor.getRuleReturnField());
		#end
		rulesResult.setRuleStatus(true);
		return rulesResult;
		
	}
	
	/*
	* Method to initialize rule
	*/
	public static void initialize() throws RIFPOJORulesException {
		// TODO Auto-generated method stub
		
	}

	/*
	* Method to shutdown rule
	*/
	public static void shutdown() throws RIFPOJORulesException {
		// TODO Auto-generated method stub
		
	}
	
	#if($methodexist > 0)
		
	#foreach ($methodName in  $ruleDescriptor.getRuleMethods())
	private static $methodName
	#end
		
	#end
}
