package com.xerox.enterprise.ghs.mmis.rif.rules.provider;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import junit.framework.TestCase;

import com.acs.enterprise.mmis.provider.common.domain.Provider;
import com.acs.enterprise.mmis.provider.common.helper.ProviderDataConstants;
import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFException;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesContext;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesResult;
import com.xerox.enterprise.ghs.mmis.rif.core.api.RulesManager;

/**
 * The class <code>PRV0147_148_149_150_0001_01Test</code> contains tests for the class
 * {@link <code>PRV0147_148_149_150_0001_01Test</code>}
 *
 * @pattern JUnit Test Case
 *
 * @generatedBy CodePro at 12/17/14 12:29 PM
 *
 * @author 414774
 *
 * @version $Revision$
 */
public class TestPRV0147_148_149_150_0001_01 extends TestCase {

	/**
	 * Construct new test instance
	 *
	 * @param name the test name
	 */
	public TestPRV0147_148_149_150_0001_01(String name) {
		super(name);
	}


	/*$CPS$ This comment was generated by CodePro. Do not edit it.
	 * patternId = com.instantiations.assist.eclipse.pattern.testCasePattern
	 * strategyId = com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
	 * additionalTestNames = 
	 * assertTrue = false
	 * callTestMethod = true
	 * createMain = false
	 * createSetUp = false
	 * createTearDown = false
	 * createTestFixture = false
	 * createTestStubs = false
	 * methods = execute(QRulesContext;!QString;)
	 * package = com.xerox.enterprise.ghs.mmis.rif.rules.pojo
	 * package.sourceFolder = RulesRIF/src/test/java
	 * superclassType = junit.framework.TestCase
	 * testCase = PRV0147_0001_01Test
	 * testClassType = com.xerox.enterprise.ghs.mmis.rif.rules.pojo.PRV0147_0001_01
	 */


	public void testExecute() throws RIFException {

		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		// Name of the rule to be executed.
		String ruleId = "PRV0147.0001.01";
		//boolean flag1=false;
		RulesContext ric = new RulesContext();
		// Adding object into rule invocation context.
		List<String> systemList1=new ArrayList();
		systemList1.add("P1");
		systemList1.add("P2");
		List<String> systemList2=new ArrayList();
		systemList2.add("P3");
		systemList2.add("P4");
		List<String> systemList3=new ArrayList();
		systemList3.add("P5");
		systemList3.add("P6");
		List<String> systemList4=new ArrayList();
		systemList4.add("P7");
		systemList4.add("P8");
		
		String prvNumber="P8";
		Provider providerDO=new Provider();    
		boolean result = false;

		String ruleId1 = "PRV0147.0001.01";
		RulesContext ric1 = new RulesContext();
		//Adding object into rule invocation context.
		ric1.addObject(providerDO);
		ric1.addObject(systemList1);
		ric1.addObject(prvNumber);

		String ruleId2 = "PRV0148.0001.01";
		RulesContext ric2 = new RulesContext();
		//Adding object into rule invocation context.
		ric2.addObject(providerDO);
		ric2.addObject(systemList2);
		ric2.addObject(prvNumber);

		String ruleId3 = "PRV0149.0001.01";
		RulesContext ric3 = new RulesContext();
		//Adding object into rule invocation context.
		ric3.addObject(providerDO);
		ric3.addObject(prvNumber);
		ric3.addObject(systemList3);

		String ruleId4 = "PRV0150.0001.01";
		RulesContext ric4 = new RulesContext();
		//Adding object into rule invocation context.
		ric4.addObject(providerDO);
		ric4.addObject(systemList4);
		ric4.addObject(prvNumber);

		ConcurrentHashMap<String, RulesContext> ricMap = new ConcurrentHashMap<String, RulesContext>();
		ricMap.put(ruleId1, ric1);
		ricMap.put(ruleId2, ric2);
		ricMap.put(ruleId3, ric3);
		ricMap.put(ruleId4, ric4);
		//Invoke RIF with ruleid and rule invocation objects.
		RulesResult[] rulesResult = null;	

		try {
			RulesManager rulesManager = RulesManager.getRIFInstance();
			rulesResult = rulesManager.execute(ricMap);
		} catch (RIFException re){

		}
		for (RulesResult ruleResult: rulesResult) {
			if (!ruleResult.isReturnBooleanValue()) {
				result = false;
			}
		}
		System.out.println("Provider DO==>"+providerDO.getTypeClassificationCode());
		assertEquals(ProviderDataConstants.PRV_ENR_VALUE_FOUR, providerDO.getTypeClassificationCode());
	}

}