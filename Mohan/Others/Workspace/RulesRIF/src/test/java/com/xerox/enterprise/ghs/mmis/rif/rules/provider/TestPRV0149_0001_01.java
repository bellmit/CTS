package com.xerox.enterprise.ghs.mmis.rif.rules.provider;

import java.util.ArrayList;
import java.util.List;

import com.acs.enterprise.mmis.provider.common.domain.Provider;
import com.acs.enterprise.mmis.provider.common.helper.ProviderDataConstants;
import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFException;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesContext;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesResult;
import com.xerox.enterprise.ghs.mmis.rif.core.api.RulesManager;

import junit.framework.TestCase;

/**
 * The class <code>PRV0149_0001_01Test</code> contains tests for the class
 * {@link <code>PRV0149_0001_01</code>}
 *
 * @pattern JUnit Test Case
 *
 * @generatedBy CodePro at 12/17/14 12:30 PM
 *
 * @author 414774
 *
 * @version $Revision$
 */
public class TestPRV0149_0001_01 extends TestCase {

	/**
	 * Construct new test instance
	 *
	 * @param name the test name
	 */
	public TestPRV0149_0001_01(String name) {
		super(name);
	}


/*$CPS$ This comment was generated by CodePro. Do not edit it.
 * patternId = com.instantiations.assist.eclipse.pattern.testCasePattern
 * strategyId = com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
 * additionalTestNames = 
 * assertTrue = false
 * callTestMethod = true
 * createMain = false
 * createSetUp = false
 * createTearDown = false
 * createTestFixture = false
 * createTestStubs = false
 * methods = 
 * package = com.xerox.enterprise.ghs.mmis.rif.rules.pojo
 * package.sourceFolder = RulesRIF/src/test/java
 * superclassType = junit.framework.TestCase
 * testCase = PRV0149_0001_01Test
 * testClassType = com.xerox.enterprise.ghs.mmis.rif.rules.pojo.PRV0149_0001_01
 */

public void testExecute() throws RIFException {
	
	// Rule Invocation Context object holds object arrays used in rule
	// execution.
	// Name of the rule to be executed.
	String ruleId = "PRV0149.0001.01";
	//boolean flag1=false;
	RulesContext ric = new RulesContext();
	// Adding object into rule invocation context.
	List<String> systemList=new ArrayList();
    systemList.add("P1");
    systemList.add("P2");
    String provider="P1";
    Provider prvDO=new Provider();
	ric.addObject(prvDO); 
	ric.addObject(provider); 
	ric.addObject(systemList);
	boolean result = false;

	RulesManager rulesManager = RulesManager.getRIFInstance();

	// Invoke RIF with rulename and rule invocation objects.
	RulesResult rulesResult = null;

	try {
		rulesResult = rulesManager.execute(ruleId, ric);
		result = rulesResult.isReturnBooleanValue();
		
	} catch (RIFException re) {
		re.printStackTrace();
	}
	assertEquals(ProviderDataConstants.PRV_ENR_VALUE_THREE, prvDO.getTypeClassificationCode());
}

}