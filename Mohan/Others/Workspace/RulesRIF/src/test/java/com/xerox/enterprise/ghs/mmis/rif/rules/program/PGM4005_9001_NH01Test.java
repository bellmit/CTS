package com.xerox.enterprise.ghs.mmis.rif.rules.program;

import java.util.ArrayList;
import java.util.List;

import junit.framework.TestCase;

import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFException;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesContext;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesResult;
import com.xerox.enterprise.ghs.mmis.rif.core.api.RulesManager;

/**
 * The class <code>PGM4005_9001_NH01Test</code> contains tests for the class
 * {@link <code>PGM4005_9001_NH01</code>}
 * 
 * @pattern JUnit Test Case
 * 
 * @generatedBy CodePro at 12/9/14 4:42 PM
 * 
 * @author 414774
 * 
 * @version $Revision$
 */
public class PGM4005_9001_NH01Test extends TestCase {

	/**
	 * Construct new test instance
	 * 
	 * @param name
	 *            the test name
	 */
	public PGM4005_9001_NH01Test(String name) {
		super(name);
	}

	/*
	 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId =
	 * com.instantiations.assist.eclipse.pattern.testCasePattern strategyId =
	 * com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
	 * additionalTestNames = assertTrue = false callTestMethod = true createMain
	 * = false createSetUp = false createTearDown = false createTestFixture =
	 * false createTestStubs = false methods = package = com.rules
	 * package.sourceFolder = MMIS_RIF_Rules/src superclassType =
	 * junit.framework.TestCase testCase = PGM4005_9001_NH01Test testClassType =
	 * com.rules.PGM4005_9001_NH01
	 */

	public void testExecute() throws RIFException {
		int objSize = 4;

		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		// Name of the rule to be executed.
		String ruleId = "PGM4005.9001.NH01";
		RulesContext ric = new RulesContext();
		List capitationList=new ArrayList();
		capitationList.add("TEST");
		
		// Adding object into rule invocation context.
		ric.addObject(true); 
		ric.addObject("HIIF"); // CurrentProcCode
		ric.addObject("DELGI"); // RetroProcCode
		ric.addObject(capitationList ); // CapitationList
		
		boolean flag = true;

		RulesManager rulesManager = RulesManager.getRIFInstance();

		// Invoke RIF with rulename and rule invocation objects.
		RulesResult rulesResult = null;

		try {
			rulesResult = rulesManager.execute(ruleId, ric);
			flag = rulesResult.isReturnBooleanValue();
			System.out.println("Rule boolean " + flag);	
		} catch (RIFException re) {
			re.printStackTrace();
		}
		if (!flag) {
			//SetErrormsg
		}
		System.out.println("Rule boolean " + rulesResult.isReturnBooleanValue());
		assertFalse(flag);
	}

}

