			  
#set ($rulereturnBoolean = $ruleDescriptor.getRuleReturnField())
		  
		#foreach($ruleDescriptor in $ruleDescriptorList)

              System.out.println("Started Rule Execution::::");
              
              //Rule Invocation Context object holds object arrays used in rule execution.
			  #if($isBatchRule)
				String ruleId$foreach.count = "$ruleDescriptor.getRuleId()";
				RulesContext ric$foreach.count = new RulesContext();
				//Adding object into rule invocation context.
			  	$ruleTempUtility.getAddObjectsToContext($ruleDescriptor.getRuleContextParams(), "ric$foreach.count")	
			  #else			    
			    String ruleId = "$ruleDescriptor.getRuleId()";
			    RulesContext ric = new RulesContext();
			    //Adding object into rule invocation context.
			 	$ruleTempUtility.getAddObjectsToContext($ruleDescriptor.getRuleContextParams(), "ric")	    
			  #end
        #end                                
		    #if($isBatchRule)
			  ConcurrentHashMap<String,RulesContext> ricMap = new ConcurrentHashMap<String, RulesContext>();
			  #foreach($ruleDescriptor in $ruleDescriptorList)
				ricMap.put(ruleId$foreach.count, ric$foreach.count);
	          #end          
            #end
              //Invoke RIF with ruleid and rule invocation objects.
			  #if($isBatchRule)
				RulesResultVO[] rulesResult = null;
			  #else
			    RulesResultVO rulesResult = null;
			  #end
              
              try {
              		RulesManager rulesManager = RulesManager.getRIFInstance();
                     #if($isBatchRule)
						rulesResult = rulesManager.execute(ricMap);
					  #else
						rulesResult = rulesManager.execute(ruleId, ric);	
					  #end
					  #if($rulereturnBoolean)
						$rulereturnBoolean=rulesResult.isReturnBooleanValue(); 
					  #end
              } catch (RIFException re){
                     System.out.println("RIFException::::"+re);
              }
              System.out.println("Rule Execution Ended::::"+ruleId+"\n");
