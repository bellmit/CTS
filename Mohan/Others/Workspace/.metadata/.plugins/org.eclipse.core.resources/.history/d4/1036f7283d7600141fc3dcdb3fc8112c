/**
 * 
 */
package com.acs.enterprise.mmis.operations.tpladministration.view.bean;
import java.io.IOException;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.faces.application.FacesMessage;
import javax.faces.application.ViewHandler;
import javax.faces.component.UIComponent;
import javax.faces.component.UIData;
import javax.faces.component.UIViewRoot;
import javax.faces.component.html.HtmlCommandLink;
import javax.faces.component.html.HtmlSelectBooleanCheckbox;
import javax.faces.component.html.HtmlSelectOneMenu;
//import com.acs.enterprise.faces.component.HtmlSelectOneMenu;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.PortletSession;
import javax.portlet.RenderRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;

import com.acs.enterprise.common.base.application.exception.EnterpriseBaseBusinessException;
import com.acs.enterprise.common.base.common.domain.Attachment;
import com.acs.enterprise.common.base.common.domain.EnterpriseBaseDomain;
import com.acs.enterprise.common.base.common.vo.EnterpriseSearchResultsVO;
import com.acs.enterprise.common.base.view.bean.EnterpriseBaseControllerBean;
import com.acs.enterprise.common.cots.CommonLetter.view.bean.LettersAndResponsesDataBean;
import com.acs.enterprise.common.cots.edms.application.common.vo.EnterpriseEDMSSearchResultsVO;
import com.acs.enterprise.common.cots.lettergeneration.vo.LetterGenerationInputVO;
import com.acs.enterprise.common.cots.util.GlobalLetterConstants;
import com.acs.enterprise.common.lineitemaudit.application.exception.LineItemAuditsBusinessException;
import com.acs.enterprise.common.lineitemaudit.common.delegate.LineItemAuditsDelegate;
import com.acs.enterprise.common.lineitemaudit.common.helper.AuditDataFilter;
import com.acs.enterprise.common.lineitemaudit.common.helper.AuditableField;
import com.acs.enterprise.common.lineitemaudit.common.vo.AuditaleEnterpriseBaseVO;
import com.acs.enterprise.common.lock.common.delegate.LockDelegete;
import com.acs.enterprise.common.program.administration.application.exception.SystemListNotFoundException;
import com.acs.enterprise.common.program.administration.common.delegate.ReferenceServiceDelegate;
import com.acs.enterprise.common.program.administration.common.vo.InputCriteria;
import com.acs.enterprise.common.program.administration.common.vo.ReferenceDataListVO;
import com.acs.enterprise.common.program.administration.common.vo.ReferenceDataSearchVO;
import com.acs.enterprise.common.program.administration.common.vo.ReferenceServiceVO;
import com.acs.enterprise.common.program.administration.util.helper.FunctionalAreaConstants;
import com.acs.enterprise.common.program.administration.util.helper.ReferenceServiceDataConstants;
import com.acs.enterprise.common.program.commonentities.common.domain.Address;
import com.acs.enterprise.common.program.commonentities.common.domain.AddressUsage;
import com.acs.enterprise.common.program.commonentities.view.vo.CommonEntityVO;
import com.acs.enterprise.common.program.commonentities.view.vo.CommonNotesVO;
import com.acs.enterprise.common.program.commonentities.view.vo.NoteSetVO;
import com.acs.enterprise.common.program.contactmanagement.application.exception.CorrespondenceRecordFetchBusinessException;
import com.acs.enterprise.common.program.contactmanagement.application.exception.CorrespondenceRecordUpdateBusinessException;
import com.acs.enterprise.common.program.contactmanagement.common.delegate.CMDelegate;
import com.acs.enterprise.common.program.contactmanagement.common.domain.EnterpriseUser;
import com.acs.enterprise.common.program.contactmanagement.util.helper.ContactManagementConstants;
import com.acs.enterprise.common.security.services.fieldlevelservice.FieldAccessControl;
import com.acs.enterprise.common.security.services.fieldlevelservice.SecurityFLSServiceException;
import com.acs.enterprise.common.security.services.userprofile.EnterpriseUserProfile;
import com.acs.enterprise.common.util.helper.EnterpriseMessageConstants;
import com.acs.enterprise.common.util.logger.EnterpriseLogFactory;
import com.acs.enterprise.common.util.logger.EnterpriseLogger;
import com.acs.enterprise.common.util.validator.EnterpriseCommonValidator;
import com.acs.enterprise.mmis.member.common.domain.Member;
import com.acs.enterprise.mmis.member.common.vo.MemberSearchCriteriaVO;
import com.acs.enterprise.mmis.operations.claimadministration.application.exception.ClaimCorrectionSearchGetException;
import com.acs.enterprise.mmis.operations.claimadministration.common.delegate.ClaimCorrectionDelegate;
import com.acs.enterprise.mmis.operations.common.domain.ClaimParent;
import com.acs.enterprise.mmis.operations.common.vo.ClaimInquirySearchResultsVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.application.exception.ServiceAuthBusinessException;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.vo.AllSAUserVO;
import com.acs.enterprise.mmis.operations.tpladministration.application.exception.TPLPolicyBusinessException;
import com.acs.enterprise.mmis.operations.tpladministration.application.exception.TPLRecoveryBusinessException;
import com.acs.enterprise.mmis.operations.tpladministration.application.helper.TPLRecoveryAppRules;
import com.acs.enterprise.mmis.operations.tpladministration.common.delegate.TPLPolicyDelegate;
import com.acs.enterprise.mmis.operations.tpladministration.common.delegate.TPLRecoveryDelegate;
import com.acs.enterprise.mmis.operations.tpladministration.common.delegate.TPLRecoveryProcessDelegate;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.RCVRYAttachment;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.RCVRYESTLien;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.TPLCarrier;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.TPLRecoveryCaseClaim;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.TPLRecoveryCaseDetail;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.TPLRecoveryEstate;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.TPLRecoveryEstateDetail;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.TPLRecoveryPolicy;
import com.acs.enterprise.mmis.operations.tpladministration.common.domain.TPLRecoveryResponse;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.AttachmentsVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.RecoveryResponse;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLCarrierRequestVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLHIPPWokerVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseBillingInformationVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseCarrierAddressVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseCarrierInfoVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseClaimAndResponseVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseEstateDetailVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseIncludedClaimsVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseInterestedPartyAddressVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseInterestedPartyVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseMemberClaimLineSelectionVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseMemberClaimSelectionVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseMemberDetailsVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseOrthodontiaVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCasePolicyInfoVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseRecoveryMethodVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseRelationshipVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseResponseVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseServiceAuthVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryHistoryVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryResponseHistroyListVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryResponsesListVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoverySearchCriteriaVO;
import com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoverySearchResultVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.ACSComparator;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.CommonEntityValidator;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLAdministrationConstants;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLAdministrationHelper;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLAlertDOConvertor;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLHIPPConstants;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLHIPPValidateHelper;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLNotesHelper;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLRecoveryCaseConstants;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLRecoveryConversionHelper;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLRecoveryValidateHelper;
import com.acs.enterprise.mmis.operations.tpladministration.view.helper.TPLRoutingDOConvertor;
import com.acs.enterprise.mmis.operations.tpladministration.view.validator.TPLRecoveryCommonValidator;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.AddressVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.EAddressVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.EmployerCommonEntityVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.EmployerVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.PhoneVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.TPLAlertVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.TPLRecoveryCaseAssetsAndLiabilitiesVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.TPLRecoveryCaseBillingAddressVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.TPLRecoveryCaseDetailVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.TPLRecoveryCaseLienInfoVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.TPLRecoveryCaseMemberClaimFilterVO;
import com.acs.enterprise.mmis.operations.tpladministration.view.vo.TPLRecoveryCaseSettlementVO;
import com.acs.enterprise.ui.javax.faces.component.auditHistory.AuditHistoryTable;
import com.acs.enterprise.mmis.operations.tpladministration.view.bean.TPLRecoverySearchDataBean;
import com.acs.enterprise.mmis.provider.common.delegate.ProviderInformationDelegate;


/**
 * This controller bean comprises the common methods which will be used across
 * TPLRecovery functionalities. This bean is mainly responsible for Save and
 * Search operations of the TPLRecovery.
 * 
 * @generated "UML to Java V1.4
 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
 */


public class TPLRecoveryControllerBean extends EnterpriseBaseControllerBean {

	/** Holds entry time. */
	//private long entryTime;

	/** Holds exit time. */
	//private long exitTime;
	 private static final String SUCCESS = TPLAdministrationConstants.SUCCESS;
	 /**
	   * Holds the Flag for the failure
	   */
	 private static final String FAILED = TPLAdministrationConstants.FAILURE;
	/**
	 * Flag to enable and disable the ascending and descending icons
	 */
	private boolean[] searchColumnSortFlag = new boolean[] { true, true, true,
			true, true, true, true, true, true, true, true, true, true, true,
			true, true, true, true, true, true, true, true, true, true };

	/** constant declaration for BatchControlAddControllerBean. */
	private String className = this.getClass().getName();

	/** Logger Declaration. */
	// Serialization Issue (JSF 2.0 Migration) fix Starts
	private static final EnterpriseLogger logger = EnterpriseLogFactory.getLogger(TPLRecoveryControllerBean.class);
	//	private EnterpriseLogger logger = EnterpriseLogFactory.getLogger(className);
	// Serialization Issue (JSF 2.0 Migration) fix Ends

	//Infinite - Defect Resolution ESPRD00661632
	private TPLAlertDataBean alertDataBean;
		
	private TPLRoutingDataBean routingDataBean;
	
	public String GlobUserID = getUserID();
	/**
	 * Comment for <code>data</code>
	 */
	//GLOBAL ACTION COMMENT
	/*private UIData data;*/
	private boolean carrierIDRequired =true;
	/**
	 * @return Returns the tplPolicyDataBean.
	 */
	public TPLPolicyDataBean getTplPolicyDataBean() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		TPLPolicyDataBean tplPolicyDataBean = (TPLPolicyDataBean)facesContext.getApplication().
		getVariableResolver().resolveVariable(facesContext, TPLAdministrationConstants.TPL_POLICY_DATA_BEAN);
		if (tplPolicyDataBean == null){
			 tplPolicyDataBean = (TPLPolicyDataBean) facesContext
				.getApplication().createValueBinding(
						"#{" + TPLAdministrationConstants.TPL_POLICY_DATA_BEAN + "}")
				.getValue(facesContext);
		}
		return tplPolicyDataBean;
	}
	
	/**
	 * Constructor
	 */
	public TPLRecoveryControllerBean() 
	{
	}

	/**
	 * @return
	 */
	public TPLRecoveryDataBean getTPLRecoveryDataBean() 
	{
		TPLRecoveryDataBean tplRecoveryDataBean = null;
		try{
			FacesContext fc = FacesContext.getCurrentInstance();
			tplRecoveryDataBean = (TPLRecoveryDataBean)fc.getApplication().getVariableResolver().resolveVariable(fc, TPLRecoveryDataBean.BEAN_NAME);		
			if (tplRecoveryDataBean == null){
				tplRecoveryDataBean = (TPLRecoveryDataBean) fc.getApplication().createValueBinding(
						"#{" + TPLRecoveryDataBean.BEAN_NAME + "}").getValue(fc);
			}	
		}catch(Exception e){
			e.printStackTrace();
		}	
		
		return tplRecoveryDataBean;
	}

	public TPLAttachmentDataBean getTPLAttachmentDataBean() 
	{
		FacesContext facesContext = FacesContext.getCurrentInstance();//TSU
		TPLAttachmentDataBean attachmentDataBean = (TPLAttachmentDataBean)facesContext.getApplication().
		getVariableResolver().resolveVariable(facesContext, TPLAttachmentDataBean.BEAN_NAME);		
		if (attachmentDataBean == null){
			attachmentDataBean = (TPLAttachmentDataBean) facesContext
				.getApplication().createValueBinding(
						"#{" + TPLAttachmentDataBean.BEAN_NAME + "}").getValue(facesContext);
		}		
		return attachmentDataBean;
	}
	//As per defect ESPRD00089051
	/**
	 * Comment for <code>claimUpdateFlag</code>
	 */
	/*private boolean claimUpdateFlag;*/

	//As per defect ESPRD00089078
	/**
	 * Comment for <code>interestedPartyUpdateFlag</code>
	 */
	private boolean interestedPartyUpdateFlag;
	
	/**
	 * Comment for <code>dateformatYYYYMMDD</code>
	 */
	private SimpleDateFormat dateformatYYYYMMDD = new SimpleDateFormat("MM/dd/yyyy");
	
	/**
	 * This method is used to validate service Authorized Id.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	
	public boolean validateServiceAuthId() 
	{
		boolean flag=false;
	  	try 
		{
	  	  if (!validateServiceAut()) 
	  	  { 
	  		flag=true;
	  		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
	  		
	  		String serviceAuthID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseServiceAuthVO().getServiceAuthID();
	  		String recoveryType = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryType();
	  		String caseStatus = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus();
	  		String sysID=null;
	  		if( null!=recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO()){
	  		//Added for defect ESPRD00782194
	  			if(null != recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getSystemID()){
	  				sysID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getSystemID().toString();
	  			}	  		   
	  		}
	  		if (StringUtils.isNotEmpty(serviceAuthID)) 
	  		{ 
	  		   recoveryDataBean.setFocusThisId("serviceauthfocus");
	  		   TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
	  		   List list = tplRecoveryDelegate.validateServiceAuthId(serviceAuthID,sysID);
	  		   if (list != null)
	  		   {
				  Iterator iterator = list.iterator();
				  while(iterator.hasNext())
				  {
					TPLRecoveryCaseServiceAuthVO authVO = (TPLRecoveryCaseServiceAuthVO)iterator.next();
					TPLRecoveryCaseServiceAuthVO recoveryCaseServiceAuthVO =
						          recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseServiceAuthVO();
					recoveryCaseServiceAuthVO.setServicAuthApprovedAmount(authVO.getServicAuthApprovedAmount());
					recoveryCaseServiceAuthVO.setServicAuthApprovedUnits(authVO.getServicAuthApprovedUnits());
					recoveryCaseServiceAuthVO.setServicAuthUsedAmount(authVO.getServicAuthUsedAmount());
					recoveryCaseServiceAuthVO.setServicAuthExpDate(authVO.getServicAuthExpDate());
					//CR ESPRD00798251
					String name="";
					if(StringUtils.isNotBlank(recoveryDataBean.getRecoveryCaseDetailVO()
							.getRecoveryCaseMemberDetailsVO().getFirstName())){
						name = recoveryDataBean.getRecoveryCaseDetailVO()
									.getRecoveryCaseMemberDetailsVO().getFirstName()+" ";
					}
					if(StringUtils.isNotBlank(recoveryDataBean.getRecoveryCaseDetailVO()
							.getRecoveryCaseMemberDetailsVO().getLastName())){
						name = name + recoveryDataBean.getRecoveryCaseDetailVO()
									.getRecoveryCaseMemberDetailsVO().getLastName();
					}
					if(StringUtils.isNotBlank(name))
						recoveryCaseServiceAuthVO.setMemberName(name);
					Date dob = recoveryDataBean.getRecoveryCaseDetailVO()
										.getRecoveryCaseMemberDetailsVO().getDob();
					if (dob != null)
					{
						SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
					 	String dobStr = dateFormat.format(dob);
					 	recoveryCaseServiceAuthVO.setDOB(dobStr);
					}
					recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryCaseServiceAuthVO(recoveryCaseServiceAuthVO);
				  }
				   recoveryDataBean.setShowServiceAuthDetails(true);
				   recoveryDataBean.setSaValidateflag(true);
			   }
			   else
			   { 
				  flag=false;
				  TPLRecoveryCaseServiceAuthVO tplRecoveryCaseServiceAuthVO = new TPLRecoveryCaseServiceAuthVO();
				  tplRecoveryCaseServiceAuthVO.setServiceAuthID(serviceAuthID);
				  recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryCaseServiceAuthVO(tplRecoveryCaseServiceAuthVO);
				  TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.SERVICE_AUTH_INVALID,"serviceAuthID");
				  recoveryDataBean.setSaValidateflag(false);
			   }
	  		 } 
	  	   }
	  	} 
	  	catch (TPLRecoveryBusinessException recoveryBusinessException) 
		{ 
	  		flag=false;
	  		recoveryBusinessException.printStackTrace();
	  		TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.SERVICE_AUTH_INVALID,"serviceAuthID");
		}
	  	catch (Exception exception) 
		{ 
	  		exception.printStackTrace();
	  		FacesMessage message = new FacesMessage();
	  		message.setDetail(exception.getMessage());
	  		FacesContext.getCurrentInstance().addMessage("abc", message); 
		}
	  	return flag;
	  }
	 
	/**
	 * @return boolean
	 */
	 private boolean validateServiceAut() 
		{
			boolean result = false;
			TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
			TPLRecoveryCaseDetailVO tplRecoveryCaseDetailVO = recoveryDataBean.getRecoveryCaseDetailVO();
			if (tplRecoveryCaseDetailVO != null) 
			{
				TPLRecoveryCaseServiceAuthVO tplRecoveryCaseServiceAuthVO = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseServiceAuthVO();
				if (tplRecoveryCaseServiceAuthVO != null) 
				{
					String serviceAuthID = tplRecoveryCaseServiceAuthVO.getServiceAuthID();
					if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0002(recoveryDataBean,
							tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType(),
							tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
							serviceAuthID)) 
					{
						result = true;
					}
				}
			}
			return result;
		}

	/**
	 * This method is used to validate member information like Member Id and
	 * Member Name.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String validateMemberInfo() 
	{
	  try 
	  {
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		FacesContext context = FacesContext.getCurrentInstance();
		String strMessage = SUCCESS;
		if (!validateMemberDetails())
		{
		   TPLRecoveryCaseDetailVO recoveryDetailVO = tplRecoveryDataBean.getRecoveryCaseDetailVO();
		   if (recoveryDetailVO != null) 
		   {
			  TPLRecoveryCaseMemberDetailsVO tplRecoveryMemberDetailVO = recoveryDetailVO
								.getRecoveryCaseMemberDetailsVO();
			  if (tplRecoveryMemberDetailVO != null) 
			  {
				TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
				// Defect Fix ESPRD00662231
			    TPLRecoveryCaseMemberDetailsVO tplRecoveryCaseMemDetailaVO = tplRecoveryDelegate.getMember(
							  tplRecoveryMemberDetailVO.getMemberID().toUpperCase(),
							  tplRecoveryMemberDetailVO.getMemberIDType());
				
				//ESPRD00422595.UC_FIN_TPL_022.1
			  if(tplRecoveryCaseMemDetailaVO != null && tplRecoveryCaseMemDetailaVO.getMemberID()!= null)
			  {
				/*if (tplRecoveryCaseMemDetailaVO.getMemberID()== null)							 
				{
					System.out.println("---2----");
					TPLAdministrationHelper.setErrorMessage(ResourceBundle
					 			.getBundle(TPLAdministrationConstants.TPL_MEMBERCHANGE_PROPERTIES)
								.getString(TPLAdministrationConstants.MEMBERID_NOT_VALID), "memberID");
							 	//End Fix
					strMessage = FAILED;
 			    }*/
				SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
				//	Defect : ESPRD00447205
				boolean isMemConfCode = tplRecoveryCaseMemDetailaVO.isDomViolIndex();
				if (isMemConfCode)
				{
				 	context.addMessage(null,new FacesMessage(ResourceBundle
				 			.getBundle(TPLAdministrationConstants.TPL_MEMBERCHANGE_PROPERTIES)
							.getString(TPLAdministrationConstants.MEMBER_HAVE_CONF_CODE)));
				}
				if (tplRecoveryCaseMemDetailaVO.getDob() != null)
				{
				 	String dob = dateFormat.format(tplRecoveryCaseMemDetailaVO.getDob());
				 	tplRecoveryCaseMemDetailaVO.setDobStr(dob);
				}
				if (tplRecoveryCaseMemDetailaVO.getDod() != null)
				{
				 	String dod = dateFormat.format(tplRecoveryCaseMemDetailaVO.getDod());
				 	tplRecoveryCaseMemDetailaVO.setDodStr(dod);
				}
				if(tplRecoveryCaseMemDetailaVO.getSsn()!=null)
				{
				 	tplRecoveryCaseMemDetailaVO.setSsn(TPLAdministrationHelper.getSSNFormat(tplRecoveryCaseMemDetailaVO.getSsn()));
				}
			   
			    // for defect : ESPRD00724047
			    if(tplRecoveryCaseMemDetailaVO.getDodStr() != null && !(tplRecoveryCaseMemDetailaVO.getDodStr().isEmpty()) ){
			    	if(tplRecoveryCaseMemDetailaVO.getDodStr().equalsIgnoreCase("12/31/9999")){
					    tplRecoveryCaseMemDetailaVO.setDodStr("") ; 
				    }
			    }
			    if(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryType()!=null
			    		&& tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryType().equals("3")){
			    	 TPLRecoveryCaseEstateDetailVO tplRecoveryCaseEstateDetailVO =  getTPLRecoveryDataBean()
                     							.getRecoveryCaseDetailVO().getTplRecoveryCaseEstateDetailVO();
			    	 tplRecoveryCaseEstateDetailVO.setName(tplRecoveryCaseMemDetailaVO.getName());
			    	 tplRecoveryCaseEstateDetailVO.setDateofBirth(tplRecoveryCaseMemDetailaVO.getDobStr());
			    	 tplRecoveryCaseEstateDetailVO.setDateofDeath(tplRecoveryCaseMemDetailaVO.getDodStr());
					 tplRecoveryCaseEstateDetailVO.setSsn(tplRecoveryCaseMemDetailaVO.getSsn());
					 tplRecoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryCaseEstateDetailVO(tplRecoveryCaseEstateDetailVO);
			    }
				//end
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().setSystemID(tplRecoveryCaseMemDetailaVO.getSystemID());
				tplRecoveryDataBean.setSystemId(tplRecoveryCaseMemDetailaVO.getSystemID());
				tplRecoveryCaseMemDetailaVO.setMemberID(tplRecoveryMemberDetailVO.getMemberID());
				tplRecoveryCaseMemDetailaVO.setMemberIDType(tplRecoveryMemberDetailVO.getMemberIDType());
				recoveryDetailVO.setRecoveryCaseMemberDetailsVO(tplRecoveryCaseMemDetailaVO);
				tplRecoveryDataBean.setShowMemberDetails(true);
				tplRecoveryDataBean.setFocusThisId("memberidfocus");
			  }
			  else
			  {
				  TPLAdministrationHelper.setErrorMessage(ResourceBundle
				 			.getBundle(TPLAdministrationConstants.TPL_MEMBERCHANGE_PROPERTIES)
							.getString(TPLAdministrationConstants.MEMBERID_NOT_VALID), "memberID");
						 	//End Fix
				strMessage = FAILED;
				tplRecoveryDataBean.setMemberValidationFailed(true);
			  }
			  }
		   }
		} 
	  } catch (RemoteException e) {
			FacesMessage message = new FacesMessage();
			message.setDetail(e.getMessage());
			FacesContext.getCurrentInstance().addMessage("abc", message);
	  }catch(TPLRecoveryBusinessException e){
		  	if(logger.isDebugEnabled()){
			  logger.debug(e.getErrorCode());
			  logger.debug(e.getMessage());
		  }

	  }
	  return "success";

	}

	/**
	 * @return
	 */
	boolean validateMemberDetails() {
		boolean result = true;
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		TPLRecoveryCaseDetailVO recoveryDetailVO = tplRecoveryDataBean.getRecoveryCaseDetailVO();
		if (recoveryDetailVO != null) {
			TPLRecoveryCaseMemberDetailsVO memberDetailVO = recoveryDetailVO.getRecoveryCaseMemberDetailsVO();
			if (memberDetailVO != null){
			    if (memberDetailVO != null && StringUtils.isNotEmpty(memberDetailVO.getMemberID()) 
					&& StringUtils.isNotEmpty(memberDetailVO.getMemberIDType())) {
					result = false;
				}
				if (StringUtils.isEmpty(memberDetailVO.getMemberID()) && StringUtils.isEmpty(memberDetailVO.getMemberIDType())) {
					TPLRecoveryValidateHelper.errorForRequiredField("memberIDType");
					TPLRecoveryValidateHelper.errorForRequiredField("memberID");
					result = true;
				}
				
				if(StringUtils.isNotEmpty(memberDetailVO.getMemberID()) && StringUtils.isEmpty(memberDetailVO.getMemberIDType())){
					//Defect Fix ESPRD00662231
					TPLAdministrationHelper.setErrorMessage(ResourceBundle
				 			.getBundle(TPLAdministrationConstants.TPL_MEMBERCHANGE_PROPERTIES)
							.getString(TPLRecoveryCaseConstants.TPL_RECOVERY_MEMBER_TYPE_REQUIRED), "memberIDType");
					result = true;
					//Added below code for deffect Fix:ESPRD00088734
				}else if(StringUtils.isEmpty(memberDetailVO.getMemberID()) && StringUtils.isNotEmpty(memberDetailVO.getMemberIDType())){
					//Defect Fix ESPRD00662231
					TPLAdministrationHelper.setErrorMessage(ResourceBundle
				 			.getBundle(TPLAdministrationConstants.TPL_MEMBERCHANGE_PROPERTIES)
							.getString(TPLRecoveryCaseConstants.TPL_RECOVERY_MEMBER_ID_REQUIRED), "memberID");
					result = true;
				}
				tplRecoveryDataBean.setFocusThisId("memberidfocus");
			}	
		}
		return result;
	}
	
	/**
	 * 
	 */
	public void showRecoveryDetails()
	{
		TPLRecoveryDataBean  tplRecoveryDataBean = getTPLRecoveryDataBean() ;
		tplRecoveryDataBean.setRenderUpdateRecovery(false);
		tplRecoveryDataBean.setRenderAddMode(true);
		tplRecoveryDataBean.setCheckClaimsEmpty(true);
		tplRecoveryDataBean.setShowWorkerDetails(true);
		tplRecoveryDataBean.setShowRecoveryDetails(true);
		tplRecoveryDataBean.setDisableRecoveryMethod(true);
		tplRecoveryDataBean.setRenderRcvryMethod(true);
		FacesContext.getCurrentInstance().getExternalContext().getSessionMap()
 					.put("TPLRecoveryDataBean", tplRecoveryDataBean); 
	}

	/**
	 * @param ae
	 */
	/*public void sortSearchKey(ActionEvent ae) {
		logger.info("view the search column sort flag ");
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("tplRecoverySearchResultsFocus");
		FacesContext fc = FacesContext.getCurrentInstance();
		TPLRecoverySearchDataBean tplRecoverySearchDataBean = getTPLRecoverySearchDataBean();
		String SORT_NO = "sortNo";
		String COLUMN = "column";
		String LIST = "list";
		Map map = fc.getExternalContext().getRequestParameterMap();
		String paramName = map.get(SORT_NO).toString();
		String column = map.get(COLUMN).toString();
		String listname = map.get(LIST).toString();
		List list = null;
		 Temprory flag holding the initially set to true for all icons. 
		boolean[] sortFlagTemp = new boolean[] { true, true, true, true, true,
				true, true, true, true, true, true, true, true, true, true,
				true, true, true, true, true, true, true, true, true };

		
		 * Setting the flag to false in order to render the descending/ascending
		 * icon.
		 
		try {
			if ("tplRecoverySearchResults".equalsIgnoreCase(listname)) {
				sortFlagTemp[Integer.parseInt(paramName)] = false;
				list = tplRecoverySearchDataBean.getSearchResultList();
				System.out.println("Listsize in search:"+list.size());
				setSearchColumnSortFlag(sortFlagTemp);
			}
			
			if(list != null){
			   if ((Integer.parseInt(paramName)) % 2 == 0) {
				  sortRecoverypSearchData(true,column,list);
			   } else {
				  sortRecoverypSearchData(false,column,list);
			    }
			}

		 } catch (NumberFormatException e) {
			logger.error("NumberFormatException while calling the "
					+ "TPLRecoveryControllerBean.sortKey().... ", e);
		}
		//Infinite defect Implementation :ESPRD00480706
		refreshView();
	}*/

	/**
	 * @return
	 */
	private TPLRecoverySearchDataBean getTPLRecoverySearchDataBean() {
		FacesContext facesContext = FacesContext.getCurrentInstance();
		TPLRecoverySearchDataBean recoverySearchDataBean = (TPLRecoverySearchDataBean)facesContext.getApplication().
		getVariableResolver().resolveVariable(facesContext, TPLRecoverySearchDataBean.BEAN_NAME);
		if (recoverySearchDataBean == null){
			recoverySearchDataBean = (TPLRecoverySearchDataBean) facesContext
				.getApplication().createValueBinding(
						"#{" + TPLRecoverySearchDataBean.BEAN_NAME + "}")
				.getValue(facesContext);
		}
		return recoverySearchDataBean;
	}
	/**
	 * @param value
	 */
	public void valueChangeEventStatus(ValueChangeEvent value){
		
		String selectedValue = null;
		selectedValue = (String)value.getNewValue();
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		SimpleDateFormat dateformatYYYYMMDD = new SimpleDateFormat("MM/dd/yyyy");
		Date sysDate = new  Date();
		if(selectedValue != null)
		{
			if (selectedValue.equals("O")){
			tplRecoveryDataBean.getRecoveryCaseDetailVO().setCaseOpenDate(dateformatYYYYMMDD.format(sysDate));
            //ESPRD00088940.UC_OPR_TPL_023.1

			tplRecoveryDataBean.setRecoveryType(true); 
			tplRecoveryDataBean.setRecoveryMethod(true); 
			tplRecoveryDataBean.setClaimDatesreqfield(true);
			tplRecoveryDataBean.setClosedexcludeind(false);// defect id: ESPRD00809878 added to enable the fields
		   }
		   if(selectedValue.equals("C")){
			  tplRecoveryDataBean.getRecoveryCaseDetailVO().setCaseOpenDate(dateformatYYYYMMDD.format(sysDate));
			  tplRecoveryDataBean.setRecoveryType(true);
			  tplRecoveryDataBean.setRecoveryMethod(true);
			  tplRecoveryDataBean.setClaimDatesreqfield(true);
			  tplRecoveryDataBean.setClosedexcludeind(true);// defect id: ESPRD00809878 to disable the fields
		   }
		   if(selectedValue.equals("P")){
			  tplRecoveryDataBean.getRecoveryCaseDetailVO().setCaseOpenDate(null);
			  tplRecoveryDataBean.setRecoveryType(false);
			  tplRecoveryDataBean.setRecoveryMethod(true);
			  tplRecoveryDataBean.setClaimDatesreqfield(false);
			  tplRecoveryDataBean.setClosedexcludeind(false);// defect id: ESPRD00809878 to disable the fields
		   }
		}
	}
	/**
	 * @param value
	 */
	public void valueChaneEventWorker(ValueChangeEvent value)
	{
		String selectedValue = null;
		selectedValue = (String) value.getNewValue();
		FacesContext.getCurrentInstance().renderResponse();
		TPLRecoverySearchDataBean recovBn = getTPLRecoverySearchDataBean();
		recovBn.getTplRecoverySearchCriteriaVO().setSearchByWorker(selectedValue);
		if (selectedValue != null)
		{
			if (selectedValue.equals("WN")) 
			{
				recovBn.setRenderWorkerName(true);
				recovBn.setRenderWorkerID(false);
			} 
			if (selectedValue.equals("WI")) 
			{
				recovBn.setRenderWorkerName(false);
				recovBn.setRenderWorkerID(true);
			}
			if (selectedValue.equals("")) 
			{
				recovBn.setRenderWorkerName(false);
				recovBn.setRenderWorkerID(false);
			}
		}
		//UC_OPR_TPL_022.2.ESPRD00088561 
		// Changed for heap dump
		getTPLRecoverySearchDataBean().setSelectedIndex(3);
	}
	
	/**
	 * @param value
	 */
	public void valuleChangeEventFilter(ValueChangeEvent value){
		
		String selectedValue = null;
		selectedValue = (String)value.getNewValue();
		TPLRecoveryDataBean recovBn = getTPLRecoveryDataBean();
		if(StringUtils.isBlank(selectedValue))
		{
			recovBn.setRenderFilterDate(false);
			recovBn.setRenderFilterText(false);
		}
		else if("I".equalsIgnoreCase(selectedValue)){
			recovBn.setRenderFilterText(true);
			recovBn.setRenderFilterDate(false);
		}
		else{
			recovBn.setRenderFilterDate(true);
			recovBn.setRenderFilterText(false);
		}
		recovBn.setRenderResultClaimFilter(false);
	}
	
	/**
	 * CR-2522 Implementation
	 * 
	 * @param value
	 */
	public void valueChaneAssestsType(ValueChangeEvent value) {
		String selectedValue = null;
		selectedValue = (String) value.getNewValue();
		FacesContext.getCurrentInstance().renderResponse();
		if (!"+".equals(selectedValue)) {
			getTPLRecoveryDataBean().setRenderSoldBox(true);
		}
	}

	/**
	 * This method is used to reset the search criteria.
	 * 
	 * @return String
	 */
	public void resetSearchAction(ActionEvent searchCriteria) 
	{
		String SUCCESS = "success";
		TPLRecoverySearchCriteriaVO tplRecoverySearchCriteriaVO = new TPLRecoverySearchCriteriaVO();
		TPLRecoverySearchDataBean tplRecoverySearchDataBean = getTPLRecoverySearchDataBean();
		tplRecoverySearchCriteriaVO.setSearchByMember("MI");
		tplRecoverySearchDataBean.setRenderMemberID(true);
		tplRecoverySearchDataBean.setRenderMemberName(false);
		tplRecoverySearchDataBean.setRenderMemberSSN(false);
		tplRecoverySearchCriteriaVO.setSearchByWorker("WN");
		tplRecoverySearchDataBean.setRenderWorkerName(true);
		tplRecoverySearchDataBean.setRenderWorkerID(false);
		tplRecoverySearchDataBean.setTplRecoverySearchCriteriaVO(tplRecoverySearchCriteriaVO);
		tplRecoverySearchDataBean.setTplRecoverySearchResults(false);
		tplRecoverySearchDataBean.setImageRender(null);
		String searchTab=(String) searchCriteria.getComponent().getAttributes().get("tab");
        if(searchTab!=null){
			int tabIndex = Integer.parseInt(searchTab);
			  if(tabIndex>=0){
				  tplRecoverySearchDataBean.setSelectedIndex(tabIndex);
			  }
		}
	}
	
	public String resetSearch() 
	{
		String SUCCESS = "success";
		TPLRecoverySearchCriteriaVO tplRecoverySearchCriteriaVO = new TPLRecoverySearchCriteriaVO();
		TPLRecoverySearchDataBean tplRecoverySearchDataBean = getTPLRecoverySearchDataBean();
		tplRecoverySearchDataBean.setTplRecoverySearchCriteriaVO(tplRecoverySearchCriteriaVO);
		tplRecoverySearchDataBean.setTplRecoverySearchResults(false);
		tplRecoverySearchDataBean.setImageRender(null);
		return SUCCESS;
	}

	/**
	 * 
	 */
	public void addRecoveryInfo() {
		if(logger.isDebugEnabled()){
			  logger.debug("in addrecoveryInfo method >>>");
		  }
		FacesContext facesContext = FacesContext.getCurrentInstance();
		String rowValue = (String) facesContext.getExternalContext().getRequestParameterMap().get("ACTION_NAME");
		if("sourceAction".equalsIgnoreCase(rowValue))
		{
			TPLRecoverySearchDataBean  tplRecoverySearchDataBean= getTPLRecoverySearchDataBean();
			tplRecoverySearchDataBean.setRenderedSearch(false);
			tplRecoverySearchDataBean.setRenderRecoveryCaseID(true);
			ActionRequest request = (ActionRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
			request.setAttribute("sendVO", "RecoveryAdd"); 
			////ESPRD00865758 - With out click cancel on edit Recovery by menu level coming to add Recovery then to clear old data
			PortletSession pSession = (PortletSession) facesContext.getExternalContext().getSession(true);
	     	pSession.setAttribute("Recovery", "ADDRECOVERY", pSession.APPLICATION_SCOPE);
		}
	}
	
	//Added for UC-OPR-TPL-0221_ESPRD00406419_02162010
	public void addNewRecoveryPage() {
		if(logger.isDebugEnabled()){
			  logger.debug("TPLRecoveryControllerBean::addNewRecoveryPage:: START >>>");
		  }
		TPLRecoveryDataBean recoveryDataBean = new TPLRecoveryDataBean();
		TPLPolicyDataBean policyDataBean = new TPLPolicyDataBean();
		// Defect ESPRD00811179: Clear the attachment list
		getTPLAttachmentDataBean().setAttachmentList(new ArrayList());	
		//To close previous opened attachments
		getTPLAttachmentDataBean().setShowEditAttachments(false);
		getTPLAttachmentDataBean().setShowAddAttachments(false);
		TPLAlertDataBean alertDataBean = new TPLAlertDataBean();
		alertDataBean.setRenderEditAlert(false);
		recoveryDataBean.setClosedexcludeind(false);
		recoveryDataBean.setShowRecoveryDetails(true);
		recoveryDataBean.setDisableRecoveryMethod(true);
		recoveryDataBean.setRenderRcvryMethod(true);
		recoveryDataBean.setRenderAddMode(true);
		recoveryDataBean.setRenderEditResponse(false);
		recoveryDataBean.setSaveResponseDetails(false); //ESPRD00853186
		recoveryDataBean.setRenderUpdateRecovery(false);
		recoveryDataBean.setCheckClaimsEmpty(true);
		recoveryDataBean.setShowSuccess(false);
		recoveryDataBean.setSaValidateflag(false);
		recoveryDataBean.setRenderEditCarrierInfo(false); // For Defect ESPRD00855843
		FacesContext facesContext = FacesContext.getCurrentInstance();
		// DEFECT_ESPRD00867983_PGM-GLB_TPL_12-14-12
		LettersAndResponsesDataBean lrDataBean= new LettersAndResponsesDataBean();
		//DEFECT_ESPRD00867983_PGM-GLB_TPL_12-14-12
		lrDataBean.setRenderEditSection(false);
		lrDataBean.setShowSucessMessage(false);
		//ESPRD00901520
		CommonEntityDataBean commonEntityDataBean = TPLNotesHelper.getCommonEntityDataBean();
		CommonEntityVO commonEntityVO = TPLNotesHelper
											.getCommonEntityDataBean().getCommonEntityVO();
		if (commonEntityVO != null) {
			commonEntityVO.setCommonNotesVO(new CommonNotesVO());
			if (commonEntityVO.getNoteSetVO() != null
					&& commonEntityVO.getNoteSetVO().getNotesList() != null) {
				TPLNotesHelper.getCommonEntityDataBean().getCommonEntityVO()
						.getNoteSetVO().getNotesList().clear();
				 commonEntityDataBean.setNewNotesRender(false);
		         commonEntityDataBean.setFilterNotesRender(false);
		         commonEntityDataBean.setMainNotesRender(false);
		         commonEntityDataBean.setSaveNotesChk(false);
			}
		}
		facesContext.getExternalContext().getSessionMap().put("TPLRecoveryDataBean", recoveryDataBean);
		facesContext.getExternalContext().getSessionMap().put("TPLPolicyDataBean", policyDataBean);
		//DEFECT_ESPRD00867983_PGM-GLB_TPL_12-14-12
		facesContext.getExternalContext().getSessionMap().put("LettersAndResponsesDataBean", lrDataBean);
		facesContext.getExternalContext().getSessionMap().put("TPLAlertDataBean", alertDataBean);
	}
	
	public void clearcache() {
		TPLRecoveryDataBean recoveryDataBean = new TPLRecoveryDataBean();
		TPLPolicyDataBean policyDataBean = new TPLPolicyDataBean();
		// DEFECT_ESPRD00867983_PGM-GLB_TPL_12-14-12
		LettersAndResponsesDataBean lrDataBean= new LettersAndResponsesDataBean();
		TPLAlertDataBean alertDataBean = new TPLAlertDataBean();
		alertDataBean.setRenderEditAlert(false);
		// Defect ESPRD00811179: Clear the attachment list
		getTPLAttachmentDataBean().setAttachmentList(new ArrayList());
		//To close previous opened attachments
		getTPLAttachmentDataBean().setShowEditAttachments(false);
		getTPLAttachmentDataBean().setShowAddAttachments(false);
		recoveryDataBean.setShowRecoveryDetails(true);
		recoveryDataBean.setDisableRecoveryMethod(false);
		recoveryDataBean.setRenderRcvryMethod(false);
		recoveryDataBean.setRenderAddMode(true);
		recoveryDataBean.setRenderUpdateRecovery(false);
		recoveryDataBean.setCheckClaimsEmpty(true);
		recoveryDataBean.setShowSuccess(false);
		recoveryDataBean.setRenderEditResponse(false);
		recoveryDataBean.setSaveResponseDetails(false); //ESPRD00853186
		recoveryDataBean.setRenderEditClaimFilter(false);
		recoveryDataBean.setRenderEditCarrierInfo(false);
		//DEFECT_ESPRD00867983_PGM-GLB_TPL_12-14-12
		lrDataBean.setRenderEditSection(false);
		lrDataBean.setShowSucessMessage(false);
		//ESPRD00901520
		CommonEntityDataBean commonEntityDataBean = TPLNotesHelper.getCommonEntityDataBean();
		CommonEntityVO commonEntityVO = TPLNotesHelper.getCommonEntityDataBean().getCommonEntityVO();
		if (commonEntityVO != null) {
			commonEntityVO.setCommonNotesVO(new CommonNotesVO());
			if (commonEntityVO.getNoteSetVO() != null
					&& commonEntityVO.getNoteSetVO().getNotesList() != null) {
				TPLNotesHelper.getCommonEntityDataBean().getCommonEntityVO()
											.getNoteSetVO().getNotesList().clear();
				 commonEntityDataBean.setNewNotesRender(false);
		         commonEntityDataBean.setFilterNotesRender(false);
		         commonEntityDataBean.setMainNotesRender(false);
		         commonEntityDataBean.setSaveNotesChk(false);
			}
		}
		FacesContext facesContext = FacesContext.getCurrentInstance();
		facesContext.getExternalContext().getSessionMap().put("TPLRecoveryDataBean", recoveryDataBean);
		facesContext.getExternalContext().getSessionMap().put("TPLPolicyDataBean", policyDataBean);
		//DEFECT_ESPRD00867983_PGM-GLB_TPL_12-14-12
		facesContext.getExternalContext().getSessionMap().put("LettersAndResponsesDataBean", lrDataBean);
		facesContext.getExternalContext().getSessionMap().put("TPLAlertDataBean", alertDataBean);
	}

	/*
	 * @param searchCriteria : ActionEvent @return String @throws
	 * TPLRecoveryBusinessException @throws RemoteException
	 */
	public String searchRecoveryCase(ActionEvent searchCriteria)
			throws TPLRecoveryBusinessException, RemoteException {
		Locale locale = null;
		String searchType = null;
		String SUCCESS = "success";
		/*try {*/
			//entryTime = System.currentTimeMillis();

			final String MEMBER = "member";
			final String RECOVERYCASEID = "recoveryCaseID";
			final String RECOVERYTYPE = "recoveryCaseType";
			final String WORKER = "worker";
			final String searchOption = (String) searchCriteria.getComponent().getAttributes().get("search");
			TPLRecoverySearchDataBean tplRecoverySearchDataBean = getTPLRecoverySearchDataBean();
			tplRecoverySearchDataBean.setSearchOption(searchOption);
			
			if(logger.isDebugEnabled()){
				logger.debug("searchOption :: " + searchOption);
			  }
			
			TPLRecoverySearchCriteriaVO tplRecoverySearchCriteriaVO = tplRecoverySearchDataBean
					.getTplRecoverySearchCriteriaVO();
			tplRecoverySearchDataBean.setSearchResultList(null);
			tplRecoverySearchDataBean.getTplRecoverySearchCriteriaVO().setSearchType(searchOption);
			if (MEMBER.equalsIgnoreCase(searchOption)) 
			{
				searchType = tplRecoverySearchCriteriaVO.getSearchByMember();
			   //for defect 
				String SSN =null; 
				
				if(searchType.equals(TPLAdministrationConstants.SHOW_MEMBER_SSN)){
					SSN = tplRecoverySearchDataBean.getTplRecoverySearchCriteriaVO().getMemberSSN();
					
						if(SSN!=null && SSN.length()>6)
						{
							SSN=StringUtils.remove(SSN,'-');
						}
						
				     tplRecoverySearchDataBean.getTplRecoverySearchCriteriaVO().setMemberSSN(SSN);
					}
				
				//end
				if (searchType.equals(TPLAdministrationConstants.SHOW_MEMBER_NAME))
				{
					if (null != tplRecoverySearchDataBean.getMemberFName() &&
							tplRecoverySearchDataBean.getMemberFName().equals(TPLAdministrationConstants.SEARCH_MEMBER_NAMES))
					{
						tplRecoverySearchCriteriaVO.setMemberFirstNamePhonetic(false);
						tplRecoverySearchCriteriaVO.setMemberFirstNameStartsWith(true);
					}
					else if(null != tplRecoverySearchDataBean.getMemberFName())
					{
						tplRecoverySearchCriteriaVO.setMemberFirstNamePhonetic(true);
						tplRecoverySearchCriteriaVO.setMemberFirstNameStartsWith(false);
					}
					if (null != tplRecoverySearchDataBean.getMemberLName() &&
							tplRecoverySearchDataBean.getMemberLName().equals(TPLAdministrationConstants.SEARCH_MEMBER_NAMES))
					{
						tplRecoverySearchCriteriaVO.setMemberLastNamePhonetic(false);
						tplRecoverySearchCriteriaVO.setMemberLastNameStartsWith(true);
					}
					else if (null != tplRecoverySearchDataBean.getMemberLName())
					{
						tplRecoverySearchCriteriaVO.setMemberLastNamePhonetic(true);
						tplRecoverySearchCriteriaVO.setMemberLastNameStartsWith(false);
					}
					
				}
				tplRecoverySearchCriteriaVO.setSearchType(searchType);
				// Changed for heap dump
				tplRecoverySearchDataBean.setSelectedIndex(0);
			}
			if (RECOVERYCASEID.equalsIgnoreCase(searchOption)) 
			{
				searchType = searchOption;
				tplRecoverySearchCriteriaVO.setSearchType(searchOption);
				// Changed for heap dump
				tplRecoverySearchDataBean.setSelectedIndex(1);
			}
			if (RECOVERYTYPE.equalsIgnoreCase(searchOption))
			{
				searchType = searchOption;
				tplRecoverySearchCriteriaVO.setSearchType(searchType);
				// Changed for heap dump
				tplRecoverySearchDataBean.setSelectedIndex(2);
			}

			if (WORKER.equalsIgnoreCase(searchOption)) 
			{
				searchType = tplRecoverySearchCriteriaVO.getSearchByWorker();
				if (searchType.equals(TPLAdministrationConstants.SHOW_RECOVERYWORKER_NAME)) 
				{
					tplRecoverySearchCriteriaVO.setSearchType(TPLAdministrationConstants.SEARCH_BY_RECWORK_NAME);
					
				} 
				if (searchType.equals(TPLAdministrationConstants.SHOW_RECOVWORKER_ID)) 
				{
					tplRecoverySearchCriteriaVO.setSearchType(TPLAdministrationConstants.SEARCH_BY_RECWORK_ID);
				}
				// Changed for heap dump
				tplRecoverySearchDataBean.setSelectedIndex(3);
			}
			tplRecoverySearchCriteriaVO.setStartIndex(0);
			tplRecoverySearchCriteriaVO.setSortColumn(null);
			tplRecoverySearchCriteriaVO.setAscending(false);
			tplRecoverySearchCriteriaVO.setRowsPerPage(10);
			if (validateRecoverySearch()) {
				try {
					TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
					EnterpriseSearchResultsVO enterpriseSearchResultsVO = tplRecoveryDelegate
							.searchRecoveryCase(tplRecoverySearchCriteriaVO);
					
					if (enterpriseSearchResultsVO != null) {
						long count = enterpriseSearchResultsVO.getRecordCount();
						
						if (enterpriseSearchResultsVO.getSearchResults().size() == 1) {
							List searchResultList = enterpriseSearchResultsVO.getSearchResults();
							TPLRecoverySearchResultVO tplRecoverySearchResultVO = (TPLRecoverySearchResultVO) searchResultList
									.get(0);
							  boolean lockFlag=false;
				                //This added for  CR779820
									LockDelegete lockDelegete;
									try {
									lockDelegete = new LockDelegete();
									lockFlag =lockDelegete.lockExist(TPLAdministrationConstants.TABLE_NAME_RECOVERY,tplRecoverySearchResultVO.getRecoveryCaseID().toString(),null);
									if(lockFlag){
										TPLAdministrationHelper.setErrorMessage(EnterpriseMessageConstants.ERR_GLB_DATA_CHANGED_TRY_AGAIN);
										return "";
									}
									} catch (EnterpriseBaseBusinessException e) {
										e.printStackTrace();
									}	
							
							ActionRequest request = (ActionRequest) FacesContext
									.getCurrentInstance().getExternalContext()
									.getRequest();
							//CR640833
							TPLAdministrationHelper administrationHelper = new TPLAdministrationHelper();
							administrationHelper.logEventInquiry(TPLAdministrationConstants.PORTLET_NAME_RECOVERY, tplRecoverySearchResultVO.getRecoveryCaseID(), GlobUserID);
							 request.setAttribute("sendVO1", tplRecoverySearchResultVO);
							 //resetSearch();							
                           
						}

						if (enterpriseSearchResultsVO.getSearchResults().size() > 1) {

							//if (count > 0) {
							/*tplRecoverySearchDataBean
									.setTplRecoverySearchResults(true);
							List searchResultList = enterpriseSearchResultsVO.getSearchResults();
							Iterator iterator = searchResultList.iterator();
							while (iterator.hasNext()) {
								TPLRecoverySearchResultVO tplRecoverySearchResultVO = (TPLRecoverySearchResultVO) iterator.next();
								
							//	TPLRecoveryConversionHelper conversionHelper = new TPLRecoveryConversionHelper();
								if (tplRecoverySearchResultVO.getCaseStatus()!=null)
								{
									String description = TPLRecoveryConversionHelper.getSourceCodeDescription(
											getTPLRecoverySearchDataBean().getCaseStatusList(),
											tplRecoverySearchResultVO.getCaseStatus());
									tplRecoverySearchResultVO.setCaseStatus(description);
								}
								if (tplRecoverySearchResultVO.getRecoveryType()!=null)
								{
									String description = TPLRecoveryConversionHelper.getSourceCodeDescription(
											getTPLRecoverySearchDataBean().getRecoveryTypeList(),
											tplRecoverySearchResultVO.getRecoveryType());
									tplRecoverySearchResultVO.setRecoveryType(description);
								}
								if (tplRecoverySearchResultVO.getCaseBilledAmount()==null)
								{
									//tplRecoverySearchResultVO.setCaseBilledAmountString("0.00");
									tplRecoverySearchResultVO.setCaseBilledAmount(new Double(0.00).doubleValue());
								}
								if (tplRecoverySearchResultVO.getCaseRecoveredAmount()==null)
								{
									//tplRecoverySearchResultVO.setCaseRecoveredAmountString("0.00");
									tplRecoverySearchResultVO.setCaseRecoveredAmount(new Double(0.00).doubleValue());
								}
							}
							
							tplRecoverySearchDataBean
									.setSearchResultList(enterpriseSearchResultsVO
											.getSearchResults()); */
							/*tplRecoverySearchDataBean
									.setCount((int) enterpriseSearchResultsVO
											.getRecordCount());*/
							// Search Change
							procesSearchResultForDisplay(tplRecoverySearchDataBean,enterpriseSearchResultsVO);
							setRenderingForSearchDisplay(tplRecoverySearchDataBean,enterpriseSearchResultsVO,false);
							
						} 
						
						if(enterpriseSearchResultsVO.getSearchResults().size() == 0){
							FacesContext facesContext = FacesContext.getCurrentInstance();
							tplRecoverySearchDataBean.setTplRecoverySearchResults(false);
							facesContext.addMessage(null,new FacesMessage(ResourceBundle.getBundle(
									TPLRecoveryCaseConstants.RECOVERYSEARCHPortletResource)
							.getString(TPLRecoveryCaseConstants.TPL_RECOVERY_NO_RECORDS)));
							
						}

					}else {
						FacesContext facesContext = FacesContext.getCurrentInstance();
						tplRecoverySearchDataBean.setTplRecoverySearchResults(false);
						facesContext.addMessage(null,new FacesMessage(ResourceBundle.getBundle(
						TPLRecoveryCaseConstants.RECOVERYSEARCHPortletResource)
						.getString(TPLRecoveryCaseConstants.TPL_RECOVERY_NO_RECORDS)));
				
			}
					
				} 
				
				catch (TPLRecoveryBusinessException be) {
					tplRecoverySearchDataBean.setTplRecoverySearchResults(false);
					FacesContext facesContext = FacesContext.getCurrentInstance();
					locale = facesContext.getViewRoot().getLocale();

					FacesMessage facesMessage = new FacesMessage(
							ResourceBundle.getBundle(TPLRecoveryCaseConstants.RECOVERYSEARCHPortletResource,locale)
									.getString(TPLRecoveryCaseConstants.TPL_RECOVERY_NO_RECORDS));
					facesContext.getApplication().setMessageBundle(TPLRecoveryCaseConstants.RECOVERYSEARCHPortletResource);
					facesContext.addMessage(null, facesMessage);
					
				/*}
				catch (Exception exception)
				{
					
					addMessages("There was an error processing the request. Please retry the transaction.");
				}*/

				int noOfPages = tplRecoverySearchDataBean.getCount()
						/ tplRecoverySearchCriteriaVO.getRowsPerPage();
				int modNofPages = tplRecoverySearchDataBean.getCount()
						% tplRecoverySearchCriteriaVO.getRowsPerPage();

				if (modNofPages != 0) {
					noOfPages = noOfPages + 1;
				}

				tplRecoverySearchDataBean.setCurrentPage(1);
				tplRecoverySearchDataBean.setNumberOfPages(noOfPages);
				tplRecoverySearchDataBean.setStartRecord(1);

				if (tplRecoverySearchDataBean.getCount() < 10) {
					tplRecoverySearchDataBean
							.setEndRecord(tplRecoverySearchDataBean.getCount());
				} else {
					tplRecoverySearchDataBean.setEndRecord(10);
				}

				tplRecoverySearchDataBean.setTplRecoverySearchResults(true);

				if (tplRecoverySearchDataBean.getCount() <= 10) {
					tplRecoverySearchDataBean.setShowNext(false);
				} else {
					tplRecoverySearchDataBean.setShowNext(true);
				}

				tplRecoverySearchDataBean.setShowPrevious(false);
				
				tplRecoverySearchDataBean.setImageRender(null);
			}
		} /*finally {
			exitTime = System.currentTimeMillis();
		}*/

		/*logger.debug("total Time Taken to execute search method is "
				+ (entryTime - exitTime));*/
		//Infinite defect Implementation :ESPRD00480706
		refreshView();

		return SUCCESS;
	}

	/**
	 * This method is used for validateRecoverySearch
	 * 
	 * @return boolean
	 */
	public boolean validateRecoverySearch() 
	{
		boolean recoverySearchFlag = true;
		try
		{
			if(logger.isDebugEnabled()){
				logger.debug("Inside validateRecoverySearch method");
			  }
			
			TPLRecoverySearchCriteriaVO tplRecoverySearchCriteriaVO = getTPLRecoverySearchDataBean()
					.getTplRecoverySearchCriteriaVO();
			if (!TPLRecoveryValidateHelper.validateMandatoryFields()) 
			{
				recoverySearchFlag = false;
			}
			
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		return recoverySearchFlag;
	}
	

	/**
	 * @param value
	 */
	public void valueChangeEventMember(ValueChangeEvent value) {
		boolean is_skip = false;
		String selectedValue = (String) value.getNewValue();
		FacesContext.getCurrentInstance().renderResponse();
		TPLRecoverySearchDataBean tplRecBn =  getTPLRecoverySearchDataBean();
		if (selectedValue.equals("MI")) {
			tplRecBn.getTplRecoverySearchCriteriaVO().setMemberID("");
			tplRecBn.getTplRecoverySearchCriteriaVO().setMemberIDType("");
			tplRecBn.setRenderMemberID(true);
			tplRecBn.setRenderMemberName(false);
			tplRecBn.setRenderMemberSSN(false);
		}
		if (selectedValue.equals("N")) {
			tplRecBn.getTplRecoverySearchCriteriaVO().setMemberFirstName("");
			tplRecBn.getTplRecoverySearchCriteriaVO().setMemberLastName("");
			tplRecBn.setRenderMemberID(false);
			tplRecBn.setRenderMemberName(true);
			tplRecBn.setRenderMemberSSN(false);
		}
		if (selectedValue.equals("S")) {
			tplRecBn.setRenderMemberID(false);
			tplRecBn.setRenderMemberName(false);
			tplRecBn.setRenderMemberSSN(true);
		}
		if (selectedValue.equals("")) {
			tplRecBn.setRenderMemberID(false);
			tplRecBn.setRenderMemberName(false);
			tplRecBn.setRenderMemberSSN(false);
		}
		//tplRecBn.setSystemListFlag(false);
	}

	/**
	 * This method is used to add Billing information page to display.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void addBillingInfo() {
		try {

			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			TPLRecoveryCaseBillingInformationVO recoveryCaseBillingInformationVO = new TPLRecoveryCaseBillingInformationVO();
			tplRecoveryDataBean.getRecoveryCaseDetailVO().setRecoveryBillingVO(
					recoveryCaseBillingInformationVO);
			tplRecoveryDataBean.setRenderAddBillingInfo(true);
			tplRecoveryDataBean.setRenderAddBillingSave(true);
			tplRecoveryDataBean.setRenderEditBillingInfo(false);
			tplRecoveryDataBean.setRenderAddBillingInfoHeader(true);
			tplRecoveryDataBean.setBillingInfoFlag(false);
			tplRecoveryDataBean.setShowSuccessBillingInfo(false);
			tplRecoveryDataBean.setDisableBillingStartDt(false);
			tplRecoveryDataBean.setFocusThisId("addbillngfocus");
			tplRecoveryDataBean.setDeleteBillingInfoFlag(false);
			tplRecoveryDataBean.setRenderBillingEntityName(false);
			tplRecoveryDataBean.setDisableAfterLetterGen(false);
			
		} catch (Exception e) {
			e.printStackTrace();
  		}
	}

	

	/**
	 * @param value
	 *///global action comment
	/*public void getSelectedBillingAddress(ValueChangeEvent value) {
		FacesContext.getCurrentInstance().renderResponse();
		//Find Bug Fix
		String selectedAddress = "";
		selectedAddress = (String) value.getNewValue();
	}*/

	/**
	 * CR-2537 This method is used to validate Entity for the payer payee.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	
	
	public String validateEntity() {

		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("addbillngfocus");
		String SUCCESS = "success";

		try {
			TPLRecoveryCaseBillingInformationVO recoveryCaseBillingInformationVO = recoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingVO();
			String entityType = recoveryCaseBillingInformationVO.getEntityTpye();
			String entityID = recoveryCaseBillingInformationVO.getEnityID();
			String entityIDType = recoveryCaseBillingInformationVO.getEntityIDType();
			boolean result = true;
			if (StringUtils.isEmpty(entityID)){
//				TPLAdministrationHelper.setAddRecoveryInfoMessage();
				
				FacesContext context = FacesContext.getCurrentInstance();
		    	UIComponent fieldName = (UIComponent) findComponentInRoot("entityID");
		    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_ENTITYID_REQUIRED, fieldName, context);
				
				result = false;
				SUCCESS =FAILED;
				
			}
			if (StringUtils.isEmpty(entityType)){
				//TPLAdministrationHelper.setAddRecoveryInfoMessage();
				TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_ENTITYIDTYPE_VALID, "entityType");
				result = false;
				SUCCESS =FAILED;
			}

			if (StringUtils.isEmpty(entityIDType)){						
						TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_ENTITYIDTYPEVALUE_VALID, "entityIDType");
						result = false;
						SUCCESS =FAILED;
					}
			if(result){
				TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
				TPLRecoveryCaseBillingInformationVO recoveryCaseBillingInformationVO1 = tplRecoveryDelegate
						.validateEntityID(entityType, entityID, entityIDType);
				
				if (null != recoveryCaseBillingInformationVO1)
				{
					if (null != recoveryCaseBillingInformationVO1.getEnityID())
					{
						
						recoveryCaseBillingInformationVO1.setBillingFrequencyCode(recoveryDataBean
								.getRecoveryCaseDetailVO()
								.getRecoveryBillingVO().getBillingFrequencyCode());
						recoveryCaseBillingInformationVO1.setBillStartDate(recoveryDataBean
								.getRecoveryCaseDetailVO()
								.getRecoveryBillingVO().getBillStartDate());
						recoveryCaseBillingInformationVO1.setLetterType(recoveryDataBean
								.getRecoveryCaseDetailVO()
								.getRecoveryBillingVO().getLetterType());
						
						
						
						if(recoveryCaseBillingInformationVO1.getEntityName()==null && recoveryCaseBillingInformationVO1.getPayeepayerID()==null)
						{
							SUCCESS =FAILED;
					        FacesContext context = FacesContext.getCurrentInstance();
					    	UIComponent fieldName = (UIComponent) findComponentInRoot("entityID");
					    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_ADD_ENTITY, fieldName, context);
							recoveryDataBean.setRenderBillingentity(true);
							recoveryDataBean.setRenderBillingEntityName(false);
						}
						recoveryDataBean.getRecoveryCaseDetailVO().
							setRecoveryBillingVO(recoveryCaseBillingInformationVO1);
						recoveryDataBean.setEntityIDAlreadyValidated(true);
						if(recoveryCaseBillingInformationVO1.getEntityName()!=null && recoveryCaseBillingInformationVO1.getPayeepayerID()!=null)
						{
						   recoveryDataBean.setRenderBillingEntityName(true);
						   recoveryDataBean.setRenderBillingentity(false);
						}
					
					}
					else
					{
						
						SUCCESS =FAILED;
						FacesContext context = FacesContext.getCurrentInstance();
				    	UIComponent fieldName = (UIComponent) findComponentInRoot("entityID");
				    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_INTERESTEDPARTY_INVALID, fieldName, context);
						recoveryDataBean.setRenderBillingentity(false);
					}
				}
			}
			
		}
		catch (Exception e) {
			e.printStackTrace();
			FacesMessage message = new FacesMessage();
			message.setDetail(e.getMessage());
			FacesContext.getCurrentInstance().addMessage("abc", message);
		}
		
		return SUCCESS;

	}
	
	
	public String validateEntitySave() 
	{

		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("addbillngfocus");
		String SUCCESS = "success";

		try 
		{
			TPLRecoveryCaseBillingInformationVO recoveryCaseBillingInformationVO = recoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingVO();
			String entityType = recoveryCaseBillingInformationVO.getEntityTpye();
			String entityID = recoveryCaseBillingInformationVO.getEnityID();
			String entityIDType = recoveryCaseBillingInformationVO.getEntityIDType();
			boolean result = true;
			if (StringUtils.isEmpty(entityID))
			{
				FacesContext context = FacesContext.getCurrentInstance();
		    	UIComponent fieldName = (UIComponent) findComponentInRoot("entityID");
		    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_ENTITYID_REQUIRED, fieldName, context);
				result = false;
				SUCCESS =FAILED;
			}
			if (StringUtils.isEmpty(entityType)){
				//TPLAdministrationHelper.setAddRecoveryInfoMessage();
				TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_ENTITYIDTYPE_VALID, "entityType");
				result = false;
				SUCCESS =FAILED;
			}
			// added for defect ESPRD00809878
			//added the not empty conditon for entityType and entityIDType
			if (StringUtils.isNotEmpty(entityID) && StringUtils.isNotEmpty(entityType) && StringUtils.isEmpty(entityIDType)){				
				TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_ENTITYIDTYPEVALUE_VALID, "entityIDType");
			result = false;
			
			SUCCESS =FAILED;
					
			}
			if(result)
			{
				TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
				TPLRecoveryCaseBillingInformationVO recoveryCaseBillingInformationVO1 = tplRecoveryDelegate
						.validateEntityID(entityType, entityID, entityIDType);				
				if (null != recoveryCaseBillingInformationVO1.getEnityID())
				{
					TPLRecoveryCaseBillingInformationVO recoveryBillingVO = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryBillingVO();
					recoveryCaseBillingInformationVO1.setBillingFrequencyCode(recoveryBillingVO.getBillingFrequencyCode());
					recoveryCaseBillingInformationVO1.setBillStartDate(recoveryBillingVO.getBillStartDate());
					recoveryCaseBillingInformationVO1.setLetterType(recoveryBillingVO.getLetterType());
					if(recoveryCaseBillingInformationVO1.getEntityName()==null && recoveryCaseBillingInformationVO1.getPayeepayerID()==null)
					{
						SUCCESS =FAILED;
				        FacesContext context = FacesContext.getCurrentInstance();
				    	UIComponent fieldName = (UIComponent) findComponentInRoot("entityID");
				    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_ADD_ENTITY, fieldName, context);
						recoveryDataBean.setRenderBillingentity(true);
						recoveryDataBean.setRenderBillingEntityName(false);
					}
					recoveryDataBean.getRecoveryCaseDetailVO().
						setRecoveryBillingVO(recoveryCaseBillingInformationVO1);
					recoveryDataBean.setEntityIDAlreadyValidated(true);
					if(recoveryCaseBillingInformationVO1.getEntityName()!=null && recoveryCaseBillingInformationVO1.getPayeepayerID()!=null)
					{
					   recoveryDataBean.setRenderBillingEntityName(true);
					   recoveryDataBean.setRenderBillingentity(false);
					}
				}
				else
				{
					SUCCESS =FAILED;
					FacesContext context = FacesContext.getCurrentInstance();
			    	UIComponent fieldName = (UIComponent) findComponentInRoot("entityID");
			    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_ENTITYID_VALID, fieldName, context);
					recoveryDataBean.setRenderBillingentity(false);
				}
			}
			
		}
		catch (Exception e) {
			e.printStackTrace();
			FacesMessage message = new FacesMessage();
			message.setDetail(e.getMessage());
			FacesContext.getCurrentInstance().addMessage("abc", message);
		}
		
		return SUCCESS;

	}

	/**
	 * This method id used to Validate workerID
	 * 
	 * @param Parameter
	 * @param workerID
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String validateWorkerID() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		try {
			if(logger.isDebugEnabled()){
				logger.info("am inside validateWorkerID<><><>>>><><");
			  }
			recoveryDataBean.setFocusThisId("workeridfocus");
			if (recoveryDataBean.getRecoveryCaseDetailVO() != null) {
				TPLHIPPWokerVO recoveryWorkerVO = recoveryDataBean
						.getRecoveryCaseDetailVO().getTplRecoveryWorkerVO();
				if (recoveryWorkerVO != null) {
					String workerID = recoveryWorkerVO.getWorkerID();
					if (StringUtils.isNotEmpty(workerID)) {
						/*result = false;
					}
				}

			}*/
			/*if (!validateWorker()) {
				TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
				String workerID = recoveryDataBean.getRecoveryCaseDetailVO()
						.getTplRecoveryWorkerVO().getWorkerID();
				recoveryDataBean.setFocusThisId("workeridfocus");*/
				
				//	if (StringUtils.isNotEmpty(workerID)) {
						TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
						
						TPLHIPPWokerVO tPLHIPPWokerVO = tplRecoveryDelegate.validateWorkerId(workerID.toUpperCase());
						if(tPLHIPPWokerVO != null)
						{					
							recoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryWorkerVO().setWorkerID(tPLHIPPWokerVO.getWorkerID());
							recoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryWorkerVO().setWorkerName(tPLHIPPWokerVO.getWorkerName());
							recoveryDataBean.setShowWorkerDetails(true);
						}else{
							//Commented for defect ESPRD00659413
							/*
							//Deffect Fix:ESPRD00088727
							TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.WORKER_ID_INVALID);
							*/						
							
							//Added for defect ESPRD00659413
							TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.WORKER_ID_INVALID,"workerID");
							recoveryDataBean.setShowWorkerDetails(false);
						}
					//}
				} else {
					TPLAdministrationHelper.setAddHIPPInfoMessage();
				}
		}
			}
		} 
		catch(TPLRecoveryBusinessException be){
			TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.WORKER_ID_INVALID,"workerID");
			recoveryDataBean.setShowWorkerDetails(false);	
		}		
		catch (Exception e) {
			e.printStackTrace();
			FacesMessage message = new FacesMessage();
			message.setDetail(e.getMessage());
			FacesContext.getCurrentInstance().addMessage("abc", message);
		}

		return "success";
	}

	/**
	 * @return
	 */
	boolean validateWorker() {
		boolean result = true;
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("workeridfocus");
		if (recoveryDataBean.getRecoveryCaseDetailVO() != null) {
			TPLHIPPWokerVO recoveryWorkerVO = recoveryDataBean
					.getRecoveryCaseDetailVO().getTplRecoveryWorkerVO();
			if (recoveryWorkerVO != null) {
				String workerID = recoveryWorkerVO.getWorkerID();
				if (StringUtils.isNotEmpty(workerID)) {
					result = false;
				}
			}

		}
		return result;
	}

	/**
	 * This method is used to Update Billing Information for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateBillingInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("addbillngfocus");
			if(!validateBilling()){
				int currentRecord = tplRecoveryDataBean.getCurrentRecord();
				tplRecoveryDataBean.setBillingInfoFlag(true);
				List billingAddressList = tplRecoveryDataBean.getTplRecoveryAddBillingInfoList();
			 if (billingAddressList.size() > 0) {

				TPLRecoveryCaseBillingInformationVO caseBillingInformationVO = (TPLRecoveryCaseBillingInformationVO )billingAddressList.get(currentRecord);
				TPLRecoveryCaseBillingInformationVO recoveryCaseBillingInformationVO = new TPLRecoveryCaseBillingInformationVO();
				TPLRecoveryCaseBillingInformationVO recoveryBillingVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryBillingVO();
				recoveryCaseBillingInformationVO.setVersionNo(caseBillingInformationVO.getVersionNo());
				recoveryCaseBillingInformationVO.setEntityTpye(recoveryBillingVO.getEntityTpye());
				recoveryCaseBillingInformationVO.setEntityIDType(recoveryBillingVO.getEntityIDType());
				
				description=TPLRecoveryConversionHelper.getSourceCodeDescription(
					tplRecoveryDataBean.getBillingFrequencyList(),recoveryBillingVO.getBillingFrequencyCode());
								
				recoveryCaseBillingInformationVO.setBillingFrequencyCodeDesc(description);
				recoveryCaseBillingInformationVO.setBillingFrequencyCode(recoveryBillingVO.getBillingFrequencyCode());
				recoveryCaseBillingInformationVO.setBillStartDate(recoveryBillingVO.getBillStartDate());
				recoveryCaseBillingInformationVO.setPayeepayerID(recoveryBillingVO.getPayeepayerID());
				recoveryCaseBillingInformationVO.setEntityName(recoveryBillingVO.getEntityName());
				recoveryCaseBillingInformationVO.setLetterType(recoveryBillingVO.getLetterType());
				recoveryCaseBillingInformationVO.setEnityID(recoveryBillingVO.getEnityID());

				billingAddressList.remove(currentRecord);
				billingAddressList.add(currentRecord,recoveryCaseBillingInformationVO);
				tplRecoveryDataBean.setTplRecoveryAddBillingInfoList(billingAddressList);
				//tplRecoveryDataBean.setRenderResultBillingInfo(true);
				tplRecoveryDataBean.setShowSuccessBillingInfo(true);
				tplRecoveryDataBean.setRenderAddInfoBillingInfo(false);
				tplRecoveryDataBean.setRenderAddBillingSave(false);
				tplRecoveryDataBean.setRenderEditBillingSave(false);
				tplRecoveryDataBean.setRenderAddBillingInfo(true);
				tplRecoveryDataBean.setRenderAddBillingInfoHeader(false);
				tplRecoveryDataBean.setRenderEditBillingInfo(true);
				tplRecoveryDataBean.setRenderResultBillingInfo(false);
				tplRecoveryDataBean.setBillingInfoFlag(true);
			  }
		   }
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * 
	 */
	public void showRecoverySearchCase() {
		TPLRecoverySearchDataBean tplRecoverySearchDataBean = new TPLRecoverySearchDataBean();
		tplRecoverySearchDataBean.setRenderedSearch(true);
		FacesContext.getCurrentInstance().getExternalContext().getSessionMap()
				.put("TPLRecoverySearchDataBean", tplRecoverySearchDataBean);
	}

	/**
	 * This method is used to save Billing Information for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveBillingInfo() 
	{
	    String SUCCESS = "success";
	    try 
	    {
		if (!validateBilling()) 
		{
		    TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		    tplRecoveryDataBean.setFocusThisId("addbillngfocus");
		    //TPLRecoveryConversionHelper tplRecoveryConversionHelper = new TPLRecoveryConversionHelper();
		    tplRecoveryDataBean.setBillingInfoFlag(true);
		    List list = tplRecoveryDataBean.getTplRecoveryAddBillingInfoList();
		    if (list == null) {
			list = new ArrayList();
		    }
		    TPLRecoveryCaseBillingInformationVO billingInfoVO = new TPLRecoveryCaseBillingInformationVO();
		    TPLRecoveryCaseBillingInformationVO recoveryBillingVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryBillingVO();
		    String description=TPLRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getEntityTypeList(),recoveryBillingVO.getEntityTpye());					
		    billingInfoVO.setEntityTpye(recoveryBillingVO.getEntityTpye());
		    tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryBillingVO().setEntityTypeDesc(description);
		    billingInfoVO.setEntityIDType(recoveryBillingVO.getEntityIDType());
		    description=TPLRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getBillingFrequencyList(),recoveryBillingVO.getBillingFrequencyCode());
		    billingInfoVO.setBillingFrequencyCode(recoveryBillingVO.getBillingFrequencyCode());
		    billingInfoVO.setBillingFrequencyCodeDesc(description);
		    billingInfoVO.setBillStartDate(recoveryBillingVO.getBillStartDate());
		    billingInfoVO.setPayeepayerID(recoveryBillingVO.getPayeepayerID());
		    billingInfoVO.setEntityName(recoveryBillingVO.getEntityName());
		    billingInfoVO.setLetterType(recoveryBillingVO.getLetterType());
		    billingInfoVO.setEnityID(recoveryBillingVO.getEnityID());
		    billingInfoVO.setVersionNo(0);
		    billingInfoVO.setTplRecoveryBillingAddressList(tplRecoveryDataBean.getTplRecoveryBillingAddressList());
		    //ESPRD00892886 -start
		    if(recoveryBillingVO.getPayeeSK() == null)
		    {
			billingInfoVO.setPayeeSK(null);
		    }else
		    {
		    	billingInfoVO.setPayeeSK(recoveryBillingVO.getPayeeSK());
		    }
		    //ESPRD00892886 - End
		    list.add(billingInfoVO);
		    tplRecoveryDataBean.setTempRecoveryCaseBillingInformationVO(billingInfoVO);
		    tplRecoveryDataBean.setTplRecoveryAddBillingInfoList(list);
		    //kishore  defect id ESPRD00578420	
		    if(recoveryBillingVO.getEntityTpye().equalsIgnoreCase("SE")){
		    	tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryBillingVO().setEntityIDType("O-Other");
		    }else{
		    	String entityIDdesc=TPLRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getEntityIdTypeList(),recoveryBillingVO.getEntityIDType());
		    	tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryBillingVO().setEntityIDType(entityIDdesc);
		    	
		    }
		    //Small Save Flag
		    tplRecoveryDataBean.setRecoveryaddBillingFlag(true);
		    tplRecoveryDataBean.setShowSuccessBillingInfo(true);
		    tplRecoveryDataBean.setRenderEditBillingInfo(true);
		    tplRecoveryDataBean.setRenderBillingEntityName(true);
		    tplRecoveryDataBean.setRenderAddInfoBillingInfo(false);
		    tplRecoveryDataBean.setRenderAddBillingSave(false);
		    tplRecoveryDataBean.setRenderAddBillingInfo(true);
		    tplRecoveryDataBean.setRenderAddBillingInfoHeader(false);
		    //tplRecoveryDataBean.setRenderEditBillingInfo(true);
		    tplRecoveryDataBean.setRenderResultBillingInfo(false);
		    tplRecoveryDataBean.setBillingInfoFlag(true);
		}
		// Added for the defect ESPRD00423251
		/*else
				{
					FacesContext context = FacesContext.getCurrentInstance();
			    	UIComponent fieldName = (UIComponent) TPLAdministrationHelper.findComponentInRoot("billingSave");
			    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_BILLING_SAVE, fieldName, context);
			    }*/
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		return SUCCESS;
	}

     //Fix over for the defect #ESPRD00423261
	/**
	 * @return
	 */
	public boolean validateBilling() 
	{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("addbillngfocus");
		boolean result = false;
		tplRecoveryDataBean.setEntityIDAlreadyValidated(false);
		tplRecoveryDataBean.setShowSuccessBillingInfo(false);
		TPLRecoveryCaseBillingInformationVO billingInfoVO = tplRecoveryDataBean
													.getRecoveryCaseDetailVO().getRecoveryBillingVO();
		//ESPRD00649489	
		if (StringUtils.isNotEmpty(billingInfoVO.getBillStartDate())) 
		{			
			if(StringUtils.isNotBlank(billingInfoVO.getBillStartDate()))
			{
				if(!EnterpriseCommonValidator.validateDate(billingInfoVO.getBillStartDate()))
				{
					TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
							TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"billingStartDate1");					
					result = true; 
				}
				Date bgdate = TPLRecoveryCommonValidator.dateConverter(billingInfoVO.getBillStartDate());
				try 
				{
					String bdate = TPLAdministrationHelper.dateConverter(bgdate);	
					billingInfoVO.setBillStartDate(bdate);					
				} 
				catch (Exception e) 
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0023(billingInfoVO.getBillStartDate())) 
			{
				result = true;
		    }	
		}
		if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0031(billingInfoVO.getBillingFrequencyCode(), 
				billingInfoVO.getBillStartDate())) 
		{
			result = true;			
		}
		if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0033(billingInfoVO.getEntityTpye(), 
				billingInfoVO.getEnityID(), billingInfoVO.getBillingFrequencyCode(), 
				billingInfoVO.getBillStartDate())) 
		{
			//tplRecoveryDataBean.setEntityIDAlreadyValidated(true);
			result = true;			
		}
		if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0034(billingInfoVO.getLetterType(), 
				billingInfoVO.getBillStartDate())) 
		{
			result = true;			
		}
		//Defect Fix:ESPRD00091988
		if(tplRecoveryDataBean.isRenderEditBillingInfo())
		{
			if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0014(billingInfoVO.getBillingFrequencyCode(),billingInfoVO.getBillStartDate(),tplRecoveryDataBean.getOriginalBillStartDt()))
			{
				result = true;
			}
		}
		if (tplRecoveryDataBean.isRenderAddBillingSave())
		{
			String status=validateEntitySave();
			if(status.equals("failure"))
			{
				result = true;
			}
		}
		return result;
	}

	/**
	 * This method is used to edit Billing information.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editBillingInfo() {

		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("addbillngfocus");
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			tplRecoveryDataBean.setSelectedBillingInfoIndex(rowValue);
			//	Audit
			if(tplRecoveryDataBean.getTplRecoveryAddBillingInfoList()!=null){
	        	UIComponent component=findComponentInRoot("BillingInfoAuditId");
	        	if(component!=null){
	        		AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component ;
	        		auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false);
	        	}
	        }
			TPLRecoveryCaseBillingInformationVO tempTPLRecoveryCaseBillingInformationVO=null;
			Integer rowValueInt = new Integer(rowValue);
			TPLRecoveryCaseBillingInformationVO tplRecoveryCaseBillingInformationVO = 
					(TPLRecoveryCaseBillingInformationVO) tplRecoveryDataBean
							.getTplRecoveryAddBillingInfoList().get(rowValueInt.intValue());
						
			if(tplRecoveryCaseBillingInformationVO!=null){
				tempTPLRecoveryCaseBillingInformationVO=new TPLRecoveryCaseBillingInformationVO();
				tempTPLRecoveryCaseBillingInformationVO.setAddedAuditTimeStamp(tplRecoveryCaseBillingInformationVO.getAddedAuditTimeStamp());
				tempTPLRecoveryCaseBillingInformationVO.setAddedAuditUserID(tplRecoveryCaseBillingInformationVO.getAddedAuditUserID());
				tempTPLRecoveryCaseBillingInformationVO.setAuditTimeStamp(tplRecoveryCaseBillingInformationVO.getAuditTimeStamp());
				tempTPLRecoveryCaseBillingInformationVO.setAuditUserID(tplRecoveryCaseBillingInformationVO.getAuditUserID());
				tempTPLRecoveryCaseBillingInformationVO.setBillAmount(tplRecoveryCaseBillingInformationVO.getBillAmount());
				tempTPLRecoveryCaseBillingInformationVO.setBillDate(tplRecoveryCaseBillingInformationVO.getBillDate());
				tempTPLRecoveryCaseBillingInformationVO.setBillingFrequencyCode(tplRecoveryCaseBillingInformationVO.getBillingFrequencyCode());
				tempTPLRecoveryCaseBillingInformationVO.setBillStartDate(tplRecoveryCaseBillingInformationVO.getBillStartDate());
				tempTPLRecoveryCaseBillingInformationVO.setEnityID(tplRecoveryCaseBillingInformationVO.getEnityID());
				tempTPLRecoveryCaseBillingInformationVO.setEntityIDType(tplRecoveryCaseBillingInformationVO.getEntityIDType());
				tempTPLRecoveryCaseBillingInformationVO.setEntityName(tplRecoveryCaseBillingInformationVO.getEntityName());
				tempTPLRecoveryCaseBillingInformationVO.setEntityTpye(tplRecoveryCaseBillingInformationVO.getEntityTpye());
				tempTPLRecoveryCaseBillingInformationVO.setFcn(tplRecoveryCaseBillingInformationVO.getFcn());
				tempTPLRecoveryCaseBillingInformationVO.setLetterType(tplRecoveryCaseBillingInformationVO.getLetterType());
				tempTPLRecoveryCaseBillingInformationVO.setPayeepayerID(tplRecoveryCaseBillingInformationVO.getPayeepayerID());
				tempTPLRecoveryCaseBillingInformationVO.setRecoveryAmount(tplRecoveryCaseBillingInformationVO.getRecoveryAmount());
				tempTPLRecoveryCaseBillingInformationVO.setRecoveryDate(tplRecoveryCaseBillingInformationVO.getRecoveryDate());
				tempTPLRecoveryCaseBillingInformationVO.setTplRecoveryBillingAddressList(tplRecoveryCaseBillingInformationVO.getTplRecoveryBillingAddressList());
				tempTPLRecoveryCaseBillingInformationVO.setTplrecoverycasebillingaddressvo(tplRecoveryCaseBillingInformationVO.getTplrecoverycasebillingaddressvo());
				tempTPLRecoveryCaseBillingInformationVO.setVersionNo(tplRecoveryCaseBillingInformationVO.getVersionNo());
				tempTPLRecoveryCaseBillingInformationVO.setAuditKeyList(tplRecoveryCaseBillingInformationVO.getAuditKeyList());
				//ESPRD00892886 -start
				tempTPLRecoveryCaseBillingInformationVO.setPayeeSK(tplRecoveryCaseBillingInformationVO.getPayeeSK());
				//ESPRD00892886 -END
				tplRecoveryDataBean.setTempRecoveryCaseBillingInformationVO(tempTPLRecoveryCaseBillingInformationVO);
				// amar add
				if(tplRecoveryCaseBillingInformationVO.getEntityTpye().equalsIgnoreCase("M")){
					tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getMemberIDTypeList());
				}
				else if(tplRecoveryCaseBillingInformationVO.getEntityTpye().equalsIgnoreCase("P"))
				{
					tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getProviderIDList());
				}
				else if(tplRecoveryCaseBillingInformationVO.getEntityTpye().equalsIgnoreCase("TC"))
				{
					tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getCarrierIDTypeList());
				}
				else if(tplRecoveryCaseBillingInformationVO.getEntityTpye().equalsIgnoreCase("TP"))
				{
					tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getPolicyholderTypeList());
				}
				else if(tplRecoveryCaseBillingInformationVO.getEntityTpye().equalsIgnoreCase("TE"))
				{
					tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getEmployerIDTypeList());
				}
				//amar end
				TPLRecoveryCaseBillingInformationVO recoveryBillingVO =tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryBillingVO();
				recoveryBillingVO.setEntityName(tplRecoveryCaseBillingInformationVO.getEntityName());
				recoveryBillingVO.setPayeepayerID(tplRecoveryCaseBillingInformationVO.getPayeepayerID());
				recoveryBillingVO.setBillingFrequencyCode(tplRecoveryCaseBillingInformationVO.getBillingFrequencyCode());
				recoveryBillingVO.setBillStartDate(tplRecoveryCaseBillingInformationVO.getBillStartDate());
				description=TPLRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getEntityTypeList(),
						tplRecoveryCaseBillingInformationVO.getEntityTpye());
				recoveryBillingVO.setEntityTpye(tplRecoveryCaseBillingInformationVO.getEntityTpye());
				recoveryBillingVO.setEntityTypeDesc(description);
				recoveryBillingVO.setLetterType(tplRecoveryCaseBillingInformationVO.getLetterType());
				if(tplRecoveryCaseBillingInformationVO.getEntityTpye().equalsIgnoreCase("SE")){
					recoveryBillingVO.setEntityIDType("O-Other");
				}else{
					description=TPLRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getEntityIdTypeList(),
							tplRecoveryCaseBillingInformationVO.getEntityIDType());		
					recoveryBillingVO.setEntityIDType(description);
				}
				recoveryBillingVO.setEnityID(tplRecoveryCaseBillingInformationVO.getEnityID());
				//ESPRD00892886 start 
				recoveryBillingVO.setPayeeSK(tplRecoveryCaseBillingInformationVO.getPayeeSK());
				//ESPRD00892886 End
				List editableBillingInfo = new ArrayList();
				editableBillingInfo.add(createAuditableFeild("Entity Type Code","payerCommonEntityTypeCode"));
				editableBillingInfo.add(createAuditableFeild("Entity Type","payerExternalID"));
				editableBillingInfo.add(createAuditableFeild("Entity ID Type","payerExternalIDTypeCode"));
				editableBillingInfo.add(createAuditableFeild("Billing Frequency","billingFrequencyCode"));
			 	editableBillingInfo.add(createAuditableFeild("Letter Type","billingLetterTypeCode", true));
			 	editableBillingInfo.add(createAuditableFeild("Billing Start Date","billingStartDate", true));
			 	if(tplRecoveryCaseBillingInformationVO.getAuditKeyList()!=null && !(tplRecoveryCaseBillingInformationVO.getAuditKeyList().isEmpty())){
					AuditDataFilter.filterAuditKeys(editableBillingInfo,tplRecoveryCaseBillingInformationVO);
					UIComponent component = TPLAdministrationHelper.findComponentInRoot("BillingInfoAuditId");
					if(component!=null){
						AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
						auditHistoryTable.setValue(tplRecoveryCaseBillingInformationVO.getAuditKeyList());			
						auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
					}
				}else{
					if(logger.isDebugEnabled()){
						logger.debug("======billingInformationVO====Before Filter Empty===");
					}
				}
				recoveryBillingVO.setAuditKeyList(tplRecoveryCaseBillingInformationVO.getAuditKeyList());
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setRecoveryBillingVO(recoveryBillingVO);
				if(!("O".equalsIgnoreCase(recoveryBillingVO.getBillingFrequencyCode())))
				{
					tplRecoveryDataBean.setDisableBillingStartDt(true);
				} else {
					tplRecoveryDataBean.setDisableBillingStartDt(false);
				}
			}
			tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());
			tplRecoveryDataBean.setRenderAddInfoBillingInfo(false);
			tplRecoveryDataBean.setRenderAddBillingSave(false);
			tplRecoveryDataBean.setRenderAddBillingInfo(true);
			tplRecoveryDataBean.setRenderAddBillingInfoHeader(false);
			tplRecoveryDataBean.setRenderEditBillingInfo(true);
			tplRecoveryDataBean.setRenderEditBillingSave(true);
			tplRecoveryDataBean.setRenderResultBillingInfo(false);
			tplRecoveryDataBean.setRenderBillingEntityName(true);
			tplRecoveryDataBean.setBillingInfoFlag(false);
			tplRecoveryDataBean.setShowSuccessBillingInfo(false);
			tplRecoveryDataBean.setDeleteBillingInfoFlag(false);
		} catch (Exception e) {
        	e.printStackTrace();
		}
		return "success";
	}
	
	
	
	
	/**
	 * This method is used to  call the small saves in Big Save
	 * @return
	 */
	public boolean doLittleSaves()
	{
		if(logger.isDebugEnabled()){
			logger.debug("Inside doLittleSaves()");
		}
		boolean littleSaveValid=true;
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		if(tplRecoveryDataBean.isRenderAddBillingInfo() && tplRecoveryDataBean.isRenderAddBillingSave()){
			saveBillingInfo();
			if(!tplRecoveryDataBean.isBillingInfoFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderEditBillingInfo() && !tplRecoveryDataBean.isRecoveryaddBillingFlag()){
			updateBillingInfo();
			if(!tplRecoveryDataBean.isBillingInfoFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderAddClaimFilter() && tplRecoveryDataBean.isRenderAddClaimFilterSave()){
			saveClaimFilter();	
			if(!tplRecoveryDataBean.isClaimFilterFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderEditClaimFilterSave() && tplRecoveryDataBean.isRenderEditClaimFilter()
				&& tplRecoveryDataBean.isEditFilterSaved()){
			updateClaimFilter();
			if(!tplRecoveryDataBean.isClaimFilterFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderIncludeClaim() && !tplRecoveryDataBean.isShowSuccess()){
			updateIncludedClaims();
			if(!tplRecoveryDataBean.isIncludedClaimsFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isSaveResponseDetails()){
			saveResponseDetails();
			if(!tplRecoveryDataBean.isResponseDetailsFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderAddInterestedPartyInfo() && tplRecoveryDataBean.isRenderAddInterestedPartySave()){
			saveInterestedPartyInfo();
			if(!tplRecoveryDataBean.isInterestedPartyFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderEditInterestedPartySave()){
			updateInterestedPartyInfo();
			if(!tplRecoveryDataBean.isInterestedPartyFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderEditInterestedPartyAddress()){
			updateBillingAddress();
		}
		if(tplRecoveryDataBean.isRenderAddSettlementInfo() && tplRecoveryDataBean.isRenderAddSettlementSave()){
			saveSettlementInfo();
			if(!tplRecoveryDataBean.isSettlementInfoFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderEditSettlementSave() && tplRecoveryDataBean.isRenderAddSettlementInfo() ){
			updateSettlementInfo();
			if(!tplRecoveryDataBean.isSettlementInfoFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderAddRelationship()&& tplRecoveryDataBean.isRenderAddRelationshipSave()){
			saveRelationshipInfo();
			if(!tplRecoveryDataBean.isRelationshipInfoFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderEditRelationshipSave() && tplRecoveryDataBean.isRenderAddRelationship() ){
			updateRelationshipInfo();
			if(!tplRecoveryDataBean.isRelationshipInfoFlag())
				littleSaveValid = false;
		}
		
		if(tplRecoveryDataBean.isRenderAddAssetsAndLiabilities() && tplRecoveryDataBean.isRenderAddAssetsLiabilitiesSave()){
			saveAssetsAndLiabilites();
			if(!tplRecoveryDataBean.isAssetsAndLiabilitiesFlag())
				littleSaveValid = false;
		}
		if(tplRecoveryDataBean.isRenderEditAssetsLiabilitiesSave() && tplRecoveryDataBean.isRenderAddAssetsAndLiabilities()){
			updateAssetsAndLiabilites();
			if(!tplRecoveryDataBean.isAssetsAndLiabilitiesFlag())
				littleSaveValid = false;
		}
		//attachments
		if(getTPLAttachmentDataBean().isShowAddAttachments()){
			TPLAttachmentControllerBean tplAttachmentControllerBean=new TPLAttachmentControllerBean();
			tplAttachmentControllerBean.uploadFile();
			if(!getTPLAttachmentDataBean().isAttachmentFlag())
				littleSaveValid = false;
		}
		if(getTPLAttachmentDataBean().isShowEditAttachments()){
			TPLAttachmentControllerBean tplAttachmentControllerBean=new TPLAttachmentControllerBean();
			try {
				tplAttachmentControllerBean.saveEditedAttachment();
				if(!getTPLAttachmentDataBean().isAttachmentFlag())
					littleSaveValid = false;
			} catch (CorrespondenceRecordUpdateBusinessException e) {
				e.printStackTrace();
			} catch (CorrespondenceRecordFetchBusinessException e) {
				e.printStackTrace();
			}
		}
		
		//Routing
		if(getRoutingDataBean().isRenderAddRouting()){
			TPLRoutingControllerBean tplRoutingControllerBean=new TPLRoutingControllerBean();
			tplRoutingControllerBean.saveRouting();
			if(!getRoutingDataBean().isRoutingFlag())
				littleSaveValid = false;
		}
		if(logger.isDebugEnabled()){
			logger.debug("littleSaveValid::"+littleSaveValid);
		  }
		
		return littleSaveValid;
	}
	 /**
     * @return String
     */
    private String getLoggedInUser()
    {
        String loggedInUser = getUserID();
        if(logger.isDebugEnabled()){
        	logger.debug("User Id is " + loggedInUser);
		  }
        
        return loggedInUser;
    }
    /**
     * This method is used to get the User ID.
     * 
     * @return String : User ID
     */
    public String getUserID()
    {
        String userId = "USERID1";
        HttpServletRequest renderRequest = (HttpServletRequest) FacesContext
                .getCurrentInstance().getExternalContext().getRequest();
        HttpServletResponse renderResponse = null;

        try {
			EnterpriseUserProfile eup = getUserData(renderRequest, renderResponse);

			if (eup != null && !isNullOrEmptyField(eup.getUserId()))
			{
			    userId = eup.getUserId();
			    GlobUserID=userId;
			}
		} catch (RuntimeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return userId;
    }

    
    /**
     * This method is used to check if the input field is null or is equal to an
     * empty string.
     * 
     * @param inputField :
     *            String inputField.
     * @return boolean : true if input field is null or equal to an empty string
     *         else false.
     */
    private boolean isNullOrEmptyField(String inputField)
    {
        return (inputField == null || TPLAdministrationConstants.EMPTY_STRING
                .equalsIgnoreCase(inputField.trim()));
    }
	
	

	/**
	 * This Method is used to save Recovery Case Details to the database.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveRecoveryCase()
	{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		//Added for defect ESPRD00782194
		tplRecoveryDataBean.setMajorSaveClicked(true);
		boolean memberCheckBoxflag = tplRecoveryDataBean.isMemberAllReadyOpen();
		try 
		{
			//Commented for ESPRD00782365
			//As per defect ESPRD00089051
			/*if (tplRecoveryDataBean.isRenderEditClaimFilterSave() &&
					!isClaimUpdateFlag())
			{
				updateClaimFilter();
				setClaimUpdateFlag(false);
			}*/
			//As per defect ESPRD00089078
			/*if (tplRecoveryDataBean.isRenderEditInterestedPartySave() &&
					!isInterestedPartyUpdateFlag())
			{
				updateInterestedPartyInfo();
				setInterestedPartyUpdateFlag(false);
			}*/
			TPLRecoveryCaseDetailVO recoveryCaseDetailVO = tplRecoveryDataBean
					.getRecoveryCaseDetailVO();
			String mode = null;
			setCarrierIDRequired(false);
			if(logger.isDebugEnabled()){
				logger.debug("BEFORE CALLING doLittleSaves() && validateRecoveryCase()>>>>>");
			  }
			if (doLittleSaves() && validateRecoveryCase())
			{
				if(logger.isDebugEnabled()){
					logger.debug("INSIDE THE doLittleSaves() && validateRecoveryCase()>>>>>");
				  }
				// setting deleted billing info
				tplRecoveryDataBean.setRenderResultSettlement(false);
				if(tplRecoveryDataBean.getDeletedBillingInfo() != null &&
						!tplRecoveryDataBean.getDeletedBillingInfo().isEmpty())
				{
					if(tplRecoveryDataBean.getTplRecoveryAddBillingInfoList() != null && 
							!tplRecoveryDataBean.getTplRecoveryAddBillingInfoList().isEmpty())
					{						
						tplRecoveryDataBean.getTplRecoveryAddBillingInfoList().addAll(
								tplRecoveryDataBean.getDeletedBillingInfo());
					}
					else
					{
						tplRecoveryDataBean.setTplRecoveryAddBillingInfoList(
								tplRecoveryDataBean.getDeletedBillingInfo());
					}
				}
				
				// setting deleted filter list
				if(tplRecoveryDataBean.getDeletedFilters() != null &&
						!tplRecoveryDataBean.getDeletedFilters().isEmpty())
				{
					if(tplRecoveryDataBean.getTplRecoveryClaimFilterList() != null && 
							!tplRecoveryDataBean.getTplRecoveryClaimFilterList().isEmpty())
					{						
						tplRecoveryDataBean.getTplRecoveryClaimFilterList().addAll(
								tplRecoveryDataBean.getDeletedFilters());
					}
					else
					{
						tplRecoveryDataBean.setTplRecoveryClaimFilterList(
								tplRecoveryDataBean.getDeletedFilters());
					}
				}
				
				// setting deleted interested parties
				if(tplRecoveryDataBean.getDeleteInterestedPartyInfo() != null &&
						!tplRecoveryDataBean.getDeleteInterestedPartyInfo().isEmpty())
				{
					if(tplRecoveryDataBean.getTplRecoveryInterestedPartyInfoList() != null && 
							!tplRecoveryDataBean.getTplRecoveryInterestedPartyInfoList().isEmpty())
					{						
						tplRecoveryDataBean.getTplRecoveryInterestedPartyInfoList().addAll(
								tplRecoveryDataBean.getDeleteInterestedPartyInfo());
					}
					else
					{
						tplRecoveryDataBean.setTplRecoveryInterestedPartyInfoList(
								tplRecoveryDataBean.getDeleteInterestedPartyInfo());
					}
				}
				
				// setting deleted relationship
				if(tplRecoveryDataBean.getDeletedRelationship() != null &&
						!tplRecoveryDataBean.getDeletedRelationship().isEmpty())
				{
					if(tplRecoveryDataBean.getTplRecoveryRelationshipList() != null && 
							!tplRecoveryDataBean.getTplRecoveryRelationshipList().isEmpty())
					{						
						tplRecoveryDataBean.getTplRecoveryRelationshipList().addAll(
								tplRecoveryDataBean.getDeletedRelationship());
					}
					else
					{
						tplRecoveryDataBean.setTplRecoveryRelationshipList(
								tplRecoveryDataBean.getDeletedRelationship());
					}
				}
				
				// setting deleted asset and liability
				if(tplRecoveryDataBean.getDeletedAssetandLiability() != null &&
						!tplRecoveryDataBean.getDeletedAssetandLiability().isEmpty())
				{
					if(tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList() != null && 
							!tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList().isEmpty())
					{						
						tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList().addAll(
								tplRecoveryDataBean.getDeletedAssetandLiability());
					}
					else
					{
						tplRecoveryDataBean.setTplRecoveryAssetsLiabilitiesList(
								tplRecoveryDataBean.getDeletedAssetandLiability());
					}
				}
				
				List modifiedInclClmsList = tplRecoveryDataBean.getModifiedInclClmsList();
				List newInclClmsList = tplRecoveryDataBean.getNewIncludedClmList();
				if(modifiedInclClmsList!=null && modifiedInclClmsList.size()>0 
					&& newInclClmsList!=null && newInclClmsList.size()>0) {
					Iterator modfiedInclClmsItr = modifiedInclClmsList.iterator();
					while(modfiedInclClmsItr.hasNext()){
						TPLRecoveryCaseIncludedClaimsVO rcvryCaseInclClmsVO = 
							       (TPLRecoveryCaseIncludedClaimsVO)modfiedInclClmsItr.next();
						Iterator newInclClmsItr = newInclClmsList.iterator();
						while(newInclClmsItr.hasNext()){
							TPLRecoveryCaseIncludedClaimsVO newRcvryCaseInclClmsVO = 
							       		(TPLRecoveryCaseIncludedClaimsVO)newInclClmsItr.next();
							if(rcvryCaseInclClmsVO.getTcn().equals(newRcvryCaseInclClmsVO.getTcn())){
								newInclClmsItr.remove();	
							}
						}
					}
				}
				TPLRecoveryConversionHelper tplRecoveryConversionHelper = new TPLRecoveryConversionHelper();
				TPLRecoveryCaseDetail rcvryCase = tplRecoveryConversionHelper.convertRCVRYCaseDetailVOtoDO();
				rcvryCase.setAddedAuditUserID(GlobUserID);
				rcvryCase.setAuditUserID(GlobUserID);
				
				//Routing 
				TPLRoutingDOConvertor tplRoutingDOConvertor=new TPLRoutingDOConvertor();
				Set setOfTPLRouting=tplRoutingDOConvertor.convertListOfRecoveryRoutingVOs(rcvryCase);
				rcvryCase.setRecoveryRouting(setOfTPLRouting);
				
				if (null == rcvryCase.getMember())
				{
					TPLRecoveryDelegate delegate = new TPLRecoveryDelegate();
					Member member = new Member();
					member.setSystemID(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getSystemID());
					if (null != member)
					{
						rcvryCase.setMember(member);
					}
				}
								

               //notes
				CommonEntityValidator commonEntityValidator=new CommonEntityValidator();
				rcvryCase.setNoteSet(commonEntityValidator.getNoteSetDO());
			   
				//Alerts
				TPLAlertDOConvertor alertconverter=new TPLAlertDOConvertor();
				alertconverter.convertTPLAlertVOtoDO(rcvryCase);
				
				RecoveryResponse recoveryResponse  = new RecoveryResponse();
				recoveryResponse.setRcvryCase(rcvryCase);
				//CR ESPRD00909402
				recoveryResponse.setRemainingCreditBal(tplRecoveryDataBean.getRemainingCreditBalance());
				TPLRecoveryCaseRecoveryMethodVO tplecoveryCaseRecoveryMethodVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseRecoveryMethodVO();
				if (!tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().
						equals("O"))
				{
					if (StringUtils.isNotBlank(tplecoveryCaseRecoveryMethodVO.getRecoveryMethod()))
					{
						addMessages("Payments can only be posted to an open Recovery Case");						
						return null;
					}
				}
				//for orthodontia
				
				if (null != tplRecoveryDataBean.getTplRecoveryOrthodontiaList() && tplRecoveryDataBean.getTplRecoveryOrthodontiaList().size()>0)
				{
					recoveryResponse.setTplRecoveryCaseOrthodontiaVOList(tplRecoveryDataBean.getTplRecoveryOrthodontiaList());
				}
				
				if(tplecoveryCaseRecoveryMethodVO!=null && StringUtils.isNotEmpty(tplecoveryCaseRecoveryMethodVO.getRecoveryReason()))
				{
					tplecoveryCaseRecoveryMethodVO.setAddedAuditUserID(GlobUserID);
					tplecoveryCaseRecoveryMethodVO.setAuditUserID(GlobUserID);
					tplecoveryCaseRecoveryMethodVO.setAddedAuditTimeStamp(new Date());
					tplecoveryCaseRecoveryMethodVO.setAuditTimeStamp(new Date());
					recoveryResponse.setTplRecoveryCaseRecoveryMethodVO(tplecoveryCaseRecoveryMethodVO);
				}
				
				List list=tplRecoveryDataBean.getTplRecoveryResponseList();
				if(list!=null && !list.isEmpty()){
					Iterator iterator=list.iterator();
					while(iterator.hasNext()){
						TPLRecoveryCaseResponseVO recoveryCaseResponseVO=(TPLRecoveryCaseResponseVO)iterator.next();
						recoveryCaseResponseVO.setAuditUserID(GlobUserID);
						recoveryCaseResponseVO.setAddedAuditUserID(GlobUserID);
						recoveryCaseResponseVO.setAddedAuditTimeStamp(new Date());
						recoveryCaseResponseVO.setAuditTimeStamp(new Date());
					}
				}
				
				if (tplRecoveryDataBean.getUpdatedResponseList() != null 
						&& !tplRecoveryDataBean.getUpdatedResponseList().isEmpty())
				{
					//recoveryResponse.setTplRecoveryResponseVOList(tplRecoveryDataBean.getTplRecoveryResponseList());
					recoveryResponse.setTplRecoveryResponseVOList(tplRecoveryDataBean.getUpdatedResponseList());
				}
				TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
				// commented by krishna for GAI performance
				//TPLRecoveryProcessDelegate tplRecoveryProcessDelegate = new TPLRecoveryProcessDelegate();
				
				if(StringUtils.isNotEmpty(rcvryCase.getCaseUserID()))
				{
					mode = "update";
				}
				if(StringUtils.isEmpty(rcvryCase.getCaseUserID()))
				{
					mode = "add";
				}
				String originalStatus = tplRecoveryDataBean.getOriginalCaseStatus();
				recoveryResponse = tplRecoveryDelegate.saveRecoveryCase(recoveryResponse);
				//ESPRD00807694
				if(recoveryResponse != null && recoveryResponse.getRcvryCase()!= null && 
						recoveryResponse.getRcvryCase().getRcvryAttachment() != null &&
						!recoveryResponse.getRcvryCase().getRcvryAttachment().isEmpty())
				{
					TPLRecoveryProcessDelegate processDelegate = new TPLRecoveryProcessDelegate();
					processDelegate.saveRecoveryCaseDetails(recoveryResponse);
					
				}
				
				//ALERTS
				alertconverter.convertTPLAlertDOtoVO(rcvryCase);
				//	notes impl
				if (commonEntityValidator.getNoteSetDO() != null
						&& commonEntityValidator.getNoteSetDO().getNotes() != null)
				{   
					tplRecoveryDataBean.setNotesCount(commonEntityValidator
							.getNoteSetDO().getNotes().size());
					
				}
				if(StringUtils.isNotEmpty(recoveryResponse.getStatus()))
			    {
				    TPLRecoveryCaseDetail rcvrycase = recoveryResponse.getRcvryCase();
				    getRecoveryDetails(rcvrycase.getCaseUserID());
				    tplRecoveryDataBean.setRenderIncludeClaim(false);
				    //As per defect ESPRD00089098
				   /* double priorClaimsAmount  = recoveryCaseDetailVO.
										getTplRecoveryCaseEstateDetailVO().
										getPriorClaimsAmount();
				   recoveryCaseDetailVO.
										getRecoveryCaseVO().setPriorEstClaimsAmt(priorClaimsAmount);
				    if (priorClaimsAmount != 0)
					{
				     double includeClaimsAmt =getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO()
				                               .getIncludedClaimsTotal()+ priorClaimsAmount;
				     getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO()
				      .setIncludedClaimsTotal(includeClaimsAmt);
				     getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO()
				       .setIncludedClaimsTotalStr(decimalValue(includeClaimsAmt));
				     System.out.println("**IncAmt :"+ getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO().getIncludedClaimsTotal());
				     System.out.println("**IncAmtStr :"+ getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO().getIncludedClaimsTotalStr());
					}
				    String previousRecoveredAmount = recoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().
										              getPreviousRecoveredAmount();
					if (previousRecoveredAmount != null && previousRecoveredAmount.trim().length() > 0)
					{
						recoveryCaseDetailVO.
										getRecoveryCaseVO().setPreviousRecovered(new Double(
												previousRecoveredAmount).doubleValue());
						double totalRecovAmt = getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO()
						                       .getTotalRecovered()+new Double(previousRecoveredAmount).doubleValue();
						getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO()
						.setTotalRecovered(totalRecovAmt);
						getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO()
						 .setTotalRecoveredStr(decimalValue(totalRecovAmt));
					System.out.println("**TotalRecovAmt :"+ getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO().getTotalRecovered());
					System.out.println("**TotalRecovAmtStr :"+ getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO().getTotalRecoveredStr());
					}*/
					if ("add".equalsIgnoreCase(mode))
				    {
				    	addMessages("System successfully saved the Information");
				    	tplRecoveryDataBean.setRenderAddBillingInfo(false);
				    	tplRecoveryDataBean.setRenderBillingAddress(false);
				    	//for defect ESPRD00809650		- 	after save,to enable recovery method fields 			
						if(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals(TPLAdministrationConstants.STATUS_OPEN)){
							if(!tplRecoveryDataBean.isCheckClaimsEmpty()){
								tplRecoveryDataBean.setDisableRecoveryMethod(false);
							}
						}
				    	//Defect : ESPRD00755810
				    	tplRecoveryDataBean.setRenderEditCarrierInfo(false);
				    	if (originalStatus == null
				    			&& tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.OPEN))
				    	{
				    		tplRecoveryDataBean.setRecoveryType(true);
				    	}
				    	if (originalStatus == null
				    			&& tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE))
				    	{
				    		tplRecoveryDataBean.setRecoveryType(true);
				    		
				    	}
				    	/*
				    	if (StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus()) &&
								tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE) &&
								StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getCaseCloseDate()) && 
				    			StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getCaseCloseReason()))
				    	{
				    		tplRecoveryDataBean.setDisableRecoveryMethod(true);
				    		tplRecoveryDataBean.setRenderRcvryMethod(true);
				    	}*/
				    	if (checkSatisfiedClaim())
				    	{
				    		addMessages("All claims are satisfied, you may close the case");
				    	}
				    	/*else if (checkSatisfiedClaimAmount())
				    	{
				    		addMessages("All claims are satisfied, you may close the case");
				    	}*/
				    	String rcvrytype=tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryType();
				    	if ("1".equalsIgnoreCase(rcvrytype))
				    	{
						  	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
						  	tplRecoveryDataBean.setRenderMemberInfosummary(true);
						  	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
						  	tplRecoveryDataBean.setRenderLegalSummary(true);
						  	tplRecoveryDataBean.setRenderSettlementSummary(true);
						  	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
				            tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
				            tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				            tplRecoveryDataBean.setRenderSummary(true);
				        }
				        if ("2".equalsIgnoreCase(rcvrytype))
				        {
				        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
				        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
				        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
				        	tplRecoveryDataBean.setRenderLegalSummary(false);
				        	tplRecoveryDataBean.setRenderSettlementSummary(false);
				        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
				        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
				        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				        }
				        if ("3".equalsIgnoreCase(rcvrytype)) 
				        {
				        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
				        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
				        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
				        	tplRecoveryDataBean.setRenderLegalSummary(true);
				        	tplRecoveryDataBean.setRenderSettlementSummary(true);
				        	tplRecoveryDataBean.setRenderEstateDetailSummary(true);
				        	tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(true);
				        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
				        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				        	tplRecoveryDataBean.setRenderSummary(true);
				        }
				        if ("4".equalsIgnoreCase(rcvrytype)) 
				        {
				        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
				        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
				        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
				        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
				        	tplRecoveryDataBean.setRenderLegalSummary(false);
				        	tplRecoveryDataBean.setRenderSettlementSummary(false);
				        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
				        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				        }
				        if ("5".equalsIgnoreCase(rcvrytype)) 
				        {
				        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
				        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
				        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
				        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
				        	tplRecoveryDataBean.setRenderLegalSummary(false);
				        	tplRecoveryDataBean.setRenderSettlementSummary(false);
				        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
				        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				        }
				        if ("6".equalsIgnoreCase(rcvrytype))
				        {
				        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
				        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
				        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
				        	tplRecoveryDataBean.setRenderLegalSummary(false);
				        	tplRecoveryDataBean.setRenderSettlementSummary(false);
				        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
				        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(true);
				        	tplRecoveryDataBean.setRenderCarrierPolicySummary(true);
				        	tplRecoveryDataBean.setRenderSummary(true);
				        }
				        if ("7".equalsIgnoreCase(rcvrytype))
				        {
				        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
				        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
				        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
				        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
				        	tplRecoveryDataBean.setRenderLegalSummary(false);
				        	tplRecoveryDataBean.setRenderSettlementSummary(false);
				        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
				        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				        }
				        if ("8".equalsIgnoreCase(rcvrytype)) 
				        {
					        tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					        tplRecoveryDataBean.setRenderMemberInfosummary(true);
					        tplRecoveryDataBean.setRenderInterestedPartySummary(true);	
					        tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					        tplRecoveryDataBean.setRenderLegalSummary(false);
					        tplRecoveryDataBean.setRenderSettlementSummary(false);
					        tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					        tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				        }
				        if (StringUtils.isEmpty(rcvrytype))
				        {
				        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
				        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
				        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
				        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
				        	tplRecoveryDataBean.setRenderLegalSummary(false);
				        	tplRecoveryDataBean.setRenderSettlementSummary(false);
				        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
				        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
				        }
				    	
				    }
				    if ("update".equalsIgnoreCase(mode))
				    {
				    	addMessages("System successfully saved the Information");
				    	tplRecoveryDataBean.setRenderAddBillingInfo(false);
				    	tplRecoveryDataBean.setRenderBillingAddress(false);
				    	//Defect : ESPRD00755810
				    	tplRecoveryDataBean.setRenderEditCarrierInfo(false);
				    	if (originalStatus != null
				    			&& StringUtils.isNotEmpty(originalStatus)
				    			&& originalStatus.equals(TPLRecoveryCaseConstants.PEND)
				    			&& tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.OPEN))
				    	{
				    		tplRecoveryDataBean.setRecoveryType(true);
				    	}
				    	if (originalStatus != null
				    			&& StringUtils.isNotEmpty(originalStatus)
				    			&& originalStatus.equals(TPLRecoveryCaseConstants.PEND)
				    			&& tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE))
				    	{
				    		tplRecoveryDataBean.setRecoveryType(true);
				    	}
				    /*	if (StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus()) &&
								tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE) &&
								StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getCaseCloseDate()) && 
				    			StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getCaseCloseReason()))
				    	{
				    		tplRecoveryDataBean.setDisableRecoveryMethod(true);
				    		tplRecoveryDataBean.setRenderRcvryMethod(true);
				    	} */
				    	if (checkSatisfiedClaim())
				    	{
				    		addMessages("All claims are satisfied, you may close the case");
				    	}
				    	/*else if (checkSatisfiedClaimAmount())
				    	{
				    		addMessages("All claims are satisfied, you may close the case");
				    	}*/
				    	tplRecoveryDataBean.setRenderEditResponse(false);
				    	tplRecoveryDataBean.setSaveResponseDetails(false); //ESPRD00853186
				    }
				    tplRecoveryDataBean.setRenderAddClaimFilter(false);
				    tplRecoveryDataBean.setRenderEditClaimFilterSave(false);
				    tplRecoveryDataBean.setRenderEditClaimFilter(false);
				    tplRecoveryDataBean.setRenderAddAssetsAndLiabilities(false);
				    tplRecoveryDataBean.setRenderEditAssetsAndLiabilities(false);
				    tplRecoveryDataBean.setRenderEditClaimFilter(false);
				    tplRecoveryDataBean.setRenderResultResponse(false);
				    String rcvrytype=tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryType();
				    if ("1".equalsIgnoreCase(rcvrytype))
				    {
				        tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					  	tplRecoveryDataBean.setRenderMemberInfosummary(true);
					  	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					  	tplRecoveryDataBean.setRenderLegalSummary(true);
					  	tplRecoveryDataBean.setRenderSettlementSummary(true);
					  	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			            tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			            tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			            tplRecoveryDataBean.setRenderSummary(true);
			        }
			        if ("2".equalsIgnoreCase(rcvrytype))
			        {
			         tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			         tplRecoveryDataBean.setRenderMemberInfosummary(true);
					 tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					 tplRecoveryDataBean.setRenderLegalSummary(false);
			         tplRecoveryDataBean.setRenderSettlementSummary(false);
			         tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			         tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			         tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			        }
			        if ("3".equalsIgnoreCase(rcvrytype))
			        {
			        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
			        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
			        	tplRecoveryDataBean.setRenderLegalSummary(true);
			        	tplRecoveryDataBean.setRenderSettlementSummary(true);
			        	tplRecoveryDataBean.setRenderEstateDetailSummary(true);
			        	tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(true);
			        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			        	tplRecoveryDataBean.setRenderSummary(true);
			        }
			        if ("4".equalsIgnoreCase(rcvrytype)) 
			        {
			        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
			        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
			        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			        	tplRecoveryDataBean.setRenderLegalSummary(false);
			        	tplRecoveryDataBean.setRenderSettlementSummary(false);
			        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			        }
			        if ("5".equalsIgnoreCase(rcvrytype)) 
			        {
			        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
			        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
			        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			        	tplRecoveryDataBean.setRenderLegalSummary(false);
			        	tplRecoveryDataBean.setRenderSettlementSummary(false);
			        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			        }
			        if ("6".equalsIgnoreCase(rcvrytype))
			        {
			        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
			        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
			        	tplRecoveryDataBean.setRenderLegalSummary(false);
			        	tplRecoveryDataBean.setRenderSettlementSummary(false);
			        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(true);
			        	tplRecoveryDataBean.setRenderCarrierPolicySummary(true);
			        	tplRecoveryDataBean.setRenderSummary(true);
			        }
			        if ("7".equalsIgnoreCase(rcvrytype)) 
			        {
			        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
			        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
			        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			        	tplRecoveryDataBean.setRenderLegalSummary(false);
			        	tplRecoveryDataBean.setRenderSettlementSummary(false);
			        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			        }
			        if ("8".equalsIgnoreCase(rcvrytype)) 
			        {
			        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
			        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);	
			        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			        	tplRecoveryDataBean.setRenderLegalSummary(false);
			        	tplRecoveryDataBean.setRenderSettlementSummary(false);
			        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			        }
			        if (StringUtils.isEmpty(rcvrytype))
			        {
			        	tplRecoveryDataBean.setRenderCaseDetailSummary(true);
			        	tplRecoveryDataBean.setRenderMemberInfosummary(true);
			        	tplRecoveryDataBean.setRenderInterestedPartySummary(true);
			        	tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
			        	tplRecoveryDataBean.setRenderLegalSummary(false);
			        	tplRecoveryDataBean.setRenderSettlementSummary(false);
			        	tplRecoveryDataBean.setRenderEstateDetailSummary(false);
			        	tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
			        }
			        //ESPRD00853186 -- Added to clear list after major save.
			        tplRecoveryDataBean.getUpdatedResponseList().clear();
			        tplRecoveryDataBean.getModifiedInclClmsList().clear();
			        tplRecoveryDataBean.getNewIncludedClmList().clear();
			        tplRecoveryDataBean.getRemovedInclClmList().clear();
			        tplRecoveryDataBean.getTempInclClmsList().clear();
			    }

			}/* else {
				
				TPLAdministrationHelper.setAddHIPPInfoMessage();
			}	
			*/
						
		}/*catch (TPLRecoveryBusinessException e) {
		System.err.println(e.getMessage());
		if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().equals("Already data exit"))
		{
			addMessages("Recovery Case overlaps existing Recovery Case");
		}
		else if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().equals("While save or update"))
		{
			addMessages("Can not add the Duplicate Payeer ID for Same Recovery CaseID");
		}
		}*/
		catch (TPLRecoveryBusinessException e)
		{
			e.printStackTrace();
			tplRecoveryDataBean = getTPLRecoveryDataBean();
			if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().equals("While save or update")
					&& tplRecoveryDataBean.getTplRecoveryAddBillingInfoList() != null
					&& tplRecoveryDataBean.getTplRecoveryAddBillingInfoList().size()>=2)
			{
				addMessages("Can not add the Duplicate Payeer ID for Same Recovery CaseID");
			}
			else if (tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equals("O")
							&& StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().startsWith("Already data exit"))
			{
				//Defect ESPRD00810741 : For displaying proper error message '9-1030-3360'
				String errMsg[] = e.getMessage().split("_");
				String actualSame ="";
				if(errMsg != null && errMsg[1] != null ){
					actualSame=errMsg[1];
				}
				if(StringUtils.isNotEmpty(actualSame)){
				addMessages("Recovery Case overlaps existing Recovery Case " +actualSame);
				}
				// End
				tplRecoveryDataBean.setMemberAllReadyOpen(memberCheckBoxflag);
			}
			else if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().equals("Valid FCN must be entered when Recovery Amount is greater than 0"))
			{
				addMessages("Valid FCN must be entered when Recovery Amount is greater than 0");
			}
			else if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().equals("Recovery Amount cannot exceed FCN remaining balance"))
			{
				addMessages("Recovery Amount cannot exceed FCN remaining balance");
			}
			else if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().startsWith("Recovery Amount can not be posted more than once to same claim"))
			{
//				addMessages("Recovery Amount can not be posted more than once to same claim <TCN> in same day.");
				addMessages(e.getMessage());
			}
			else if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().equals("Recovery Amount is more than Recovey Requested Amount"))
			{
				addMessages("Fixed Amount Recovery Method cannot be used because Recovery Amount exceeds the outstanding balance and there are no other outstanding claims/claim lines");
			}
			else if (StringUtils.isNotEmpty(e.getMessage()) && e.getMessage().equals("9-1030-3690"))
			{
				addMessages("Recovery Amount may not be greater than outstanding balance.");
			}
			else
			{
				if(logger.isDebugEnabled()){
					logger.debug(e.getMessage());
				  }
				addMessages("There was an error processing the request. Please retry the transaction.");
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			e.getMessage();
		}
		
		//ESPRD00661632 - added the code for caching issue
		routingDataBean = getRoutingDataBean();		
		alertDataBean = getTPLAlertDataBean();
		routingDataBean.setShowSucessMessage(false);
		alertDataBean.setShowSucessMessage(false);
		alertDataBean.setRenderEditAlert(false);
		tplRecoveryDataBean.setSaveRecoveryFlag(true);
		//Added for defect ESPRD00782194
		tplRecoveryDataBean.setMajorSaveClicked(false);
		return "success";
	}
	
	
	/**
     * This method is used to get the Alert Data Bean.
     * 
     * @return AlertDataBean : AlertDataBean object.
     */
    public TPLAlertDataBean getTPLAlertDataBean()
    {
        alertDataBean = ((TPLAlertDataBean)getDataBean(TPLAlertDataBean.BEAN_NAME)); 
        return alertDataBean;
    }
	
	
	 /**
     * this method for delete BillingInformation.
     *
     * @generated "UML to Java V1.4
     *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
     */
	public String deleteBillingInfo() 
    {
    	try 
		{
            TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
            tplRecoveryDataBean.setFocusThisId("addbillngfocus");
            List billingInfoList = tplRecoveryDataBean.getTplRecoveryAddBillingInfoList();
            int deleteRecord = tplRecoveryDataBean.getCurrentRecord();
            TPLRecoveryCaseBillingInformationVO tplRecoveryCaseBillingInformationVO = 
            	(TPLRecoveryCaseBillingInformationVO)billingInfoList.get(deleteRecord);
            String billingStartDate = tplRecoveryCaseBillingInformationVO.getBillStartDate();
            if (StringUtils.isNotEmpty(billingStartDate))
			{
            	Date sysDate = new Date();
                Calendar cal = Calendar.getInstance();   
        		cal.setTime(sysDate);   
        		cal.set(Calendar.HOUR_OF_DAY, 0);   
        		cal.set(Calendar.MINUTE, 0);   
        		cal.set(Calendar.SECOND, 0);   
        		cal.set(Calendar.MILLISECOND, 0);   
        		sysDate = cal.getTime(); 
        		Date billStartDate = dateformatYYYYMMDD.parse(billingStartDate);
				if (billStartDate.before(sysDate))
				{					
					TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RCVRY_BILLING_BILL_START_DATE,"billingStartDate1");
					return TPLHIPPConstants.TPL_RECOVERY_SUCCESS;									
				}
			}
            tplRecoveryCaseBillingInformationVO.setDeletedBillingInformation(true);
            billingInfoList.remove(deleteRecord);
            tplRecoveryDataBean.getDeletedBillingInfo().add(tplRecoveryCaseBillingInformationVO);
            tplRecoveryDataBean.setRenderAddInfoBillingInfo(false);
            tplRecoveryDataBean.setRenderAddBillingSave(false);
            tplRecoveryDataBean.setRenderEditBillingSave(false);
            tplRecoveryDataBean.setRenderAddBillingInfo(false);
            tplRecoveryDataBean.setRenderAddBillingInfoHeader(false);
            tplRecoveryDataBean.setRenderEditBillingInfo(false);
            tplRecoveryDataBean.setRenderResultBillingInfo(false);
            tplRecoveryDataBean.setDeleteBillingInfoFlag(true);
        }
        catch (Exception e) 
		{
        	if(logger.isDebugEnabled()){
        		logger.debug(e);
  		  }
        }
        return TPLHIPPConstants.TPL_RECOVERY_SUCCESS;
    }
    
    /**
     * This method is used to minor delete Claim Filter on Claim.
     *
     * @generated "UML to Java V1.4
     *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
     */
    public String deleteCalimFilter() {
    	
        try {
        	 int deleteRecord=0;
            TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
            List recoveryClaimFilterList = tplRecoveryDataBean.getTplRecoveryClaimFilterList();
             deleteRecord = tplRecoveryDataBean.getCurrentRecord();
            /*Iterator it=recoveryClaimFilterList.iterator();
            while(it.hasNext()){
            	TPLRecoveryCaseMemberClaimFilterVO caseMemberClaimFilterVO=	(TPLRecoveryCaseMemberClaimFilterVO)it.next();
            	System.err.println("This is the value====>"+caseMemberClaimFilterVO.getFilterType());
            }*/
            
            if(deleteRecord==0 && tplRecoveryDataBean.isAddClaimFlag()==true){
            	deleteRecord=recoveryClaimFilterList.size()-1;
            }
            TPLRecoveryCaseMemberClaimFilterVO caseMemberClaimFilterVO = 
				(TPLRecoveryCaseMemberClaimFilterVO)recoveryClaimFilterList.get(deleteRecord);
            caseMemberClaimFilterVO.setDeletedMemberClaimFilter(true);
            tplRecoveryDataBean.getDeletedFilters().add(caseMemberClaimFilterVO);
            recoveryClaimFilterList.remove(deleteRecord);
            tplRecoveryDataBean.setRenderAddClaimFilterSave(false);
            tplRecoveryDataBean.setRenderEditClaimFilterSave(false);
            tplRecoveryDataBean.setRenderEditClaimFilterHeader(false);
            tplRecoveryDataBean.setRenderAddClaimFilterHeader(false);
            tplRecoveryDataBean.setRenderAddClaimFilter(false);
            tplRecoveryDataBean.setRenderEditClaimFilter(false);
            tplRecoveryDataBean.setRenderResultClaimFilter(false);
            tplRecoveryDataBean.setFocusThisId("clmfilterfocus");
            tplRecoveryDataBean.setDeleteFilterFlag(true);
            tplRecoveryDataBean.setCurrentRecord(0);
        }
        catch (Exception e) {
        	e.printStackTrace();
        }
        
        return TPLHIPPConstants.TPL_RECOVERY_SUCCESS;
    }
    
    /**
     * This method is used to delete Interested Party Information for the
     * recovery case.
     *
     * @generated "UML to Java V1.4
     *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
     */
    public String deleteInterestedPartyInfo() {
        try {
            TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
            tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
            List recoveryInterestedPartyInfoList = tplRecoveryDataBean.getTplRecoveryInterestedPartyInfoList();
            int deleteRecord = tplRecoveryDataBean.getCurrentRecord();
            TPLRecoveryCaseInterestedPartyVO caseInterestedPartyVO = (TPLRecoveryCaseInterestedPartyVO)
				recoveryInterestedPartyInfoList.get(deleteRecord);            
            recoveryInterestedPartyInfoList.remove(deleteRecord);
            caseInterestedPartyVO.setDeletedInterestedParty(true);
            tplRecoveryDataBean.getDeleteInterestedPartyInfo().add(caseInterestedPartyVO);
            tplRecoveryDataBean.setRenderAddInterestedPartySave(false);
            tplRecoveryDataBean.setRenderEditInterestedPartySave(false);
            tplRecoveryDataBean.setRenderEditInterestedPartyHeader(false);
            tplRecoveryDataBean.setRenderAddInterestedPartyHeader(false);
            tplRecoveryDataBean.setRenderAddInterestedPartyInfo(false);
            tplRecoveryDataBean.setRenderResultInterestedPartyInfo(false);
            tplRecoveryDataBean.setDeleteInterestedPartyInfoFlag(true);
            tplRecoveryDataBean.setRenderInterestedPartyAddress(false);
        }
        catch (Exception e) {
        	e.printStackTrace();
        }

        return TPLHIPPConstants.TPL_RECOVERY_SUCCESS;
    }
    
    /**
     * This method is used to delete relationship information for the recovery
     * case.
     *
     * @generated "UML to Java V1.4
     *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
     */
    public String deleteRelationshipInfo() {
        try {
            TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
            tplRecoveryDataBean.setFocusThisId("relationshipfocus");
            List recoveryRelationshipList = tplRecoveryDataBean.getTplRecoveryRelationshipList();
            int deleteRecord = tplRecoveryDataBean.getCurrentRecord();
            recoveryRelationshipList.get(deleteRecord);
            TPLRecoveryCaseRelationshipVO tplRecoveryCaseRelationshipVO = 
				(TPLRecoveryCaseRelationshipVO)tplRecoveryDataBean.getTplRecoveryRelationshipList().get(deleteRecord);
            tplRecoveryCaseRelationshipVO.setDeletedRelationship(true);
            tplRecoveryDataBean.getDeletedRelationship().add(tplRecoveryCaseRelationshipVO);
            recoveryRelationshipList.remove(deleteRecord);
            tplRecoveryDataBean.setRenderEditRelationship(false);
            tplRecoveryDataBean.setRenderAddRelationshipSave(false);
            tplRecoveryDataBean.setRenderEditRelationshipSave(false);
            tplRecoveryDataBean.setRenderEditRelationshipHeader(false);
            tplRecoveryDataBean.setRenderAddRelationshipHeader(false);
            tplRecoveryDataBean.setRenderAddRelationship(false);
            tplRecoveryDataBean.setRenderResultRelationship(false);
            tplRecoveryDataBean.setDeleteRelationshipFlag(true);
        }
        catch (Exception e) {
        	e.printStackTrace();
        }

        return TPLHIPPConstants.TPL_RECOVERY_SUCCESS;
    }

    public String deleteAssetsAndLiabilities() {
        try {
            TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
            tplRecoveryDataBean.setFocusThisId("assetliabilitiesfocus");
            List assetsLiabList = tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList();
            int deleteRecord = tplRecoveryDataBean.getCurrentRecord();
            
            TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO = 
            	(TPLRecoveryCaseAssetsAndLiabilitiesVO)assetsLiabList.get(deleteRecord);
            recoveryCaseAssetsAndLiabilitiesVO.setDeletedAssetsAndLiabilities(true);
            tplRecoveryDataBean.getDeletedAssetandLiability().add(recoveryCaseAssetsAndLiabilitiesVO);
            
            assetsLiabList.remove(deleteRecord);
            
            tplRecoveryDataBean.setRenderAddAssetsLiabilitiesSave(false);
            tplRecoveryDataBean.setRenderEditAssetsLiabilitiesSave(false);
            tplRecoveryDataBean.setRenderEditAssetsLiabilitiesHeader(false);
            tplRecoveryDataBean.setRenderAddAssetsLiabilitiesHeader(false);
            tplRecoveryDataBean.setRenderAddAssetsAndLiabilities(false);
            tplRecoveryDataBean.setRenderResultAssetsLiabilities(false);
            tplRecoveryDataBean.setRenderEditAssetsAndLiabilities(false);
            tplRecoveryDataBean.setDeleteAssetandLiabilityFlag(true);
        }
        catch (Exception e) {
        	e.printStackTrace();
        }

        return TPLHIPPConstants.TPL_RECOVERY_SUCCESS;
    }

	/**
	 * @return
	 */
	public boolean validateRecoveryCase() 
	{
		boolean validateFlag = true;
		TPLRecoveryCaseDetailVO tplRecoveryCaseDetailVO = getTPLRecoveryDataBean().getRecoveryCaseDetailVO();
		//CR ESPRD00379117 Start
		HttpServletRequest renderRequest = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
	    HttpServletResponse renderResponse = null;
	    try 
		{
			EnterpriseUserProfile eup = getUserData(renderRequest, renderResponse);
			//CR ESPRD00379117 End
			
			if (null != eup)
			{
				if(logger.isDebugEnabled()){
					logger.debug("Is User has Supervisor Role????????????????????"+eup.getDesgAsSupr());
					logger.debug("Is memeber having Good Cause???????????????????"+getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().isMemGoodCause());
				}
				if(!eup.getDesgAsSupr() && getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().isMemGoodCause())
				{		
					if(logger.isDebugEnabled()){
						logger.debug("Actor does not have proper security to add/update/close privileges based on Actor User ID on Security Tables");
					}
					TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_SECURITY_GCS);
					validateFlag = false;
				}
			}
		} catch (RuntimeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    if(logger.isDebugEnabled()){
			logger.debug("validateFlag:"+validateFlag);
		}
	  if(validateFlag)
	  {
			/* Defect ESRPD00809882: Added for Displaying 9-1030-0925 & 9-1030-0930  
			 * When Member Id and Member Type not entered.*/
		  	if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0004(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
					tplRecoveryCaseDetailVO.getCaseCloseDate(), tplRecoveryCaseDetailVO.getCaseCloseReason()))
			{
				validateFlag = false;				
			}
		  	if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0008(tplRecoveryCaseDetailVO.getCaseCloseDate(),
					tplRecoveryCaseDetailVO.getCaseCloseReason()))
			{
				validateFlag = false;			
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0118(tplRecoveryCaseDetailVO.getCaseCloseDate(),
					tplRecoveryCaseDetailVO.getCaseCloseReason()))
			{
				validateFlag = false;				
			}// End 
			//ESPRD00826773 -- modified code here and added new if condition.
			if(!TPLRecoveryValidateHelper.validateMandatoryFieldsForSave())
			{
				validateFlag = false;
			}
			
			if(logger.isDebugEnabled()){
				logger.debug("validateFlag:"+validateFlag);
			}
		if(!validateFlag)
		{
			validateFlag = false;
		}
		else
		{
			if(StringUtils.isEmpty(getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID()))
			{
				if(!getTPLRecoveryDataBean().isMemberValidated()){
					validateMemberInfo();
					if(getTPLRecoveryDataBean().isMemberValidationFailed()){
						validateFlag = false;
					}
				}
			}
			validateWorkerID();
			if(!getTPLRecoveryDataBean().isShowWorkerDetails()){
				validateFlag = false;
			}
			//Implemented for ESPRD00579450
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStartDate()))
            {			
				if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getCaseClaimStartDate())){
              	
				  String recoveryDate=tplRecoveryCaseDetailVO.getCaseClaimStartDate();
                  Date recDate = getDateFromString(recoveryDate);
	        	  Date sysDate= new Date();
	        	  if(recDate.after(sysDate)){
	        		//ESPRD00872916
	        		TPLAdministrationHelper.setAddRecoveryInformation(
	        				TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_START_DT,
	        				TPLRecoveryCaseConstants.JSP_TPL_START_RECOVERY_INVALID_DATE);
	        		validateFlag = false;
        	      }
        	    }else{
        	    	TPLAdministrationHelper.setAddRecoveryInformation(
        	    			TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
        	    			TPLRecoveryCaseConstants.JSP_TPL_START_RECOVERY_INVALID_DATE);
        	    	validateFlag = false;
             	}
                
                Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getCaseClaimStartDate());
                try {
					String bdate = TPLAdministrationHelper.dateConverter(bgdate);
            
					tplRecoveryCaseDetailVO.setCaseClaimStartDate(bdate);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                       
		    }
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStopDate()))
            {			
				if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getCaseClaimStopDate())){
					String recoveryDate=tplRecoveryCaseDetailVO.getCaseClaimStopDate();
					getDateFromString(recoveryDate);
	        	}
				else{
					TPLAdministrationHelper.setAddRecoveryInformation(
							TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
							TPLRecoveryCaseConstants.JSP_TPL_STOP_RECOVERY_INVALID_DATE);
					validateFlag = false;
             	}
                Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getCaseClaimStopDate());
                try {
					String bdate = TPLAdministrationHelper.dateConverter(bgdate);
					tplRecoveryCaseDetailVO.setCaseClaimStopDate(bdate);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    }
			
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStartDate())&& 
					StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStopDate()))
			{
				if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0005(
					tplRecoveryCaseDetailVO.getCaseClaimStartDate(),
					tplRecoveryCaseDetailVO.getCaseClaimStopDate())) 
				{
					validateFlag = false;
				}
			}
			
			//defect id:ESPRD00811213 added the if condition to check  billing history is ther or not
			if(getTPLRecoveryDataBean().getTplBillingHistoryList()!= null && getTPLRecoveryDataBean().getTplBillingHistoryList().size()>0 ){
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTempcaseClaimStartDate())&& 
					StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTempcaseClaimStopDate()))
			{
				if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY00051(
						tplRecoveryCaseDetailVO.getCaseClaimStartDate(),
						tplRecoveryCaseDetailVO.getCaseClaimStopDate(),
						tplRecoveryCaseDetailVO.getTempcaseClaimStartDate(),
						tplRecoveryCaseDetailVO.getTempcaseClaimStopDate())) 
					{
						validateFlag = false;
					}
			}
			}
			//ESPRD00424195
			/*if (TPLRecoveryCommonValidator.validateTPLRCVYADDRCVY0003(
				tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
				tplRecoveryCaseDetailVO.getCaseClaimStartDate())) {
					validateFlag = false;
					
			}*/
			//ESPRD00423608
			if (TPLRecoveryCommonValidator.validateTPLRCVYADDRCVY00003(
					tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType(),
					tplRecoveryCaseDetailVO.getRecoveryCaseServiceAuthVO().getServiceAuthID())) 
			{
				validateFlag = false;
			}
			//TPL0587.0001.01
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStartDate())&& 
					StringUtils.isEmpty(tplRecoveryCaseDetailVO.getCaseClaimStopDate()))
			{
				tplRecoveryCaseDetailVO.setCaseClaimStopDate("12/31/9999");
				/*if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0006(
					tplRecoveryCaseDetailVO.getCaseClaimStartDate(), tplRecoveryCaseDetailVO.getCaseClaimStopDate(), tplRecoveryCaseDetailVO))
				{
					validateFlag = false;
			    }*/
			}
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseEstablishedDate())) 
			{
				if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getCaseEstablishedDate())) 
				{
					validateFlag = false;
				}
				if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseCloseDate())) 
				{
					if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0007(
							tplRecoveryCaseDetailVO.getCaseEstablishedDate()
							,tplRecoveryCaseDetailVO.getCaseCloseDate()))
					{
						validateFlag = false;
					}
				}
			}
			
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseCloseDate()))
            {			
				if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getCaseCloseDate())){
              	     String recoveryDate=tplRecoveryCaseDetailVO.getCaseCloseDate();
              	     getDateFromString(recoveryDate);
	        	}
				else{
					TPLAdministrationHelper.setAddRecoveryInformation(
        	    		TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
        	    		TPLRecoveryCaseConstants.JSP_TPL_CLOSED_RECOVERY_INVALID_DATE);
					validateFlag = false;
             	}
               
                Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getCaseCloseDate());
                try {
						String bdate = TPLAdministrationHelper.dateConverter(bgdate);
						tplRecoveryCaseDetailVO.setCaseCloseDate(bdate);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                       
		    }
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0008(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
					tplRecoveryCaseDetailVO.getRecoveryCaseVO().getLineOfBusiness(),
					tplRecoveryCaseDetailVO.getRecoveryCaseMemberDetailsVO().getMemberID(),
					tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType(),
					tplRecoveryCaseDetailVO.getCaseClaimStartDate(),tplRecoveryCaseDetailVO.getCaseClaimStopDate()))
			{
				validateFlag = false;
			}

			/*if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0010(tplRecoveryCaseDetailVO.getCaseClaimStartDate()))
			{
				validateFlag = false;
			}
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getIncidentDate())) 
			{
				if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getIncidentDate()))
				{
					validateFlag = false;
				}
			}*/
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getIncidentDate()))
            {			
				if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getIncidentDate())){
              	     String recoveryDate=tplRecoveryCaseDetailVO.getIncidentDate();
              	     getDateFromString(recoveryDate);
	        	}else{
        	    	TPLAdministrationHelper.setAddRecoveryInformation(
        	    			TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
        	    			TPLRecoveryCaseConstants.JSP_TPL_RECOVERY_INVALID_DATE);
        		    validateFlag = false;
             	}
                Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getIncidentDate());
                try {
					String bdate = TPLAdministrationHelper.dateConverter(bgdate);
					tplRecoveryCaseDetailVO.setIncidentDate(bdate);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    }
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getIncidentDate()))
			{
				if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0011(
						tplRecoveryCaseDetailVO.getCaseClaimStartDate(),
						tplRecoveryCaseDetailVO.getCaseClaimStopDate(),
						tplRecoveryCaseDetailVO.getIncidentDate()))
				{
					validateFlag = false;
				}
			}
			
			//Infinite defect Resolution :ESPRD00480762
		/*	if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0014(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
					tplRecoveryCaseDetailVO.getCaseincidentType(), tplRecoveryCaseDetailVO.getIncidentDate()))
			{
				validateFlag = false;
				//logger.info("am in 1400000");
			}*/
			
			if(!TPLRecoveryCommonValidator.validateTPLRCVYADDRCVY0004(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus()))
			{
				validateFlag = false;
				//logger.info("am in 1500000");
			}
			/*if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0015(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus())){
					validateFlag = false;
			}*/
			/*if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getSpecialNeedsTrustEstablishedDate())) 
			{
				if (TPLRecoveryCommonValidator.dateValidator(
						tplRecoveryCaseDetailVO.getSpecialNeedsTrustEstablishedDate())) 
				{
					validateFlag = false;
					//logger.info("am in 1600000");
				}
			}*/
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getSpecialNeedsTrustEstablishedDate()))
            {			
				if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getSpecialNeedsTrustEstablishedDate())){
					String recoveryDate=tplRecoveryCaseDetailVO.getSpecialNeedsTrustEstablishedDate();
					getDateFromString(recoveryDate);
	        	}else{
        	    	TPLAdministrationHelper.setAddRecoveryInformation(
        	    			TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
        	    			TPLRecoveryCaseConstants.JSP_TPL_RECOVERY_CASE_ESTABLISHED_DATE);
        	    	validateFlag = false;
             	}
                Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getSpecialNeedsTrustEstablishedDate());
                try {
					String bdate = TPLAdministrationHelper.dateConverter(bgdate);
					tplRecoveryCaseDetailVO.setSpecialNeedsTrustEstablishedDate(bdate);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    }
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0016(tplRecoveryCaseDetailVO.isSpecialNeedsTrust(),
					tplRecoveryCaseDetailVO.getSpecialNeedsTrustEstablishedDate()))
			{
				validateFlag = false;
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYADDRCVY0005(tplRecoveryCaseDetailVO.getWorkingStatusCode(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType()))
			{
				validateFlag = false;
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0019(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType(), 
					tplRecoveryCaseDetailVO.getCaseincidentType(), tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus()))
			{
				validateFlag = false;
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0020(tplRecoveryCaseDetailVO.getIncidentDate(),
					tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType(), tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus()) )
			{
				validateFlag = false;
			}
			
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoveryInterestedPartyVO().getEntityType()))
			{
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0056(tplRecoveryCaseDetailVO.getTplRecoveryInterestedPartyVO().getEntityType(), 
						tplRecoveryCaseDetailVO.getTplRecoveryInterestedPartyVO().getInterestedPartyRepresents(),
						tplRecoveryCaseDetailVO.getTplRecoveryInterestedPartyVO().getInterestedPartyName()))
				{
					validateFlag = false;
				}
			}
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate())) 
			{
				if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate())){
					String recoveryDate=tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate();
	                getDateFromString(recoveryDate);
		        	
		        }else {
				    	TPLAdministrationHelper.setAddRecoveryInformation(
				    			TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
				    			TPLRecoveryCaseConstants.JSP_TPL_RECOVERY_CASE_HEARING_REQUEST_DATE);
				    	validateFlag = false;
				}
				Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate());
                String bdate = TPLAdministrationHelper.dateConverter(bgdate);
                tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().setHearingRequestDate(bdate);
			}
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate()))
			{
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0058(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate(), 
						tplRecoveryCaseDetailVO.getCaseClaimStopDate()))
				{
					validateFlag = false;
				}
			}
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate()))
			{
				if(logger.isDebugEnabled()){
					logger.debug("Rule Validator Method Call:");
				}
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0057(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate(), 
						tplRecoveryCaseDetailVO.getCaseClaimStartDate()))
				{
					validateFlag = false;
				}
			}
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate())) 
			{
				if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate())){
					String recoveryDate=tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate();
	                getDateFromString(recoveryDate);
		        	
		        	}
				    else
				    {
				    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,TPLRecoveryCaseConstants.JSP_TPL_RECOVERY_CASE_HEARING_HELD_DATE);
				    	
					  validateFlag = false;
					 
				    }
				    Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate());
                    String bdate = TPLAdministrationHelper.dateConverter(bgdate);
                    tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().setHearingHeldDate(bdate);
				
			}
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate()))
			{
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0059(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate(), 
						tplRecoveryCaseDetailVO.getCaseClaimStartDate(),tplRecoveryCaseDetailVO.getCaseClaimStopDate()))
				{
					validateFlag = false;
				}
			}
			
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0061(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getLegalStatus(),
					tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getReferenceNumber(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate()) )
			{
				validateFlag = false;
			}
			
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0063(tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getLegalStatus(),
					tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getReferenceNumber(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingRequestDate(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLegalInformationVO().getHearingHeldDate()) )
			{
				validateFlag = false;
			}
			
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0074(getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressLine1(),
					getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressLine2()))	
			{
				validateFlag = false;
			}
			// ESPRD00660975 CR related changes
			if(StringUtils.isNotEmpty(getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerName()))
			{
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0075(getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerName(),
					getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressUsageTypeCode(),
					getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getCityName(),    
			        getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getStateCode(),    
			        getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressLine1(),
			        getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressLine2(),
			        getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getZipCode5()))
				{
					validateFlag = false;
				}
			}
			
			else if(getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressLine1()!=null 
					&& StringUtils.isNotEmpty(getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressLine1().trim()))
            {
            	 if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY00168(getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerName(),
					getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressUsageTypeCode(),
					getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getCityName(),    
			        getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getStateCode(),    
			        getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getAddressLine1(),
			        getTplPolicyDataBean().getPolicyVO().getEmployerVO().getEmployerCommonEntityVO().getAddressVO().getZipCode5()))
                {
            		 validateFlag = false;
                }   
            }
			// ESPRD00660975 CR Related Changes End
			/*if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getAppointmentDate())) 
			{
				//if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getAppointmentDate()))
				if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getAppointmentDate(),"appointmentDate")) 
				{
					validateFlag = false;
					//logger.info("am in 3100000");
				}
			}
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getAppointmentDate()))
			{
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0076(tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getAppointmentDate(), 
					tplRecoveryCaseDetailVO.getCaseClaimStartDate()))
				{
					validateFlag = false;
					//logger.info("am in 3200000");
				}
			}
			*/
			//ESPRD00579566
		if(StringUtils.isNotBlank(tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getAppointmentDate())){
			if(!EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO
					.getTplRecoveryCaseEstateDetailVO().getAppointmentDate())){
					TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
							TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"appointmentDate");
					validateFlag =false; 
			}
			Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO
								.getTplRecoveryCaseEstateDetailVO().getAppointmentDate());
			try {
					String bdate = TPLAdministrationHelper.dateConverter(bgdate);
					tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().setAppointmentDate(bdate);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			//ESPRD00661948
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0076(
					tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getAppointmentDate(), 
					tplRecoveryCaseDetailVO.getCaseClaimStartDate()))
			{
					validateFlag = false;
			}
			//ESPRD00661948
		}
			//ESPRD00579566
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0089(
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienType(),
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienCountyDesc()))
			{
				validateFlag = false;
			}
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDatePlaced())) 
			{
				if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDatePlaced(),"lienDatePlaced")) 
				{
					validateFlag = false;
				}
			/*}
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDatePlaced()))
			{*/
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0090(
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienType(),
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienCountyDesc(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDatePlaced(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getBook(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getPage()))
				{
					validateFlag = false;
				}
			}
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDateRelease()))
			{
				if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDateRelease(),"lienDateRelease")) 
				{
					validateFlag = false;
				}
			/*}
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDateRelease()))
			{*/
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0091(
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienType(),
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienCountyDesc(),
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getLienDateRelease(), 
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getBook(),
					tplRecoveryCaseDetailVO.getRecoveryCaseLienInfoVO().getPage()))
				{
					validateFlag = false;
				}
			}
			/*//Defect: ESPRD00436665: Open Recovery Case is getting saved even when no claim is associated to the Recovery Case
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0021(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
					tplRecoveryCaseDetailVO.getCaseClaimStartDate(), tplRecoveryCaseDetailVO.getCaseClaimStopDate(),
					getTPLRecoveryDataBean().isCheckClaimsEmpty()))
			{
						validateFlag = false;
						//logger.info("am in 3800000");
			}*/
			/*if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryDate()))
			{
				if(TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryDate()))
				{
					validateFlag = false;
					//logger.info("am in 3900000");
				}
			}*/
			/* Defect ESRPD00809882: Commented for Displaying 9-1030-0925 & 9-1030-0930  
			 * When Member Id and Member Type not entered.
			if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0004(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
					tplRecoveryCaseDetailVO.getCaseCloseDate(), tplRecoveryCaseDetailVO.getCaseCloseReason()))
			{
				validateFlag = false;
				//logger.info("am in 4000000");
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0008(tplRecoveryCaseDetailVO.getCaseCloseDate(),
					tplRecoveryCaseDetailVO.getCaseCloseReason()))
			{
				validateFlag = false;
				//logger.info("am in 4100000");
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0118(tplRecoveryCaseDetailVO.getCaseCloseDate(),
					tplRecoveryCaseDetailVO.getCaseCloseReason()))
			{
				validateFlag = false;
				//logger.info("am in 4100000");
			}Defect ESRPD00809882 : End */ 
			/*Commented for the defect #ESPRD00424800
			/*if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0118(tplRecoveryCaseDetailVO.getCaseCloseDate(),
					tplRecoveryCaseDetailVO.getCaseCloseReason())){
						validateFlag = false;
						//logger.info("am in 4100000");
			}*/
			
			Double fixedAmount = new Double(0.0);
			Double recoveryAmount = new Double(0.0);
			String recoveryMethod = tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryMethod();
			String recoveryDate = tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryDate();
			String fcn = tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getFcn();
			String recoveryReason = tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryReason();
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getFixedAmount()))
			{
				fixedAmount = new Double(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getFixedAmount());
			}
			
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryAmount()))
			{
				recoveryAmount = new Double(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryAmount());
			}
			// ESPRD00450126_CR
			if (TPLRecoveryCommonValidator.validateRecAmtandFCN(recoveryReason, recoveryAmount.toString(), fcn))
			{
				validateFlag = false;
			}
			// CR ESPRD00915907
			if(StringUtils.isEmpty(recoveryReason)&&( StringUtils.isNotEmpty(recoveryMethod)
				|| StringUtils.isNotEmpty(fcn) || StringUtils.isNotEmpty(recoveryDate)
		    	|| StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryAmount())
		    	|| StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getFixedAmount()))){
				TPLRecoveryCommonValidator tplRecoveryCommonValidator=new TPLRecoveryCommonValidator();
				if(tplRecoveryCommonValidator.validateTPLRCVRYMNTRCVRYNEW0044(recoveryMethod, 
						tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryAmount(),
						recoveryReason,fcn,TPLRecoveryCaseConstants.TPL_RCVRY_METHOD,recoveryDate,
						tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getFixedAmount())) 
				{
					validateFlag = false;
				}
			}
			if(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO()!= null)
			{
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0029(recoveryMethod,fixedAmount))
				{
					validateFlag = false;
				}
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0032(recoveryMethod,recoveryAmount,fixedAmount))
				{
					validateFlag = false;
				}
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0042(
			    		recoveryMethod, recoveryDate,recoveryAmount.toString(),recoveryReason,fcn)) 
				{
					validateFlag = false;
				}
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0028(
						tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryAmount()
						,recoveryReason,fcn,TPLRecoveryCaseConstants.TPL_RCVRY_METHOD)) 
				{
					validateFlag = false;
				}
				if (StringUtils.isNotEmpty(recoveryDate)) 
				{
					FacesContext facesContext = FacesContext.getCurrentInstance();
					if (TPLRecoveryCommonValidator.dateValidator(facesContext, recoveryDate, "incRecoveryDate")) 
					{
						validateFlag = false;
					}
					else if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0096(recoveryDate, "incRecoveryDate")) 
					{
						validateFlag = false;
					}						
				}
				if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0433(recoveryReason, recoveryDate))
				{
					validateFlag = false;
				}
				
				//Orthodontia
				if ( getTPLRecoveryDataBean().getRemainingInclClmsAmt() < recoveryAmount.doubleValue())
				{
				  if(recoveryReason!=null)
				  {
					if (!recoveryReason.equals("R70"))
					{
						TPLAdministrationHelper.setAddRecoveryInformation(
								TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_OUTSTANDING_BAL_AMT
								,TPLRecoveryCaseConstants.TPL_RCVRY_AMT);
						validateFlag = false;
					}
					else
					{
						if (!tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType().equals(TPLRecoveryCaseConstants.SIX))
						{
							TPLAdministrationHelper.setAddRecoveryInformation(
									TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_OUTSTANDING_BAL_AMT
									,TPLRecoveryCaseConstants.TPL_RCVRY_AMT);
							validateFlag = false;
						}
					}
				   }
				}
				if (StringUtils.isNotBlank(fcn))
				{	
					//CR ESPRD00909402 
					double creditBal = 0;
					List orthoList = getTPLRecoveryDataBean().getTplRecoveryOrthodontiaList();
					if (null != orthoList && orthoList.size()>0)
		    		{
		        		TPLRecoveryCaseOrthodontiaVO rcvryCaseOrthodontiaVO = (TPLRecoveryCaseOrthodontiaVO)orthoList.get(0);
		        		if(rcvryCaseOrthodontiaVO!=null && rcvryCaseOrthodontiaVO.getCreditBalance()>0){
		        			creditBal = rcvryCaseOrthodontiaVO.getCreditBalance();
		        		}
		    		}
					TPLRecoveryDelegate recoveryDelegate = new TPLRecoveryDelegate();
					Object obj;
					try {		
						obj = recoveryDelegate.validateFCN(fcn);
						if(obj != null) 
					    {
							if(!(creditBal>0)){ //CR ESPRD00909402 
								Object[]financialNumber = (Object[])obj;
								if(financialNumber[0] == null) {
									if(recoveryAmount.doubleValue() >0) {
										TPLAdministrationHelper.setAddRecoveryInformation(
												TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_ZERO,
												TPLRecoveryCaseConstants.TPL_RCVRY_FCN);
										validateFlag = false;	
									}					    			
								}
								if(financialNumber[1] == null) {
									TPLAdministrationHelper.setAddRecoveryInformation(
											TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_EXD_BAL, 
											TPLRecoveryCaseConstants.TPL_RCVRY_AMT);
									validateFlag = false;	
								}
								else if((recoveryAmount.doubleValue() > ((BigDecimal)financialNumber[1]).doubleValue()))
								{
									TPLAdministrationHelper.setAddRecoveryInformation(
											TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_EXD_BAL,
											TPLRecoveryCaseConstants.TPL_RCVRY_AMT);
									validateFlag = false;	
								}
							}else {
								//CR ESPRD00909402
								boolean recoveryFlag = true;
								if(getTPLRecoveryDataBean().getRemainingCreditBalance() 
										< recoveryAmount.doubleValue()){    
									TPLAdministrationHelper.setAddRecoveryInformation(
											TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_EXD_BAL,
											TPLRecoveryCaseConstants.TPL_RCVRY_AMT);
									validateFlag = false;
									recoveryFlag = false;
								}else if (recoveryFlag && getTPLRecoveryDataBean()
										.getTempRemainingCreditBalance() < recoveryAmount.doubleValue()){
									TPLAdministrationHelper.setAddRecoveryInformation(
											TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_EXD_BAL,
											TPLRecoveryCaseConstants.TPL_RCVRY_AMT);
									validateFlag = false;
									recoveryFlag = false;
								}
							}
					    }
					    else
					    {
					    	TPLAdministrationHelper.setAddRecoveryInformation(
					    			TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_ZERO,
					    			TPLRecoveryCaseConstants.TPL_RCVRY_FCN);
					    	validateFlag = false;	
					    }
					} 
					catch (TPLRecoveryBusinessException e) 
					{
						e.getErrorCode();
						String message = e.getMessage();
						if("9-1030-0165".equals(message)){
							TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_FCN_RSN_CD_NOT_VALID, "FCN");
						}
						validateFlag = false;
					} 
					catch (RemoteException e) {
						e.printStackTrace();
						validateFlag = false;
					}
					catch (Exception e){
						e.printStackTrace();
						validateFlag = false;
					}
				}
			}
			
			/*if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0012(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus())){
						validateFlag = false;
						//logger.info("am in 4200000");
			}*/
			/*if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0025(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryMethod(),
							tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO())){
						validateFlag = false;	
						logger.info("am in 4300000");
			}*/
			if (null != getTPLRecoveryDataBean().getOriginalCaseStatus()
					&& null != tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus()
					&& getTPLRecoveryDataBean().getOriginalCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE)
					&& !tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE))
			{
				addMessages("Case Status cannot be changed once a case is closed");
				validateFlag = false;	
			}
			//Defect Fix:ESPRD00091778
			if (null != tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus()) 
			{
				if (tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.OPEN)
						|| tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE)) 
				{
					if (getTPLRecoveryDataBean().getOriginalLob() != null) 
					{
						if (!getTPLRecoveryDataBean().getOriginalLob()
								.equalsIgnoreCase(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getLineOfBusiness())) 
						{
							TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_LOB);
							validateFlag = false;
						}
					}
				}
			}
			if (null != getTPLRecoveryDataBean().getOriginalCaseStatus()
					&& null != tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus()
					&& getTPLRecoveryDataBean().getOriginalCaseStatus().equals(TPLRecoveryCaseConstants.OPEN)
					&& tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.PEND))
			{
				TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_STAT_OPEN);
				validateFlag = false;	
			}
			 //CR ESPRD00379117 End 
			//Commented bcz same condition doing in validateTPLRCVYMNTRCVY0028
			/*if (tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO() != null 
					&& StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryAmount())
					&& StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryReason()))
			{
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0717(
						tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryAmount(),
						tplRecoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().getRecoveryReason()))
				{
					validateFlag=false;
				}
			}*/
			if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseOpenDate())) {
				if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getCaseOpenDate())) 
				{
					validateFlag = false;
				}
				//commented for defect ESPRD00480748
				/*if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseCloseDate())) 
				{
					if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0007(tplRecoveryCaseDetailVO.getCaseOpenDate(), tplRecoveryCaseDetailVO.getCaseCloseDate()))
					{
						validateFlag = false;
					}
				}*/
			}
		}
		/*String recoveredAmount=tplRecoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getPreviousRecoveredAmount();
		if (recoveredAmount != null && recoveredAmount.trim().length()>0) 
		{
			double rAmount = Double.parseDouble(recoveredAmount);
			if (rAmount > 0) 
			{
				tplRecoveryCaseDetailVO.getRecoveryCaseVO().setTotalRecovered(rAmount);
				tplRecoveryCaseDetailVO.getRecoveryCaseVO().setPreviousRecovered(rAmount);
			}
		}*/
		//As per defect ESPRD00088943
		if ((null != getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getMemberID() 
				&& null != getTPLRecoveryDataBean().getMemberIdCaseDetail()
				&& !getTPLRecoveryDataBean().getMemberIdCaseDetail().equals(
						getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getMemberID()))
				|| (null != getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getMemberIDType() 
						&& null != getTPLRecoveryDataBean().getMemberIdTypeCaseDetail()
						&& !getTPLRecoveryDataBean().getMemberIdTypeCaseDetail().equals(
								getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getMemberIDType()))) 
		{
				TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_MEMBERID_CANNOT_CHANGE);
				validateFlag = false;
		}
		if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStartDate()) 
				&& StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStopDate())
				&& getTPLRecoveryDataBean().getClaimStartDate() != null 
				&& getTPLRecoveryDataBean().getClaimStopDate() != null
				&& StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus())
				&& tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.OPEN))
    	{
    		Date claimStartDateVO = null;
			Date claimStartDateDO = null;
			Date claimStopDateVO = null;
			Date claimStopDateDO = null;
    		try {
    			claimStartDateVO = dateformatYYYYMMDD.parse(tplRecoveryCaseDetailVO.getCaseClaimStartDate());
    			String claimStartDate = dateformatYYYYMMDD.format(getTPLRecoveryDataBean().getClaimStartDate());
    			claimStartDateDO = dateformatYYYYMMDD.parse(claimStartDate);
    			claimStopDateVO = dateformatYYYYMMDD.parse(tplRecoveryCaseDetailVO.getCaseClaimStopDate());
    			claimStopDateDO = getTPLRecoveryDataBean().getClaimStopDate();
    			String claimStopDate = dateformatYYYYMMDD.format(getTPLRecoveryDataBean().getClaimStopDate());
    			claimStopDateDO = dateformatYYYYMMDD.parse(claimStopDate);
    			if (null != claimStartDateVO && null != claimStartDateDO 
						&& null != claimStopDateVO && null != claimStopDateDO )
    			{
    				if(claimStartDateDO.compareTo(claimStartDateVO)==0 
    						&& claimStopDateDO.compareTo(claimStopDateVO)==0)
    				{
    					getTPLRecoveryDataBean().setMemberAllReadyOpen(true);
    				} else {
    					getTPLRecoveryDataBean().setMemberAllReadyOpen(false);
    				}
    			}
			} catch (ParseException e) {
				e.printStackTrace();
			}
    	}
		if(StringUtils.isNotEmpty("tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryCaseID()")) {
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseCloseDate()) && StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseCloseReason()))
			{
	    		tplRecoveryCaseDetailVO.getRecoveryCaseVO().setCaseStatus(TPLRecoveryCaseConstants.CLOSE);
	    	} else {
	    		getTPLRecoveryDataBean().setMemberAllReadyOpen(false);
	    	}
		}
		//ESPRD00796144  - To set CheckClaimsEmpty variable 		
		List listOfSelectedClaims = getTPLRecoveryDataBean().getTplRecoveryIncludedclaimsList();
		if(listOfSelectedClaims == null) {
			getTPLRecoveryDataBean().setCheckClaimsEmpty(true);
		} else if (listOfSelectedClaims != null && listOfSelectedClaims.isEmpty()) {
			getTPLRecoveryDataBean().setCheckClaimsEmpty(true);
		}else {
			getTPLRecoveryDataBean().setCheckClaimsEmpty(false);							
		}		
		//end
		//ESPRD00436665: Open Recovery Case is getting saved even when no claim is associated to the Recovery Case
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0021(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus(),
				tplRecoveryCaseDetailVO.getCaseClaimStartDate(), tplRecoveryCaseDetailVO.getCaseClaimStopDate(),
				getTPLRecoveryDataBean().isCheckClaimsEmpty(),getTPLRecoveryDataBean()))
		{
			validateFlag = false;
		}
		/**
		 * Aravind - Infinite Defect Implementation - ESPRD00659898 
		 */
		EmployerVO employerVO = getTplPolicyDataBean().getPolicyVO().getEmployerVO();
		EmployerCommonEntityVO employerCommonEntityVO = employerVO.getEmployerCommonEntityVO();		
		String primaryPhoneNumber = employerCommonEntityVO.getPhoneVO().getPhoneNumber();
		if (primaryPhoneNumber != null && !TPLAdministrationConstants.EMPTY.equals(primaryPhoneNumber))
	    {
	    	if(!validatePrimaryPhne(primaryPhoneNumber.trim()))
	        {
	        	if(getTPLRecoveryDataBean().isRecoveryCarrierSaveFlag()==true){
	        		validateFlag = false;
	                setErrorMessage(TPLAdministrationConstants.DATA_INCORRECT,
	                		TPLAdministrationConstants.JSP_POLICY_EMPLOYER_EMPLOYEE_PHONE1);
	        	}else{
	        		validateFlag=false;
	        		setErrorMessage(TPLAdministrationConstants.DATA_INCORRECT,
	        				TPLAdministrationConstants.JSP_POLICY_EMPLOYER_EMPLOYEE_PHONE1);
	        	}
	        	
	        }
	    }
		String primaryEntention = employerCommonEntityVO.getPhoneVO().getPhoneExtension();
        if (primaryEntention != null && !TPLAdministrationConstants.EMPTY.equals(primaryEntention))
        {
            if (!EnterpriseCommonValidator.validateNumeric(primaryEntention.trim()))
            {
            	if(getTPLRecoveryDataBean().isRecoveryCarrierSaveFlag()==true){
            		validateFlag = false;
            		setErrorMessage(TPLAdministrationConstants.PRIMARY_PHONE_EXTENTION_NUMERIC,
                		TPLAdministrationConstants.JSP_POLICY_EMPLOYER_EMPLOYEE_PHONE2);
            	}else{
            		validateFlag = false;
            		 setErrorMessage(TPLAdministrationConstants.PRIMARY_PHONE_EXTENTION_NUMERIC,
            				 TPLAdministrationConstants.JSP_POLICY_EMPLOYER_EMPLOYEE_PHONE2);
            	}
            }
        }//END ESPRD00659898
        if(!validateServiceAuthId()){
        	validateFlag = false;
		}
	  }
		return validateFlag;
	}
	
	 /**
	 * @param value
	 */
	public void valueChangeEventRecoveryType(ValueChangeEvent value) {
        String selectedValue = null;
        selectedValue = (String) value.getNewValue();
        TPLRecoveryDataBean tplBn = getTPLRecoveryDataBean();
        tplBn.setRecoveryTypeSelected(selectedValue);
		if(StringUtils.isEmpty(tplBn.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID()))
		{ 
			if("1".equalsIgnoreCase(selectedValue)){
				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);
				tplBn.setRenderLegalSummary(true);
				tplBn.setRenderSettlementSummary(true);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderSummary(false);
			}
			else  if("2".equalsIgnoreCase(selectedValue))
			{
				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if ("3".equalsIgnoreCase(selectedValue)) {
				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);
				tplBn.setRenderLegalSummary(true);
				tplBn.setRenderSettlementSummary(true);
				tplBn.setRenderEstateDetailSummary(true);
				tplBn.setRenderAssetsLiabilitiesSummary(true);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderSummary(false);
			}
			else if ("4".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);	
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if ("5".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);	 
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if("6".equalsIgnoreCase(selectedValue)){

				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);	
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderServiceAuthInfoSummary(true);
				tplBn.setRenderCarrierPolicySummary(true);
				tplBn.setRenderSummary(false);
			}
			else if ("7".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if ("8".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);	
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if(StringUtils.isEmpty(selectedValue))
			{

				tplBn.setRenderCaseDetailSummary(false);
				tplBn.setRenderMemberInfosummary(false);
				tplBn.setRenderInterestedPartySummary(false);	
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
		}else { 
			if("1".equalsIgnoreCase(selectedValue)){
				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderLegalSummary(true);
				tplBn.setRenderSettlementSummary(true);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderSummary(true);
			}
			else if("2".equalsIgnoreCase(selectedValue))
			{
				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else  if ("3".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderLegalSummary(true);
				tplBn.setRenderSettlementSummary(true);
				tplBn.setRenderEstateDetailSummary(true);
				tplBn.setRenderAssetsLiabilitiesSummary(true);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderSummary(true);
			}
			else if ("4".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if ("5".equalsIgnoreCase(selectedValue)) {
				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if("6".equalsIgnoreCase(selectedValue)){

				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderServiceAuthInfoSummary(true);
				tplBn.setRenderCarrierPolicySummary(true);
				tplBn.setRenderSummary(true);
			}
			else if ("7".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if ("8".equalsIgnoreCase(selectedValue)) {

				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);	
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
			else if(StringUtils.isEmpty(selectedValue))
			{
				tplBn.setRenderCaseDetailSummary(true);
				tplBn.setRenderMemberInfosummary(true);
				tplBn.setRenderInterestedPartySummary(true);
				tplBn.setRenderServiceAuthInfoSummary(false);
				tplBn.setRenderLegalSummary(false);
				tplBn.setRenderSettlementSummary(false);
				tplBn.setRenderEstateDetailSummary(false);
				tplBn.setRenderCarrierPolicySummary(false);
				tplBn.setRenderAssetsLiabilitiesSummary(false);
			}
		}
    }
	
	/*public void getFilterDetails(){
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		boolean validateFlag = true;
		if(TPLRecoveryCommonValidator.validateTPLRCVYADDRCVY0008(tplRecoveryDataBean.recoveryCaseDetailVO.getCaseClaimStartDate(),
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getCaseClaimStopDate())){
			validateFlag = false;
		}
	}*/
	
		/**
		 * @param value
		 */
		public void valueChangeEventRecoveryMethod(ValueChangeEvent value)
		{
			//ESPRD00882601 code modified to enable fields
			String selectedValue = null;
			selectedValue = (String) value.getNewValue();
			//FacesContext.getCurrentInstance().renderResponse();
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setRecoveryTypeSelected(selectedValue);
			if("MA".equalsIgnoreCase(selectedValue)){
				//tplRecoveryDataBean.setRenderRecoveryMethod(true);
				tplRecoveryDataBean.setRenderRcvryMethod(false);
				tplRecoveryDataBean.setDisableRecoveryMethod(true);
				tplRecoveryDataBean.setDisableFixedAmount(true);
			} else if ("FI".equalsIgnoreCase(selectedValue)) {
				tplRecoveryDataBean.setDisableFixedAmount(true);
				tplRecoveryDataBean.setDisableRecoveryMethod(false);
			} else if ("LI".equalsIgnoreCase(selectedValue)) 	{
				tplRecoveryDataBean.setDisableFixedAmount(true);
				tplRecoveryDataBean.setDisableRecoveryMethod(false);
			} else if ("PE".equalsIgnoreCase(selectedValue)) {
				tplRecoveryDataBean.setDisableFixedAmount(true);
				tplRecoveryDataBean.setDisableRecoveryMethod(false);
			} else if ("FX".equalsIgnoreCase(selectedValue)){
				tplRecoveryDataBean.setDisableFixedAmount(false);
				//tplRecoveryDataBean.setRenderRecoveryMethod(false);
				tplRecoveryDataBean.setRenderRcvryMethod(false);
				tplRecoveryDataBean.setDisableRecoveryMethod(false);
			}else {
				tplRecoveryDataBean.setDisableFixedAmount(true);
				tplRecoveryDataBean.setRenderRcvryMethod(false);
				tplRecoveryDataBean.setDisableRecoveryMethod(false);
			}
		}
	
	/**
	 * @param value
	 */
	public void valueChangeEventBillingFreq(ValueChangeEvent value)
	{	
		String selectedValue = null;
        selectedValue = (String) value.getNewValue();
        //FacesContext.getCurrentInstance().renderResponse();
        //Find Bug Fix
        /*HttpServletRequest renderrequest = (HttpServletRequest) FacesContext
        .getCurrentInstance().getExternalContext().getRequest();*/
        TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
        tplRecoveryDataBean.setRecoveryTypeSelected(selectedValue);
        if(tplRecoveryDataBean.isRenderEditBillingInfo())
        {
           	if(!("O".equalsIgnoreCase(selectedValue)))
	        {
	           	tplRecoveryDataBean.setDisableBillingStartDt(true);
	        }
	        else
	        {
	           	tplRecoveryDataBean.setDisableBillingStartDt(false);
	        }		        
        }
	}
	/**
	 * This method is used to display Add Claim Filter page to the user
	 * Interface.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void addClaimFilter() {
		try {

			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("clmfilterfocus");
			TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO = new TPLRecoveryCaseMemberClaimFilterVO();
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.setRecoveryCaseMemberClaimFilterVO(recoveryCaseMemberClaimFilterVO);
			tplRecoveryDataBean.setRenderAddClaimFilterHeader(true);
			tplRecoveryDataBean.setRenderEditClaimFilterHeader(false);
			tplRecoveryDataBean.setRenderEditClaimFilter(false);
			tplRecoveryDataBean.setRenderAddClaimFilter(true);
			tplRecoveryDataBean.setRenderAddClaimFilterSave(true);
			tplRecoveryDataBean.setRenderResultClaimFilter(false);
			tplRecoveryDataBean.setDeleteFilterFlag(false);
			tplRecoveryDataBean.setRenderFilterDate(false);
			tplRecoveryDataBean.setRenderFilterText(false);
			tplRecoveryDataBean.setRenderEditClaimFilterSave(false);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		//return "success";
	}

	/**
	 * This method is used to Update ClaimFilter for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateClaimFilter() 
	{
	  try 
	  {
		 TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		 tplRecoveryDataBean.setFocusThisId("clmfilterfocus");
		 tplRecoveryDataBean.setClaimFilterFlag(false);
		 int currentRecord = tplRecoveryDataBean.getCurrentRecord();
		 List recoveryClaimFilterList = tplRecoveryDataBean.getTplRecoveryClaimFilterList();
		 if (recoveryClaimFilterList.size() > 0) 
		 {
 		    //As per defect ESPRD00089051
			TPLRecoveryCaseMemberClaimFilterVO caseMemberClaimFilterVO = 
					(TPLRecoveryCaseMemberClaimFilterVO)recoveryClaimFilterList.get(currentRecord);
			TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO = new TPLRecoveryCaseMemberClaimFilterVO();
			if(validateClaimFilter())
			{
			   TPLRecoveryCaseMemberClaimFilterVO recvryCaseMemberClaimFiltrVO = tplRecoveryDataBean
					   .getRecoveryCaseDetailVO().getRecoveryCaseMemberClaimFilterVO();
			   if(!caseMemberClaimFilterVO.getFilterType().equalsIgnoreCase(recvryCaseMemberClaimFiltrVO.getFilterType()))
			   {
				   caseMemberClaimFilterVO.setDeletedMemberClaimFilter(true);
				  tplRecoveryDataBean.getDeletedFilters().add(caseMemberClaimFilterVO);
			   }
			   else if(!caseMemberClaimFilterVO.getBeginValue().equalsIgnoreCase(recvryCaseMemberClaimFiltrVO.getBeginValue()))
			   {
				   caseMemberClaimFilterVO.setDeletedMemberClaimFilter(true);
				  tplRecoveryDataBean.getDeletedFilters().add(caseMemberClaimFilterVO);
			   }					
			   //As per defect ESPRD00089051
			   recoveryCaseMemberClaimFilterVO.setVersionNo(caseMemberClaimFilterVO.getVersionNo());	
			   recoveryCaseMemberClaimFilterVO.setFilterType(recvryCaseMemberClaimFiltrVO.getFilterType());
			   if(recvryCaseMemberClaimFiltrVO.getFilterType()!=null &&
					StringUtils.isNotEmpty(recvryCaseMemberClaimFiltrVO.getFilterType()))
			   {
				   recoveryCaseMemberClaimFilterVO.setFilterTypeDesc(
						TPLRecoveryConversionHelper.getSourceCodeDescription(
						getTPLRecoveryDataBean().getFilterTypeList(),recvryCaseMemberClaimFiltrVO.getFilterType()));
			   }
			 //for defect ESPRD00825106
				if(StringUtils.isEmpty(recvryCaseMemberClaimFiltrVO.getEndValue()) && StringUtils.isNotEmpty(recvryCaseMemberClaimFiltrVO.getBeginValue())){
					recvryCaseMemberClaimFiltrVO.setEndValue(recvryCaseMemberClaimFiltrVO.getBeginValue());
				}
			   if(StringUtils.isNotEmpty(recvryCaseMemberClaimFiltrVO.getBeginValue()))
			   {
				 recoveryCaseMemberClaimFilterVO.setBeginValue(recvryCaseMemberClaimFiltrVO.getBeginValue());
			   }
			   if(StringUtils.isNotEmpty(recvryCaseMemberClaimFiltrVO.getEndValue()))
			   {	
				   recoveryCaseMemberClaimFilterVO.setEndValue(recvryCaseMemberClaimFiltrVO.getEndValue());
			   }
			   recoveryCaseMemberClaimFilterVO.setPreviousEndValue(recvryCaseMemberClaimFiltrVO.getPreviousEndValue());
	
			   recoveryClaimFilterList.remove(currentRecord);
			   recoveryClaimFilterList.add(currentRecord, recoveryCaseMemberClaimFilterVO);
			   tplRecoveryDataBean.setRenderResultClaimFilter(true);
			   tplRecoveryDataBean.setClaimFilterFlag(true);
			   tplRecoveryDataBean.setRenderAddClaimFilter(false);
			   tplRecoveryDataBean.setRenderEditClaimFilterSave(true);
			   tplRecoveryDataBean.setRenderEditClaimFilter(true);
			   tplRecoveryDataBean.setEditFilterSaved(false);
			  // setClaimUpdateFlag(true);
			}
		  }
		} 
		catch (Exception e) 
		{
            e.printStackTrace();
		}
		return "success";
	}
	
	
	/**
	 * This method is used to save Response Details.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveResponseDetails() {
		String SUCCESS = "success";
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("responsefocus");
			int currentRecord = tplRecoveryDataBean.getCurrentRecord();
			List responseList = tplRecoveryDataBean.getTplRecoveryResponseList();
			tplRecoveryDataBean.setRenderResultResponse(false);
			if (!responseList.isEmpty()) {
				if(validateResponseDetails()){
					//CR ESPRD00909402
					double creditBalance = 0.0;
					List orthoList = getTPLRecoveryDataBean().getTplRecoveryOrthodontiaList();
					if(orthoList != null && orthoList.size()>0){
						Iterator iterator = orthoList.iterator();
						while (iterator.hasNext()) {
							TPLRecoveryCaseOrthodontiaVO recoveryCaseOrthodontiaVO = (TPLRecoveryCaseOrthodontiaVO)iterator.next();
							creditBalance = recoveryCaseOrthodontiaVO.getCreditBalance();
						}
					}
					tplRecoveryDataBean.setResponseDetailsFlag(true);
					TPLRecoveryCaseResponseVO tplRecoveryCaseResponseVO = new TPLRecoveryCaseResponseVO();
					tplRecoveryCaseResponseVO.setTcn(tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO().getTcn());

					tplRecoveryCaseResponseVO.setVersionNo(tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO().getVersionNo());

					tplRecoveryCaseResponseVO.setLi(tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO().getLi());
					String amount ="";
					double previousRecoveredAmt = 0;
					if(creditBalance>0){
						Iterator respListItr = responseList.iterator();
						while (respListItr.hasNext()){
							TPLRecoveryCaseResponseVO tempResponseVO =(TPLRecoveryCaseResponseVO)respListItr.next();
							if(tempResponseVO.getTcn().equalsIgnoreCase(tplRecoveryCaseResponseVO.getTcn())
									&& tempResponseVO.getLi().equals(tplRecoveryCaseResponseVO.getLi())){
								amount = tempResponseVO.getRecoveryAmount();
								if (StringUtils.isNotEmpty(amount) && (new Double(amount).doubleValue() > 0)){
									previousRecoveredAmt = new Double(amount).doubleValue();
								}
							}
						}
					}

					tplRecoveryCaseResponseVO.setRecoveryDate(tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO().getRecoveryDate());

					if (StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO()
							.getRecoveryCaseResponseVO().getRecoveryAmount())
						 && tplRecoveryDataBean.getRecoveryCaseDetailVO()
							.getRecoveryCaseResponseVO().getRecoveryAmount() != null)
					{
						//CR ESPRD00909402
						double balance = tplRecoveryDataBean.getTempRemainingCreditBalance();
						double recoveryAmount = new Double(tplRecoveryDataBean.getRecoveryCaseDetailVO()
								.getRecoveryCaseResponseVO().getRecoveryAmount()).doubleValue();
						tplRecoveryCaseResponseVO.setDollarFlag(true);
						if(creditBalance>0){
							if(previousRecoveredAmt <=0){
								tplRecoveryCaseResponseVO.setRecoveryAmount(decimalValue(recoveryAmount));
								tplRecoveryCaseResponseVO.setRecoveryAmountStr(decimalValue(recoveryAmount));
								balance = (balance - recoveryAmount); 
							}else{
								if (previousRecoveredAmt > recoveryAmount){
									previousRecoveredAmt = (previousRecoveredAmt - recoveryAmount);
									balance = balance + previousRecoveredAmt;
								}else if (previousRecoveredAmt < recoveryAmount){
									previousRecoveredAmt = (recoveryAmount - previousRecoveredAmt);
									balance = (balance - previousRecoveredAmt);
								}
								tplRecoveryCaseResponseVO.setRecoveryAmount(decimalValue(recoveryAmount));
								tplRecoveryCaseResponseVO.setRecoveryAmountStr(decimalValue(recoveryAmount));
							}
							tplRecoveryDataBean.setTempRemainingCreditBalance(balance);
						} else {
							tplRecoveryCaseResponseVO.setRecoveryAmount(decimalValue(recoveryAmount));
							tplRecoveryCaseResponseVO.setRecoveryAmountStr(decimalValue(recoveryAmount));
						}
					}
					tplRecoveryCaseResponseVO.setRecoveryReason(tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO().getRecoveryReason());
					tplRecoveryCaseResponseVO.setAuditUserID(GlobUserID);
					tplRecoveryCaseResponseVO.setAddedAuditUserID(GlobUserID);
					tplRecoveryCaseResponseVO.setAddedAuditTimeStamp(new Date());
					tplRecoveryCaseResponseVO.setAuditTimeStamp(new Date());
					List reasonCodeList = tplRecoveryDataBean.getRecoveryReasonList();				
					if (null != reasonCodeList)
					{
						Iterator iterator = reasonCodeList.iterator();
						while (iterator.hasNext()) {
							SelectItem element = (SelectItem) iterator.next();
							if (null != tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO()
									.getRecoveryReason() && null != element.getValue() &&
									tplRecoveryDataBean.getRecoveryCaseDetailVO()
									.getRecoveryCaseResponseVO().getRecoveryReason().equals(element.getValue()))
							{
								tplRecoveryCaseResponseVO.setRecoveryReasonWithDesc(element.getValue()+"-"+element.getDescription());
								break;
							}
						}
					}
					tplRecoveryCaseResponseVO.setFcn(tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO().getFcn());

					tplRecoveryCaseResponseVO.setCaseUserID(tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID());

					responseList.remove(currentRecord);
					responseList.add(currentRecord, tplRecoveryCaseResponseVO);
					tplRecoveryDataBean.setTplRecoveryResponseList(responseList);
					tplRecoveryDataBean.getUpdatedResponseList().add(tplRecoveryCaseResponseVO);
					tplRecoveryDataBean.setRenderResultResponse(true);
					tplRecoveryDataBean.setRecoveryEditResponseFlag(true);
					tplRecoveryDataBean.setRenderEditResponse(true); //ESPRD00853186
					tplRecoveryDataBean.setSaveResponseDetails(false);//ESPRD00853186
					tplRecoveryDataBean.setFocusThisId("responseSaveFocus"); //ESPRD00853186
				}
			}

		} catch (Exception e) {
			addMessages(e.getMessage());
			if(logger.isDebugEnabled()){
				logger.debug("Exception ", e);
			}
		}

		return SUCCESS;
	}
	
	/**
	 * @return
	 */
	public boolean validateResponseDetails(){
		TPLRecoveryCaseDetailVO tplRecoveryCaseDetailVO =  getTPLRecoveryDataBean().getRecoveryCaseDetailVO();
		boolean validateFlag = true;
		if (tplRecoveryCaseDetailVO.getRecoveryCaseVO().getCaseStatus().equals(TPLRecoveryCaseConstants.PEND))
		{
			addMessages("Payments can only be posted to an open Recovery Case");
			validateFlag = false;
		}
		if(validateFlag){
			 //CR ESPRD00915907
			if(StringUtils.isEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryReason())
				|| StringUtils.isEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getFcn()) 
				|| StringUtils.isEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryDate())
		    	|| StringUtils.isEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount())){
				TPLRecoveryCommonValidator tplRecoveryCommonValidator=new TPLRecoveryCommonValidator();
				if(tplRecoveryCommonValidator.validateTPLRCVRYMNTRCVRYNEW0044(null, 
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount(),
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryReason(),
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getFcn(),
						TPLRecoveryCaseConstants.TPL_RCVRY_RESP,
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryDate(),
						null)) 
				{
					validateFlag = false;
				}
			}
			if (StringUtils.isEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryDate()))
			{
				String recoveryDate = dateformatYYYYMMDD.format(new Date());
				tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().setRecoveryDate(recoveryDate);
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYUPDTRCVY0019(
					tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryReason(),
					tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryDate())){
				validateFlag = false;
			}
			// Defect ESPRD00684376
			if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryDate())){
				String recoveryDate= tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryDate();
				if(EnterpriseCommonValidator.validateDate(recoveryDate)){ //ESPRD00874573
					Date bgdate = TPLRecoveryCommonValidator.dateConverter(recoveryDate);
					tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().setRecoveryDate(TPLAdministrationHelper.dateConverter(bgdate));
					if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0096(tplRecoveryCaseDetailVO
							.getRecoveryCaseResponseVO().getRecoveryDate(), TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_DATE)) {
						validateFlag = false;
					}
				}else{
					TPLAdministrationHelper.setAddRecoveryInformation(
							TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
							TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_DATE);
					validateFlag = false;
				}
			}
			//defect ESPRD00092259
			String recoveryAmount = tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount();
			if(StringUtils.isEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount())){
				recoveryAmount = "0.0";
			}	
			boolean recoveryFlag=true;
			// Defect ESPRD00684376
			if(TPLRecoveryCommonValidator.validateTPLRCVNumeric(recoveryAmount,
					TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_AMT))
			{
				//Start CR ESPRD00909402
				double creditBal = 0;
				List orthoList = getTPLRecoveryDataBean().getTplRecoveryOrthodontiaList();
				if(orthoList!=null && orthoList.size()>0){
					TPLRecoveryCaseOrthodontiaVO rcvryCaseOrthodontiaVO = (TPLRecoveryCaseOrthodontiaVO)orthoList.get(0);
					if(rcvryCaseOrthodontiaVO!=null && rcvryCaseOrthodontiaVO.getCreditBalance()>0){
						creditBal = rcvryCaseOrthodontiaVO.getCreditBalance();
					}
				}
				//End CR ESPRD00909402
				if (tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount() != null && 
						StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount()))
				{
					//CR ESPRD00909402 modified includedClaimsTotal to remainingInclClmsTotal
					if (getTPLRecoveryDataBean().getRemainingInclClmsAmt() < new Double(
							tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount()).doubleValue())
					{
						TPLAdministrationHelper.setAddRecoveryInformation(
								TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_OUTSTANDING_BAL_AMT, 
								TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_AMT);
						validateFlag = false;
						recoveryFlag=false;
					}
				}
				//defect ESPRD00385210
				if (tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount() != null && 
						StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount()) &&
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getClaimLineRecoveryAmount() != null && 
						StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getClaimLineRecoveryAmount().toString()))
				{
					if (new Double(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount()).doubleValue() > 
					tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getClaimLineRecoveryAmount().doubleValue()&& recoveryFlag )
					{
						TPLAdministrationHelper.setAddRecoveryInformation(
								TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_OUTSTANDING_BAL_AMT, 
								TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_AMT);
						validateFlag = false;
						recoveryFlag=false;
					}
					//Start CR ESPRD00909402 
					if("6".equals(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType()) &&	creditBal>0 ){
						if (recoveryFlag && getTPLRecoveryDataBean().getRemainingCreditBalance() < 
								tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getClaimLineRecoveryAmount().doubleValue())
						{
							TPLAdministrationHelper.setAddRecoveryInformation(
									TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_OUTSTANDING_BAL_AMT, 
									TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_AMT);
							validateFlag = false;
							recoveryFlag=false;
						}else if (recoveryFlag && getTPLRecoveryDataBean().getTempRemainingCreditBalance() < 
								tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getClaimLineRecoveryAmount().doubleValue()) {
							TPLAdministrationHelper.setAddRecoveryInformation(
									TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_OUTSTANDING_BAL_AMT, 
									TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_AMT);
							validateFlag = false;
							recoveryFlag=false;		
						}
					}
					orthoList =  null;
					//END CR ESPRD00909402
				}
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0028(
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount(),
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryReason(), 
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getFcn(),
						TPLRecoveryCaseConstants.TPL_RCVRY_RESP)) {
					validateFlag = false;
				}
				//Commented and added in validateTPLRCVYMNTRCVY0028
				/*if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0043(
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryReason(), 
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryAmount(),
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getFcn())){
					validateFlag = false;
				}*/
				//Commented due to same validation doing in validateTPLRCVYMNTRCVY0028
				/*if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0717(
						recoveryAmount,tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryReason())){
					validateFlag=false;
				}*/
				if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY4320(recoveryAmount,tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getRecoveryReason(),
						tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getFcn()))
				{
					validateFlag=false;
				} else {
					//Start CR ESPRD00909402 
					if (StringUtils.isNotBlank(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getFcn()))
					{	
						TPLRecoveryDelegate recoveryDelegate = new TPLRecoveryDelegate();
						Object obj;
						try {		
							obj = recoveryDelegate.validateFCN(tplRecoveryCaseDetailVO.getRecoveryCaseResponseVO().getFcn());
							if(obj != null) 
							{
								if(!(creditBal>0)){ //CR ESPRD00909402
									double recoveryAmt = new Double(recoveryAmount).doubleValue();
									Object[]financialNumber = (Object[])obj;
									if(financialNumber[0] == null) {
										if(recoveryAmt >0 ) {
											TPLAdministrationHelper.setAddRecoveryInformation(
													TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_ZERO,
													TPLRecoveryCaseConstants.TPL_RCVRY_RESP_FCN);
											validateFlag = false;	
										}					    			
									}
									if(financialNumber[1] == null) {
										TPLAdministrationHelper.setAddRecoveryInformation(
												TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_EXD_BAL, 
												TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_AMT);
										validateFlag = false;	
									}
									else if((recoveryAmt > ((BigDecimal)financialNumber[1]).doubleValue()))
									{
										TPLAdministrationHelper.setAddRecoveryInformation(
												TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_EXD_BAL,
												TPLRecoveryCaseConstants.TPL_RCVRY_RESP_RCVRY_AMT);
										validateFlag = false;	
									}
								}
							} else {
								TPLAdministrationHelper.setAddRecoveryInformation(
										TPLRecoveryCaseConstants.TPL_RECOVERY_AMT_GRT_ZERO,
										TPLRecoveryCaseConstants.TPL_RCVRY_RESP_FCN);
								validateFlag = false;	
							}
						} 
						catch (TPLRecoveryBusinessException e) 
						{
							e.getErrorCode();
							String message = e.getMessage();
							if("9-1030-0165".equals(message)){
								TPLAdministrationHelper.setAddRecoveryInformation(
										TPLRecoveryCaseConstants.TPL_RECOVERY_FCN_RSN_CD_NOT_VALID, 
										TPLRecoveryCaseConstants.TPL_RCVRY_RESP_FCN);
							}
							validateFlag = false;
						} 
						catch (RemoteException e) {
							e.printStackTrace();
							validateFlag = false;
						}
						catch (Exception e){
							e.printStackTrace();
							validateFlag = false;
						}
					}
				}
				//End CR ESPRD00909402 
			} else{
				validateFlag=false;	
			}
		}
		return validateFlag;
	}

	 /**
     * @param value ValueChangeEvent
     */
	public void valueChangeEventEntityType(ValueChangeEvent value)
	{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		//TPLRecoveryCaseDetailVO caseDetailVO = tplRecoveryDataBean.getRecoveryCaseDetailVO(); Find Bug Fix
		//TPLRecoveryCaseBillingInformationVO billingInformationVO = caseDetailVO.getRecoveryBillingVO(); Find Bug Fix
		String selectedValue = (String) value.getNewValue();
		if (selectedValue.equalsIgnoreCase("M")) 
		{
			tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getMemberIDTypeList());
			tplRecoveryDataBean.setRenderEntity(true);
			tplRecoveryDataBean.setRenderEntitySE(false);
		}
		else
		if (selectedValue.equalsIgnoreCase("P"))
		{
			tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getProviderIDList());
			tplRecoveryDataBean.setRenderEntity(true);
			tplRecoveryDataBean.setRenderEntitySE(false);
		}
		else
			if (selectedValue.equalsIgnoreCase("TC"))
			{
				tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getCarrierIDTypeList());
				tplRecoveryDataBean.setRenderEntity(true);
				tplRecoveryDataBean.setRenderEntitySE(false);
			}
		else
		   if (selectedValue.equalsIgnoreCase("TP"))
			{
			    tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getPolicyholderTypeList());
			 	tplRecoveryDataBean.setRenderEntity(true);
				tplRecoveryDataBean.setRenderEntitySE(false);
		    }
	    else
		   if (selectedValue.equalsIgnoreCase("TE"))
	       {
	 		    tplRecoveryDataBean.setEntityIdTypeList(tplRecoveryDataBean.getEmployerIDTypeList());
			    tplRecoveryDataBean.setRenderEntity(true);
				tplRecoveryDataBean.setRenderEntitySE(false);
			}
			else
			{
				tplRecoveryDataBean.setRenderEntity(false);
				tplRecoveryDataBean.setRenderEntitySE(true);
			}
	}
	/**
	 * This method is used to save the claim filter to filter Claims from Claim
	 * history.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveClaimFilter() 
	{
	  try 
	  {
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("clmfilterfocus");
		tplRecoveryDataBean.setClaimFilterFlag(false);
		tplRecoveryDataBean.setAddClaimFlag(true);
		List list = tplRecoveryDataBean.getTplRecoveryClaimFilterList();
		if(list == null)
		{
			list = new ArrayList();
		}

		TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO = new TPLRecoveryCaseMemberClaimFilterVO();
			
		if(validateClaimFilter()){
			TPLRecoveryCaseMemberClaimFilterVO recvryCaseMemberClaimFltrVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberClaimFilterVO();
			
					     HtmlSelectOneMenu filterType = null;
			             UIComponent UiComponent = findComponentInRoot("filterTypeValue_edit");
					        filterType = (HtmlSelectOneMenu) UiComponent;
					      if(null!=recvryCaseMemberClaimFltrVO.getFilterType()&& !recvryCaseMemberClaimFltrVO.getFilterType().isEmpty()){
					    	  filterType.setValue(recoveryCaseMemberClaimFilterVO.getFilterType());
					        	recoveryCaseMemberClaimFilterVO.setFilterType(filterType.getValue().toString());
					      }
			//recoveryCaseMemberClaimFilterVO.setFilterType(recvryCaseMemberClaimFltrVO.getFilterType());
			if(recvryCaseMemberClaimFltrVO.getFilterType() !=null &&
				StringUtils.isNotEmpty(recvryCaseMemberClaimFltrVO.getFilterType()))
			{
			   recoveryCaseMemberClaimFilterVO.setFilterTypeDesc(
					 TPLRecoveryConversionHelper.getSourceCodeDescription
					 (getTPLRecoveryDataBean().getFilterTypeList(),recvryCaseMemberClaimFltrVO.getFilterType()));
			}			
			//for defect ESPRD00825106
			if(StringUtils.isEmpty(recvryCaseMemberClaimFltrVO.getEndValue()) && StringUtils.isNotEmpty(recvryCaseMemberClaimFltrVO.getBeginValue())){
				recvryCaseMemberClaimFltrVO.setEndValue(recvryCaseMemberClaimFltrVO.getBeginValue());
			}
			//SimpleDateFormat dateFormatTo = new SimpleDateFormat("MM/dd/yyyy");
			if(StringUtils.equalsIgnoreCase(recvryCaseMemberClaimFltrVO.getFilterType(),"I"))
			{
			  if(StringUtils.isNotEmpty(recvryCaseMemberClaimFltrVO.getBeginValue()))
			  {
				  
				  recoveryCaseMemberClaimFilterVO.setBeginValue(recvryCaseMemberClaimFltrVO.getBeginValue());
			  }
			  if(StringUtils.isNotEmpty(recvryCaseMemberClaimFltrVO.getEndValue()))
			  {  
			    recoveryCaseMemberClaimFilterVO.setEndValue(recvryCaseMemberClaimFltrVO.getEndValue());
			  }
			}
			else
			{
			  if(StringUtils.isNotEmpty(recvryCaseMemberClaimFltrVO.getBeginValue()))
			  {	
			    recoveryCaseMemberClaimFilterVO.setBeginValue(recvryCaseMemberClaimFltrVO.getBeginValue());
			  }
			  if(StringUtils.isNotEmpty(recvryCaseMemberClaimFltrVO.getEndValue()))
			  { 
			   recoveryCaseMemberClaimFilterVO.setEndValue(recvryCaseMemberClaimFltrVO.getEndValue());
			  }
			}
			list.add(recoveryCaseMemberClaimFilterVO);
			tplRecoveryDataBean.setTplRecoveryClaimFilterList(list);
			tplRecoveryDataBean.setRenderAddClaimFilter(false);
			tplRecoveryDataBean.setRenderEditClaimFilter(true);
			tplRecoveryDataBean.setRenderEditClaimFilterHeader(true);
			tplRecoveryDataBean.setRenderEditClaimFilterSave(true);
			tplRecoveryDataBean.setClaimFilterFlag(true);
			tplRecoveryDataBean.setRenderResultClaimFilter(true);
			tplRecoveryDataBean.setEditFilterSaved(false);
			 tplRecoveryDataBean.setCurrentRecord(0);
		}
	  } catch (Exception e) {
			e.printStackTrace();
	  }
		return "success";

	}
	
	/**
	 * @return
	 */
	public boolean validateClaimFilter()
	{
	  boolean validateFlag = true;
	  TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
	  TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO = 
			tplRecoveryDataBean	.getRecoveryCaseDetailVO().getRecoveryCaseMemberClaimFilterVO();
	  String beginValue = recoveryCaseMemberClaimFilterVO.getBeginValue();
	  String endValue = recoveryCaseMemberClaimFilterVO.getEndValue();
	  String filterType = recoveryCaseMemberClaimFilterVO.getFilterType();
	  if(StringUtils.isEmpty(filterType))
	  {
		 if(tplRecoveryDataBean.isRenderAddClaimFilter()
		   && !tplRecoveryDataBean.isRenderEditClaimFilter())
		 { 
		  TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RCVRY_FILTER_REQ,"TPLADMOLL393");
		 }
		 else if(!tplRecoveryDataBean.isRenderAddClaimFilter()
				 && tplRecoveryDataBean.isRenderEditClaimFilter())
		  {
			 TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RCVRY_FILTER_REQ,"TPLADMOLL394"); 
		  }
		  validateFlag = false;
	  }
	  else
	  {
		if("I".equalsIgnoreCase(filterType))
		{
			if (StringUtils.isNotEmpty(beginValue)) 
			{
				if (!EnterpriseCommonValidator.validateDate(beginValue)) 
				{
				  if(tplRecoveryDataBean.isRenderAddClaimFilter()
					 && !tplRecoveryDataBean.isRenderEditClaimFilter())
				  {
					TPLAdministrationHelper.setAddRecoveryInformation(
							TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_FILTER_TYPE_DATE,"TPLADMTOMOL143");
				  }
				  else if(!tplRecoveryDataBean.isRenderAddClaimFilter()
						 && tplRecoveryDataBean.isRenderEditClaimFilter())
				  {
					  TPLAdministrationHelper.setAddRecoveryInformation(
								TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_FILTER_TYPE_DATE,"TPLADMTOMOL148"); 
				  }
					validateFlag = false;
				}
			}
			if (validateFlag && StringUtils.isNotEmpty(endValue)) 
			{
				if (!EnterpriseCommonValidator.validateDate(endValue)) 
				{ 
				  if(tplRecoveryDataBean.isRenderAddClaimFilter()
					  && !tplRecoveryDataBean.isRenderEditClaimFilter())
				  {
					TPLAdministrationHelper.setAddRecoveryInformation(
							TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_FILTER_TYPE_DATE,"TPLADMTOMOL144");
				  }
				  else if(!tplRecoveryDataBean.isRenderAddClaimFilter()
						  && tplRecoveryDataBean.isRenderEditClaimFilter())
				  {
					  TPLAdministrationHelper.setAddRecoveryInformation(
						   TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_FILTER_TYPE_DATE,"TPLADMTOMOL149");
				  }
					validateFlag = false;
				}
			}
			if (validateFlag && StringUtils.isNotEmpty(beginValue) && StringUtils.isNotEmpty(endValue)) 
			{
				if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0039(
						beginValue, endValue)) 
				{
					validateFlag = false;
				}
			}
		}
		else
		{
			if (StringUtils.isNotEmpty(beginValue) && StringUtils.isNotEmpty(endValue)) {

				if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0040(tplRecoveryDataBean,filterType,beginValue, endValue)) 
				{
					validateFlag = false;
				}

	    		if (EnterpriseCommonValidator.validateDate(beginValue) || 
	    				EnterpriseCommonValidator.validateDate(endValue))
	    		{
	    			//for defect ESPRD00459256
	    			//addMessages("Can not have dates for this claim type.");
	    			addMessages("Filter value of Date is only Allowed for Filter Type of Date.");
	    			validateFlag = false;
	    		}
			}
			if (StringUtils.isEmpty(beginValue) && StringUtils.isNotEmpty(endValue)) {

				TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RECOVERY_CASE_MEMBERCLAIMS_FILTER_BEGIN);
				validateFlag = false;
			}
			if (StringUtils.isEmpty(beginValue))
			{
				TPLAdministrationHelper.setAddRecoveryInfoMessage();
				validateFlag = false;
			}
			/*if (StringUtils.isNotEmpty(beginValue) || StringUtils.isNotEmpty(endValue))
			{
				if (!filterCharCheck(beginValue) || !filterCharCheck(endValue))
				{
					validateFlag = false;
				}
			}*/
		}
		if (filterType.equalsIgnoreCase("I"))
		{
			List claimFilterList=new ArrayList();
			if(tplRecoveryDataBean.getTplRecoveryClaimFilterList()!=null
				&& !tplRecoveryDataBean.getTplRecoveryClaimFilterList().isEmpty())
				
			claimFilterList.addAll(tplRecoveryDataBean.getTplRecoveryClaimFilterList());
			if(tplRecoveryDataBean.isRenderEditClaimFilter())
			{
				claimFilterList.remove(tplRecoveryDataBean.getCurrentRecord());
			}
			
			if (claimFilterList != null && claimFilterList.size() > 0)
			{
				if(StringUtils.isNotEmpty(beginValue) && StringUtils.isNotEmpty(endValue))
				{
					Iterator filterItr = claimFilterList.iterator();
					boolean dupFlag = false;
					while(filterItr.hasNext())
					{
						TPLRecoveryCaseMemberClaimFilterVO claimFilterVO = (TPLRecoveryCaseMemberClaimFilterVO) filterItr.next();
						if(claimFilterVO != null)
						{
							if (claimFilterVO.getFilterType().equalsIgnoreCase("I"))
							{
								try 
								{
									Date presBDate = dateformatYYYYMMDD.parse(beginValue);
									Date presEDate = dateformatYYYYMMDD.parse(endValue);
									Date prevBDate = dateformatYYYYMMDD.parse(claimFilterVO.getBeginValue());
									Date prevEDate = dateformatYYYYMMDD.parse(claimFilterVO.getEndValue());
									if (((presBDate.after(prevBDate) && presBDate.before(prevEDate))  
											|| (presEDate.after(prevBDate) && presEDate.before(prevEDate)))
											|| ((prevBDate.after(presBDate) && prevBDate.before(presEDate)) 
											|| (prevEDate.after(presBDate) && prevEDate.before(presEDate)))
											|| (presEDate.after(prevBDate) && presEDate.before(prevEDate)))
									{
										dupFlag = true;
									}
									if(presBDate.compareTo(prevBDate) == 0 || presEDate.compareTo(prevEDate) == 0
											|| presBDate.compareTo(prevEDate) == 0 || presEDate.compareTo(prevBDate) == 0
											|| prevBDate.compareTo(presBDate) == 0 || prevEDate.compareTo(presEDate) == 0
											|| prevBDate.compareTo(presEDate) == 0 || prevEDate.compareTo(presBDate) == 0)
									{										
										dupFlag = true;
									}
								}
								catch(ParseException pe)
								{
									if(logger.isDebugEnabled()){
										logger.debug(pe);
									}
								}								
							}
						}
					}
					if(dupFlag)
					{
						TPLAdministrationHelper.addErrorMessageFromPassesArgs(
								TPLRecoveryCaseConstants.TPL_RCVRY_CLAIM_FILTER_OVERLAP_CHECK,TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,
								new String[] {filterType}, null);
						validateFlag = false;																					
					}
				}
			}
		}
		else if (validatClaimeForOverlapping())
		{
			TPLAdministrationHelper.addErrorMessageFromPassesArgs(
					TPLRecoveryCaseConstants.TPL_RCVRY_CLAIM_FILTER_OVERLAP_CHECK,TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,
					new String[] {filterType}, null);
			validateFlag = false;
		}
	  }
	    tplRecoveryDataBean.setRenderResultClaimFilter(false);
		return validateFlag;
	}
	
	/**
	 * This method is used to Update Included Claims for the recovery case.
	 * 
	 * @return SUCCESS
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateIncludedClaims() {
		String SUCCESS = "success";
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("includeclaimsfocus");
		try {
			int currentRecord = tplRecoveryDataBean.getCurrentRecord();
			List recoverySettlementList = tplRecoveryDataBean.getTplRecoveryIncludedclaimsList();
			//for defect DEFECT_TPL_ESPRD00793808_300512
			TPLRecoveryCaseIncludedClaimsVO recoveryCaseDetailVO;			
			TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO;
			if (!recoverySettlementList.isEmpty()) {
				recoveryCaseDetailVO = new TPLRecoveryCaseIncludedClaimsVO();				
				tplRecoveryCaseIncludedClaimsVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseIncludedClaimsVO();			
				
				 if( StringUtils.isNotEmpty(tplRecoveryCaseIncludedClaimsVO.getReqAmountStr() )){
					 	DecimalFormat decimalFrmt = new DecimalFormat("#.##");						 					 	
						tplRecoveryCaseIncludedClaimsVO.setReqAmount(Double.parseDouble(decimalFrmt.format( 
								Double.parseDouble(tplRecoveryCaseIncludedClaimsVO.getReqAmountStr()))));
						tplRecoveryCaseIncludedClaimsVO.setReqAmountStr(decimalFrmt.format(
								Double.parseDouble(tplRecoveryCaseIncludedClaimsVO.getReqAmountStr())));						
				 }else{					
						tplRecoveryCaseIncludedClaimsVO.setReqAmount(0.0d);
						tplRecoveryCaseIncludedClaimsVO.setReqAmountStr("0.0");
					}	
			}
			//end
			if(validateIncludedClaims()){
				tplRecoveryDataBean.setIncludedClaimsFlag(true);
			if (!recoverySettlementList.isEmpty()) {
				
				recoveryCaseDetailVO = new TPLRecoveryCaseIncludedClaimsVO();				
				tplRecoveryCaseIncludedClaimsVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseIncludedClaimsVO();
				
				recoveryCaseDetailVO.setTcn(tplRecoveryCaseIncludedClaimsVO.getTcn());
				recoveryCaseDetailVO.setLi(tplRecoveryCaseIncludedClaimsVO.getLi());
				recoveryCaseDetailVO.setFdos(tplRecoveryCaseIncludedClaimsVO.getFdos());
				recoveryCaseDetailVO.setClaimType(tplRecoveryCaseIncludedClaimsVO.getClaimType());
				//Added for defect : ESPRD00799598
				recoveryCaseDetailVO.setClaimTypeDesc(tplRecoveryCaseIncludedClaimsVO.getClaimTypeDesc());
				//end
				recoveryCaseDetailVO.setReplacementReason(tplRecoveryCaseIncludedClaimsVO.getReplacementReason());
				recoveryCaseDetailVO.setProviderChargedAmount(
									  tplRecoveryCaseIncludedClaimsVO.getProviderChargedAmount());
				recoveryCaseDetailVO.setProviderChargedAmountStr(
							decimalValue(tplRecoveryCaseIncludedClaimsVO.getProviderChargedAmount()));
				recoveryCaseDetailVO.setReimbursementAmount(
						    tplRecoveryCaseIncludedClaimsVO.getReimbursementAmount());
				recoveryCaseDetailVO.setReimbursementAmountStr(
						   decimalValue(tplRecoveryCaseIncludedClaimsVO.getReimbursementAmount()));
				recoveryCaseDetailVO.setReqAmount(tplRecoveryCaseIncludedClaimsVO.getReqAmount());
				recoveryCaseDetailVO.setReqAmountStr(decimalValue(tplRecoveryCaseIncludedClaimsVO.getReqAmount()));
				recoveryCaseDetailVO.setTplRecoveredAmount(tplRecoveryCaseIncludedClaimsVO.getTplRecoveredAmount());
				recoveryCaseDetailVO.setTplRecoveredAmountStr(
						decimalValue(tplRecoveryCaseIncludedClaimsVO.getTplRecoveredAmount()));
				recoveryCaseDetailVO.setExcludeIndicator(tplRecoveryCaseIncludedClaimsVO.isExcludeIndicator());
				recoveryCaseDetailVO.setExcludeReason(tplRecoveryCaseIncludedClaimsVO.getExcludeReason());
				recoveryCaseDetailVO.setSysId(tplRecoveryCaseIncludedClaimsVO.getSysId());
				recoveryCaseDetailVO.setVersionNo(tplRecoveryCaseIncludedClaimsVO.getVersionNo());
				recoverySettlementList.remove(currentRecord);
				recoverySettlementList.add(currentRecord,recoveryCaseDetailVO);
				tplRecoveryDataBean.getModifiedInclClmsList().add(recoveryCaseDetailVO);
				//save flag
				tplRecoveryDataBean.setRecoveryEditClaimDetailsFlag(true);
				//Infinite Defect Resolution:ESPRD00488946
				tplRecoveryDataBean.setRenderIncludeClaim(true);
				//Infinite Defect Resolution :ESPRD00489413
				tplRecoveryDataBean.setShowSuccess(true); 
				}
			}
		} catch (Exception e) {

        	e.printStackTrace();
		}
		tplRecoveryDataBean.setRecoveryEditClaimDetailsFlag(true);
		return SUCCESS;
	}
	
	/**
	 * @return
	 */
	public boolean validateIncludedClaims(){
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		boolean validateFlag = true;
		
		Double reqAmount = new Double(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseIncludedClaimsVO().getReqAmount());
		Double reimbursementAmount = new Double(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseIncludedClaimsVO().getReimbursementAmount());
		
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0052(reqAmount,reimbursementAmount)){
			validateFlag = false;
		}
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0053(tplRecoveryDataBean.getRecoveryCaseDetailVO()
				.getRecoveryCaseIncludedClaimsVO().isExcludeIndicator(), tplRecoveryDataBean.getRecoveryCaseDetailVO().
				getRecoveryCaseIncludedClaimsVO().getExcludeReason())){
			validateFlag = false;
		}
		return validateFlag;
			
	}
	
	/**
	 * This method is used to edit included claim page.
	 * 
	 * @return
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editIncludedClaim() {
		String SUCCESS = "success";
		try {
			System.out.println("Inside editIncludedClaim ::::::::::::::");
			logger.debug("Inside editIncludedClaim ::::::::::::::");
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("includeclaimsfocus");
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			tplRecoveryDataBean.setSelectedIncludedClaimsIndex(rowValue);
			//	Audit
			if(tplRecoveryDataBean.getTplRecoveryIncludedclaimsList()!=null){
				UIComponent component=findComponentInRoot("IncludedClaimsAuditId");
				if(component!=null){
					AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component ;
					auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false);
				}
			}
			Integer rowValueInt = new Integer(rowValue);
			TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) 
					tplRecoveryDataBean.getTplRecoveryIncludedclaimsList().get(rowValueInt.intValue());
			TPLRecoveryCaseIncludedClaimsVO recoveryCaseIncludedClaimsVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseIncludedClaimsVO();
			recoveryCaseIncludedClaimsVO.setTcn(tplRecoveryCaseIncludedClaimsVO.getTcn());
			recoveryCaseIncludedClaimsVO.setVersionNo(tplRecoveryCaseIncludedClaimsVO.getVersionNo());
			if (tplRecoveryCaseIncludedClaimsVO.getLi() != null)
			{
				recoveryCaseIncludedClaimsVO.setLi(
						new Integer(tplRecoveryCaseIncludedClaimsVO.getLi().toString()));
			}
			recoveryCaseIncludedClaimsVO.setFdos(tplRecoveryCaseIncludedClaimsVO.getFdos());
			recoveryCaseIncludedClaimsVO.setClaimType(tplRecoveryCaseIncludedClaimsVO.getClaimType());
			recoveryCaseIncludedClaimsVO.setClaimTypeDesc(tplRecoveryCaseIncludedClaimsVO.getClaimTypeDesc());
			recoveryCaseIncludedClaimsVO.setReplacementReason(
					tplRecoveryCaseIncludedClaimsVO.getReplacementReason());
			recoveryCaseIncludedClaimsVO.setProviderChargedAmount(
					tplRecoveryCaseIncludedClaimsVO.getProviderChargedAmount());
			recoveryCaseIncludedClaimsVO.setReimbursementAmount(
					tplRecoveryCaseIncludedClaimsVO.getReimbursementAmount());
			recoveryCaseIncludedClaimsVO.setReqAmount(
					tplRecoveryCaseIncludedClaimsVO.getReqAmount());
			//added for defect ESPRD00793808
			recoveryCaseIncludedClaimsVO.setReqAmountStr(
					tplRecoveryCaseIncludedClaimsVO.getReqAmountStr());
			tplRecoveryDataBean.setIncludedClaimsFlag(false);
			//Infinite Defect Resolution : ESPRD00479544
			if(StringUtils.isNotBlank(tplRecoveryCaseIncludedClaimsVO.getTplRecoveredAmountStr()))
			{
				recoveryCaseIncludedClaimsVO.setTplRecoveredAmount(new Double(
						tplRecoveryCaseIncludedClaimsVO.getTplRecoveredAmountStr()).doubleValue());
			}
			//ESPRD00765787	
			recoveryCaseIncludedClaimsVO.setSysId(tplRecoveryCaseIncludedClaimsVO.getSysId());
			recoveryCaseIncludedClaimsVO.setExcludeIndicator(
					tplRecoveryCaseIncludedClaimsVO.isExcludeIndicator());
			recoveryCaseIncludedClaimsVO.setExcludeReason(
					tplRecoveryCaseIncludedClaimsVO.getExcludeReason());
			recoveryCaseIncludedClaimsVO.setAuditKeyList(tplRecoveryCaseIncludedClaimsVO.getAuditKeyList());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
			.setRecoveryCaseIncludedClaimsVO(recoveryCaseIncludedClaimsVO);
			if(StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseIncludedClaimsVO()
					.getExcludeReason()) && tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryCaseIncludedClaimsVO().isExcludeIndicator()){
				tplRecoveryDataBean.setDisableRecAmount(true);
			}
			else{
				tplRecoveryDataBean.setDisableRecAmount(false);
			}
			tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());
			tplRecoveryDataBean.setRenderIncludeClaim(true);
			tplRecoveryDataBean.setDisableLinkFlag(true);
			if (tplRecoveryDataBean.getTplRecoveryPreviousResponseList() != null)
			{
				tplRecoveryDataBean.getTplRecoveryPreviousResponseList().clear();
			}
			if (tplRecoveryDataBean.isRenderIncludeClaim())
			{
				TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
				List listOfPreviousResponse = tplRecoveryDelegate.getTPLRecoveryResponseFromDB(tplRecoveryCaseIncludedClaimsVO.getTcn(),
						tplRecoveryCaseIncludedClaimsVO.getSysId(),
						tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID(),
						tplRecoveryCaseIncludedClaimsVO.getLi());
				List previousResponseList = new ArrayList();
				if (listOfPreviousResponse!=null)
				{
					if(logger.isDebugEnabled()){
						logger.debug("listOfPreviousResponse size-->"+listOfPreviousResponse.size());
					}
					TPLRecoveryCaseResponseVO caseResponseVO = null;
					Iterator iterator = listOfPreviousResponse.iterator();
					while(iterator.hasNext())
					{
						caseResponseVO = new TPLRecoveryCaseResponseVO();
						TPLRecoveryResponse recoveryResponse = (TPLRecoveryResponse)iterator.next();
						if ((tplRecoveryCaseIncludedClaimsVO.getTcn().equals(recoveryResponse.getTcn()))
								&& (tplRecoveryCaseIncludedClaimsVO.getLi().equals(recoveryResponse.getLineNumber())))
						{
							caseResponseVO.setVersionNo(recoveryResponse.getVersionNo());
							caseResponseVO.setTcn(recoveryResponse.getTcn());
							if (recoveryResponse.getResponseDate() != null)
							{
								String recoveryDate = dateformatYYYYMMDD.format(recoveryResponse.getResponseDate());
								caseResponseVO.setRecoveryDate(recoveryDate);
							}
							if (tplRecoveryCaseIncludedClaimsVO.getLi() != null)
							{
								caseResponseVO.setLi(tplRecoveryCaseIncludedClaimsVO.getLi());	
							}
							if (recoveryResponse.getResponseAmount() != null)
							{
								caseResponseVO.setRecoveryAmount(recoveryResponse.getResponseAmount().toString());
							}
							caseResponseVO.setRecoveryReason(recoveryResponse.getResponseReasonCode());
							caseResponseVO.setFcn(recoveryResponse.getFcnNumber());
							//ESPRD00853186
							TPLRecoveryConversionHelper tplRcvryConvHelper = new TPLRecoveryConversionHelper();
							tplRcvryConvHelper.createVOAuditKeysList(recoveryResponse,caseResponseVO);
							previousResponseList.add(caseResponseVO);
						}
					}
				}
				tplRecoveryDataBean.setTplRecoveryPreviousResponseList(previousResponseList);
			}
			
			TPLRecoveryCaseClaim rcvryClaim = new TPLRecoveryCaseClaim();
			ClaimParent claimParent = new ClaimParent();
			TPLRecoveryCaseDetail tplRcvryCaseDetail = new TPLRecoveryCaseDetail();
			claimParent.setMemberSystemID(recoveryCaseIncludedClaimsVO.getSysId());
			claimParent.setTcn(tplRecoveryCaseIncludedClaimsVO.getTcn());
			rcvryClaim.setClaimParent(claimParent);
			rcvryClaim.setLineNumber(tplRecoveryCaseIncludedClaimsVO.getLi());
			tplRcvryCaseDetail.setCaseUserID(tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryCaseVO().getRecoveryCaseID());
			rcvryClaim.setTplRecoveryCaseDetail(tplRcvryCaseDetail);
			createVOAuditKeysList(rcvryClaim,recoveryCaseIncludedClaimsVO);
			
			List editableIncludedClaims = new ArrayList();
			editableIncludedClaims.add(createAuditableFeild("Req Amount","claimRequestAmount"));
			editableIncludedClaims.add(createAuditableFeild("Exclude Reason","claimExlusiveReasonCode"));
			//for defect : ESPRD00794535 
			editableIncludedClaims.add(createAuditableFeild("Exclude Ind","claimInclusiveOrExclusiveCode")); 
			if(recoveryCaseIncludedClaimsVO.getAuditKeyList()!=null && !(recoveryCaseIncludedClaimsVO.getAuditKeyList().isEmpty())){
				AuditDataFilter.filterAuditKeys(editableIncludedClaims,recoveryCaseIncludedClaimsVO);
				UIComponent component = TPLAdministrationHelper.findComponentInRoot("IncludedClaimsAuditId");
				if(component!=null){
					AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
					auditHistoryTable.setValue(recoveryCaseIncludedClaimsVO.getAuditKeyList());			
					auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
				}
			}else{
				if(logger.isDebugEnabled()){
					logger.debug("======recoveryCaseIncludedClaimsVO====Before Filter Empty===");
				}
			}
			//save flag
			tplRecoveryDataBean.setRecoveryEditClaimDetailsFlag(false);
			//ESPRD00856351 
			tplRecoveryDataBean.setRenderEditPreviousResponse(false);
			tplRecoveryDataBean.setShowSuccess(false);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}

	/**
	 * This method is used to display edit claim filter page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editClaimFilter() {
		
	  try 
	  {
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		//added for defect::ESPRD00793641
		tplRecoveryDataBean.setAddClaimFlag(false);
		//end
		tplRecoveryDataBean.setFocusThisId("clmfilterfocus");
		TPLRecoveryCaseMemberClaimFilterVO tempRecoveryCaseMemberClaimFilterVO=null;
		FacesContext facesContext = FacesContext.getCurrentInstance();
		String rowValue = (String) facesContext.getExternalContext()
								.getRequestParameterMap().get("rowIndex");
		tplRecoveryDataBean.setSelectedClaimFilterIndex(rowValue);
		tplRecoveryDataBean.setEditFilterSaved(true);
		//Audit
		if(tplRecoveryDataBean.getTplRecoveryClaimFilterList()!=null){
	        UIComponent component=findComponentInRoot("ClaimFilterAuditId");
	        if(component!=null){
	        	AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component ;
	        	auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false);
	        }
	    }
		Integer rowValueInt = new Integer(rowValue);
		TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO = (TPLRecoveryCaseMemberClaimFilterVO) 
		                           tplRecoveryDataBean.getTplRecoveryClaimFilterList().get(rowValueInt.intValue());
		if(recoveryCaseMemberClaimFilterVO!=null){
			tempRecoveryCaseMemberClaimFilterVO=new TPLRecoveryCaseMemberClaimFilterVO();
			tempRecoveryCaseMemberClaimFilterVO.setAddedAuditTimeStamp(recoveryCaseMemberClaimFilterVO.getAddedAuditTimeStamp());
			tempRecoveryCaseMemberClaimFilterVO.setAddedAuditUserID(recoveryCaseMemberClaimFilterVO.getAddedAuditUserID());
			tempRecoveryCaseMemberClaimFilterVO.setAuditTimeStamp(recoveryCaseMemberClaimFilterVO.getAuditTimeStamp());
			tempRecoveryCaseMemberClaimFilterVO.setAuditUserID(recoveryCaseMemberClaimFilterVO.getAuditUserID());
			tempRecoveryCaseMemberClaimFilterVO.setBeginValue(recoveryCaseMemberClaimFilterVO.getBeginValue());
			tempRecoveryCaseMemberClaimFilterVO.setCaseClaimStartDate(recoveryCaseMemberClaimFilterVO.getCaseClaimStartDate());
			tempRecoveryCaseMemberClaimFilterVO.setCaseClaimStopDate(recoveryCaseMemberClaimFilterVO.getCaseClaimStopDate());
			tempRecoveryCaseMemberClaimFilterVO.setEndValue(recoveryCaseMemberClaimFilterVO.getEndValue());
			tempRecoveryCaseMemberClaimFilterVO.setFilterType(recoveryCaseMemberClaimFilterVO.getFilterType());
			tempRecoveryCaseMemberClaimFilterVO.setTplrecoverycasefiltercriteriavo(recoveryCaseMemberClaimFilterVO.getTplrecoverycasefiltercriteriavo());
			tempRecoveryCaseMemberClaimFilterVO.setTplrecoverycasememberclaimselectionvo(recoveryCaseMemberClaimFilterVO.getTplrecoverycasememberclaimselectionvo());
			tempRecoveryCaseMemberClaimFilterVO.setVersionNo(recoveryCaseMemberClaimFilterVO.getVersionNo());
			tempRecoveryCaseMemberClaimFilterVO.setAuditKeyList(recoveryCaseMemberClaimFilterVO.getAuditKeyList());
			tplRecoveryDataBean.setTempRecoveryCaseMemberClaimFilterVO(tempRecoveryCaseMemberClaimFilterVO);
			
			TPLRecoveryCaseMemberClaimFilterVO rcvryCaseMemberClaimFiltrVO = 
				          tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberClaimFilterVO();
         //UIViewRoot uiViewRoot = facesContext.getViewRoot();
		        HtmlSelectOneMenu filterType = null;
		  /*   status = (HtmlSelectOneMenu) uiViewRoot.
		      findComponent("recoveryDetailForm:memberClaimsTab:memberClaims:claimsFilterPage:filterTypeValue_edit");*/
		     
		        UIComponent UiComponent = findComponentInRoot("filterTypeValue_edit");
		        filterType = (HtmlSelectOneMenu) UiComponent;
		        
		      if(null!=recoveryCaseMemberClaimFilterVO.getFilterType()&& !recoveryCaseMemberClaimFilterVO.getFilterType().isEmpty()){
		    	  filterType.setValue(recoveryCaseMemberClaimFilterVO.getFilterType());
		        	rcvryCaseMemberClaimFiltrVO.setFilterType(filterType.getValue().toString());
		       }
			rcvryCaseMemberClaimFiltrVO.setFilterType(recoveryCaseMemberClaimFilterVO.getFilterType());
			rcvryCaseMemberClaimFiltrVO.setBeginValue(recoveryCaseMemberClaimFilterVO.getBeginValue());
			rcvryCaseMemberClaimFiltrVO.setEndValue(recoveryCaseMemberClaimFilterVO.getEndValue());
			//String evalue=rcvryCaseMemberClaimFiltrVO.getEndValue();
			rcvryCaseMemberClaimFiltrVO.setAuditKeyList(recoveryCaseMemberClaimFilterVO.getAuditKeyList());
			
			if("I".equalsIgnoreCase(recoveryCaseMemberClaimFilterVO.getFilterType())){
				tplRecoveryDataBean.setRenderFilterText(true);
				tplRecoveryDataBean.setRenderFilterDate(false);
			}
			else{
				tplRecoveryDataBean.setRenderFilterDate(true);
				tplRecoveryDataBean.setRenderFilterText(false);
			}
		    /*if(EnterpriseCommonValidator.validateDate(evalue) && (EnterpriseCommonValidator.validateDate(evalue)))
			{
				tplRecoveryDataBean.setRenderFilterDate(false);
				tplRecoveryDataBean.setRenderFilterText(true);
			}
			else
			{   
				tplRecoveryDataBean.setRenderFilterDate(true);
				tplRecoveryDataBean.setRenderFilterText(false);
			}*/
		}
		tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());
		tplRecoveryDataBean.setRenderAddClaimFilterSave(false);
		tplRecoveryDataBean.setRenderEditClaimFilterSave(true);
		tplRecoveryDataBean.setRenderEditClaimFilterHeader(true);
		tplRecoveryDataBean.setRenderAddClaimFilterHeader(false);
   		tplRecoveryDataBean.setRenderResultClaimFilter(false);
		tplRecoveryDataBean.setClaimFilterFlag(false);
		tplRecoveryDataBean.setRenderEditClaimFilter(true);
		tplRecoveryDataBean.setRenderAddClaimFilter(false);
		tplRecoveryDataBean.setDeleteFilterFlag(false);

	} catch (Exception e) {
			e.printStackTrace();
	}
	return "success";
  }

	

	/**
	 * This method is used to reset claim filter created on Claim Filter
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String resetClaimFilter() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("clmfilterfocus");
		int rowIndex=recoveryDataBean.getCurrentRecord();
        if(recoveryDataBean.isRenderEditClaimFilterSave()){
        	TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO=recoveryDataBean.getTempRecoveryCaseMemberClaimFilterVO();
        	TPLRecoveryCaseMemberClaimFilterVO tempRecoveryCaseMemberClaimFilterVO=new TPLRecoveryCaseMemberClaimFilterVO();
        	if(recoveryCaseMemberClaimFilterVO!=null){
        		tempRecoveryCaseMemberClaimFilterVO.setAddedAuditTimeStamp(recoveryCaseMemberClaimFilterVO.getAddedAuditTimeStamp());
				tempRecoveryCaseMemberClaimFilterVO.setAddedAuditUserID(recoveryCaseMemberClaimFilterVO.getAddedAuditUserID());
				tempRecoveryCaseMemberClaimFilterVO.setAuditTimeStamp(recoveryCaseMemberClaimFilterVO.getAuditTimeStamp());
				tempRecoveryCaseMemberClaimFilterVO.setAuditUserID(recoveryCaseMemberClaimFilterVO.getAuditUserID());
				tempRecoveryCaseMemberClaimFilterVO.setBeginValue(recoveryCaseMemberClaimFilterVO.getBeginValue());
				tempRecoveryCaseMemberClaimFilterVO.setCaseClaimStartDate(recoveryCaseMemberClaimFilterVO.getCaseClaimStartDate());
				tempRecoveryCaseMemberClaimFilterVO.setCaseClaimStopDate(recoveryCaseMemberClaimFilterVO.getCaseClaimStopDate());
				tempRecoveryCaseMemberClaimFilterVO.setEndValue(recoveryCaseMemberClaimFilterVO.getEndValue());
				tempRecoveryCaseMemberClaimFilterVO.setFilterType(recoveryCaseMemberClaimFilterVO.getFilterType());
				tempRecoveryCaseMemberClaimFilterVO.setTplrecoverycasefiltercriteriavo(recoveryCaseMemberClaimFilterVO.getTplrecoverycasefiltercriteriavo());
				tempRecoveryCaseMemberClaimFilterVO.setTplrecoverycasememberclaimselectionvo(recoveryCaseMemberClaimFilterVO.getTplrecoverycasememberclaimselectionvo());
				tempRecoveryCaseMemberClaimFilterVO.setVersionNo(recoveryCaseMemberClaimFilterVO.getVersionNo());
				recoveryDataBean.getTplRecoveryClaimFilterList().set(rowIndex,tempRecoveryCaseMemberClaimFilterVO);
				recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryCaseMemberClaimFilterVO(tempRecoveryCaseMemberClaimFilterVO);
        	}
        	
        }else{
		TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO = new TPLRecoveryCaseMemberClaimFilterVO();
		recoveryDataBean.getRecoveryCaseDetailVO()
				.setRecoveryCaseMemberClaimFilterVO(
						recoveryCaseMemberClaimFilterVO);
        }
		return "success";

	}

	/**
	 * This method is used to cancel Claim Filter operation.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void cancelCalimFilter() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("clmfilterfocus");
		recoveryDataBean.setRenderAddClaimFilter(false);
		recoveryDataBean.setRenderEditClaimFilter(false);
		recoveryDataBean.setRenderEditClaimFilterSave(false);
		recoveryDataBean.setRenderEditClaimFilter(false);
		recoveryDataBean.setEditFilterSaved(false);
	}

	/**
	 * This method is used to add Interested party Information page to the user
	 * Interface.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String addInterestedPartyInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");

			TPLRecoveryCaseInterestedPartyVO recoveryCaseInterestedPartyVO = new TPLRecoveryCaseInterestedPartyVO();

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.setTplRecoveryInterestedPartyVO(
							recoveryCaseInterestedPartyVO);

			tplRecoveryDataBean.setRenderAddInterestedPartyInfo(true);

			tplRecoveryDataBean.setRenderAddInterestedPartyHeader(true);
			tplRecoveryDataBean.setRenderAddInterestedPartySave(true);
			tplRecoveryDataBean.setRenderEditInterestedPartyHeader(false);
			tplRecoveryDataBean.setRenderEditInterestedPartySave(false);
			tplRecoveryDataBean.setRenderResultInterestedPartyAddress(false);
			tplRecoveryDataBean.setInterestedPartyFlag(false);
			tplRecoveryDataBean.setShowSuccessInterestedPartyInfo(false);
			tplRecoveryDataBean.setDeleteInterestedPartyInfoFlag(false);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * This method is used to Update InterestedPartyInfo for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateInterestedPartyInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
			int currentRecord = tplRecoveryDataBean.getCurrentRecord();
			List recoveryInterestedPartyList = tplRecoveryDataBean.getTplRecoveryInterestedPartyInfoList();
			
			if (recoveryInterestedPartyList.size() > 0) {

				//As per defect ESPRD00089078
				TPLRecoveryCaseInterestedPartyVO caseInterestedPartyVO = (TPLRecoveryCaseInterestedPartyVO)recoveryInterestedPartyList.get(currentRecord);
				
				TPLRecoveryCaseInterestedPartyVO recoveryCaseInterestedPartyVO = new TPLRecoveryCaseInterestedPartyVO();
				if(validateInterestedPartyInfo()){
					tplRecoveryDataBean.setInterestedPartyFlag(true);

				//As per defect ESPRD00089078	
				recoveryCaseInterestedPartyVO.setVersionNo(caseInterestedPartyVO.getVersionNo());
				recoveryCaseInterestedPartyVO.setCommomEntityVersionNumber(caseInterestedPartyVO.getCommomEntityVersionNumber());
				recoveryCaseInterestedPartyVO.setSpecificEntityVersionNumber(caseInterestedPartyVO.getSpecificEntityVersionNumber());
	
				recoveryCaseInterestedPartyVO.setEntityType(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getEntityType());

				recoveryCaseInterestedPartyVO.setInterestedPartyID(tplRecoveryDataBean
								.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getInterestedPartyID());
				//ESPRD00827104 - Begin
				recoveryCaseInterestedPartyVO.setInterestedPartydispalyName(caseInterestedPartyVO.getInterestedPartydispalyName());
				recoveryCaseInterestedPartyVO.setInterestedPartyfirstName(caseInterestedPartyVO.getInterestedPartyfirstName());
				recoveryCaseInterestedPartyVO.setInterestedPartylastName(caseInterestedPartyVO.getInterestedPartylastName());
				recoveryCaseInterestedPartyVO.setInterestedPartymiddleName(caseInterestedPartyVO.getInterestedPartymiddleName());
				recoveryCaseInterestedPartyVO.setInterestedPartytitleName(caseInterestedPartyVO.getInterestedPartytitleName());
				recoveryCaseInterestedPartyVO.setInterestedPartysuffixName(caseInterestedPartyVO.getInterestedPartysuffixName());
				//ESPRD00827104 - End
				recoveryCaseInterestedPartyVO.setInterestedPartyName(tplRecoveryDataBean
								.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getInterestedPartyName());
				
				recoveryCaseInterestedPartyVO.setInterestedPartyRepresents(tplRecoveryDataBean.getRecoveryCaseDetailVO()
								.getTplRecoveryInterestedPartyVO().getInterestedPartyRepresents());

				recoveryInterestedPartyList.remove(currentRecord);
				recoveryInterestedPartyList.add(currentRecord,recoveryCaseInterestedPartyVO);
				tplRecoveryDataBean.setRenderResultInterestedPartyInfo(true);
				tplRecoveryDataBean.setRenderAddInterestedPartyInfo(false);
				tplRecoveryDataBean.setShowSuccessInterestedPartyInfo(true);
				tplRecoveryDataBean.setRenderInterestedPartyAddress(false);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * This method is used to save Interested party information .
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveInterestedPartyInfo() {
		try {

			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
			//FacesContext fc = FacesContext.getCurrentInstance(); Find Bug Fix
			List list = tplRecoveryDataBean
					.getTplRecoveryInterestedPartyInfoList();
			if(list==null){
				list=new ArrayList();
			}
		
			// CR -- ESPRD00658430		
			if( validateInterestedPartyInfo("Add") && validateInterestedPartyInfo() && validateInterestedPartyID()){
				tplRecoveryDataBean.setInterestedPartyFlag(true);							
			TPLRecoveryCaseInterestedPartyVO recoveryCaseInterestedPartyVO = new TPLRecoveryCaseInterestedPartyVO();
			
			TPLRecoveryCaseInterestedPartyVO tplRecoveryInterestedPartyVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO();
			recoveryCaseInterestedPartyVO.setEntityType(tplRecoveryInterestedPartyVO.getEntityType());

			recoveryCaseInterestedPartyVO
					.setInterestedPartyID(tplRecoveryInterestedPartyVO.getInterestedPartyID());

			recoveryCaseInterestedPartyVO
					.setInterestedPartyName(tplRecoveryInterestedPartyVO.getInterestedPartyName());

			recoveryCaseInterestedPartyVO
					.setInterestedPartyRepresents(tplRecoveryInterestedPartyVO.getInterestedPartyRepresents());
			
			recoveryCaseInterestedPartyVO
			.setVersionNo(tplRecoveryInterestedPartyVO.getVersionNo());
			recoveryCaseInterestedPartyVO
			.setCommomEntityVersionNumber(tplRecoveryInterestedPartyVO.getCommomEntityVersionNumber());
			recoveryCaseInterestedPartyVO
			.setSpecificEntityVersionNumber(tplRecoveryInterestedPartyVO.getSpecificEntityVersionNumber());
			// dEFECT fIX ESPRD00676888
			recoveryCaseInterestedPartyVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO();
			list.add(recoveryCaseInterestedPartyVO);

			tplRecoveryDataBean.setTplRecoveryInterestedPartyInfoList(list);
			tplRecoveryDataBean.setRenderAddInterestedPartyInfo(false);
			tplRecoveryDataBean.setShowSuccessInterestedPartyInfo(true);
			tplRecoveryDataBean.setRenderInterestedPartyAddress(false);
			//commented for ESPRD00579469
			/*TPLAdministrationHelper
			.setAddRecIntLegInfo(TPLRecoveryCaseConstants.TPL_REC_INT_LEG_SUCESS);*/
			}
            
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}
	
	
	/**
	 * 
	 */
	 //CR -- ESPRD00658430
	public boolean validateInterestedPartyID () {
		 boolean validate =false;
		 try
		 {
			 if(logger.isDebugEnabled()){
				 logger.debug("validateInterestedPartyID>>>>>>>>");
			 }
			  if (validateInterestedPartyInfo("Add")) 
			  {
			  	 TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			  	  tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
				  String interestedPartyID = tplRecoveryDataBean.getRecoveryCaseDetailVO()
				  .getTplRecoveryInterestedPartyVO().getInterestedPartyID();
				  
				  String entityType = tplRecoveryDataBean.getRecoveryCaseDetailVO()
				  .getTplRecoveryInterestedPartyVO().getEntityType();
				 Long interestedPartyIDLong = new Long(interestedPartyID);
					TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
					TPLRecoveryCaseInterestedPartyVO tplRecoveryCaseInterestedPartyVO 
								=  tplRecoveryDelegate.validateInterestedPartyID(interestedPartyIDLong , entityType);
					List interestedPartyAddressList = new ArrayList();
					String partyRepresents = tplRecoveryDataBean.getRecoveryCaseDetailVO()
					  .getTplRecoveryInterestedPartyVO().getInterestedPartyRepresents();
					
					if(!(StringUtils.isEmpty(partyRepresents)) && tplRecoveryCaseInterestedPartyVO != null )
					{
						tplRecoveryCaseInterestedPartyVO.setInterestedPartyRepresents(partyRepresents);
					}
								
					if(null != tplRecoveryCaseInterestedPartyVO)
					{
						validate = true;
						tplRecoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryInterestedPartyVO(
								tplRecoveryCaseInterestedPartyVO);
						List interestedPartyAddressListDO = tplRecoveryCaseInterestedPartyVO.getInterestedPartyAddressVOList();
						if (interestedPartyAddressListDO != null && interestedPartyAddressListDO.size()>0)
						{
							Iterator iterator = interestedPartyAddressListDO.iterator();
							
							while (iterator.hasNext())
							{
								TPLRecoveryCaseInterestedPartyAddressVO tplInterestedPartyVO 
										= (TPLRecoveryCaseInterestedPartyAddressVO)iterator.next();
//								tplInterestedPartyVO.setSel(true);
								if (null != tplInterestedPartyVO.getAddressSK())
								{
//									//for defect ESPRD00450142
									String desc = getdescription(tplInterestedPartyVO.getType());
									tplInterestedPartyVO.setType(desc);
									tplInterestedPartyVO.setAddressSK(tplInterestedPartyVO.getAddressSK());
								}
								tplInterestedPartyVO.setAddress1(tplInterestedPartyVO.getAddress1());
								tplInterestedPartyVO.setCity(tplInterestedPartyVO.getCity());
								tplInterestedPartyVO.setState(tplInterestedPartyVO.getState());
								tplInterestedPartyVO.setZip(tplInterestedPartyVO.getZip());
								tplInterestedPartyVO.setEntitySK(tplInterestedPartyVO.getEntitySK());
								tplInterestedPartyVO.setAddressSeqNumber(tplInterestedPartyVO.getAddressSeqNumber());
								interestedPartyAddressList.add(tplInterestedPartyVO);
							}
							tplRecoveryDataBean.setTplRecoveryInterestedPartyAddressList(interestedPartyAddressList);
							tplRecoveryDataBean.setRenderInterestedPartyAddress(true);
							tplRecoveryDataBean.setRenderEditInterestedPartyAddress(false);
						}
					}
					else
					{
						TPLAdministrationHelper.setAddHIPPInfoMessageToId(TPLRecoveryCaseConstants.TPL_RECOVERY_INTERESTEDPARTY_INVALID,"entityType_interestedParty",false,TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource);
						//TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RECOVERY_INTERESTEDPARTY_INVALID);
						validate = false;
					 	//addMessages("Entity Type and Interested Party ID must be valid");
					}
			  }	  
		 }		 
		 
		 catch (TPLRecoveryBusinessException hippBusinessException)
		 {
        	
        	
		 	hippBusinessException.printStackTrace();
		 	//TPLAdministrationHelper.setAddHIPPInfo(TPLHIPPConstants.WORKER_DETAILS_NOT_FOUND);
		 }
		 catch (Exception e) 
		 {
  		 	e.printStackTrace();
		 	 FacesMessage message = new FacesMessage();
			  message.setDetail(e.getMessage());
			  FacesContext.getCurrentInstance().addMessage("abc", message);
		 }
		return validate;  
		
	}
	
//	for defect ESPRD00450142
	private String getdescription(String type)
	{
		List list=	getTPLRecoveryDataBean().getPolicyAddressTypeList();
		Iterator it=list.iterator();
		while(it.hasNext())
		{
			SelectItem selectItem=(SelectItem) it.next();
			if (selectItem.getValue().equals(type))
			{
				return selectItem.getLabel();
			}
		}
		return null;
	}
	
	/**
	 * @return
	 */
	public boolean validateInterestedPartyInfo()
	{
		boolean validateFlag = true;
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		/*if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0056(
			tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getEntityType(), 
			tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getInterestedPartyRepresents(),
			tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getInterestedPartyName())){
			validateFlag = false;
		}*/
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY1156(
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getEntityType(), 
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getInterestedPartyRepresents(),
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getInterestedPartyName())){
				validateFlag = false;
			}
		
		return validateFlag;
		
	}
	
	public boolean validateInterestedPartyInfo(String addFlag)
	{
		boolean validateFlag = true;
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		  tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
		String interestedPartyID = tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getInterestedPartyID();
		String entityType = tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().getEntityType();
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0226(entityType, interestedPartyID))
		{
			validateFlag = false;
		}
		return validateFlag;
		
	}
	/**
	 * This method is used to Update ClaimFilter for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateCarrierInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			int currentRecord = tplRecoveryDataBean.getCurrentRecord();
			List recoveryCarrierInfoList = tplRecoveryDataBean
					.getTplRecoveryCarrierInfoList();
				TPLRecoveryCaseCarrierAddressVO tplRecoveryCaseCarrierAddressVO = (TPLRecoveryCaseCarrierAddressVO)recoveryCarrierInfoList.get(currentRecord);
				
				if (tplRecoveryDataBean.getCarrierAdrSel().equalsIgnoreCase("Yes"))
				{
					tplRecoveryDataBean.setCarrierAddressSK(tplRecoveryCaseCarrierAddressVO.getAddressSK());
					//tplRecoveryCaseCarrierAddressVO.setSel(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().isSel());
					/*if (tplRecoveryCaseCarrierAddressVO.isSel())
					{
						System.out.println("inside the if2 block");
				    	
						tplRecoveryCaseCarrierAddressVO.setSelectAddress(Boolean.toString(true));
					}*/
					/*else
					{
						tplRecoveryCaseCarrierAddressVO.setSelectAddress(Boolean.toString(false));
					}*/
				}
				else
				{
					tplRecoveryDataBean.setCarrierAddressSK(null);
				}
				 
				tplRecoveryCaseCarrierAddressVO.setType(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getType());
				 
				tplRecoveryCaseCarrierAddressVO.setAddress1(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getAddress1());
				tplRecoveryCaseCarrierAddressVO.setAddress2(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getAddress2());
				
				 
				tplRecoveryCaseCarrierAddressVO.setCity(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getCity());
				 
				tplRecoveryCaseCarrierAddressVO.setState(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getState());
				 
				tplRecoveryCaseCarrierAddressVO.setZip4(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getZip4());
				tplRecoveryCaseCarrierAddressVO.setZip5(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getZip5());
				//Defect Fix ESPRD00659123				
				tplRecoveryCaseCarrierAddressVO.setZip((tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getZip5() != null ? tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getZip5() : "")
						+TPLAdministrationConstants.SPACE_STRING+(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getZip4() != null ? tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getZip4() : ""));				
				tplRecoveryCaseCarrierAddressVO.setCounty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().getCounty()); 
				//End

				recoveryCarrierInfoList.remove(currentRecord);
				recoveryCarrierInfoList.add(currentRecord,tplRecoveryCaseCarrierAddressVO);
				tplRecoveryDataBean.setCarrierSuccessMsgRender(true);


		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * This method is used to save carrier information .
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveCarrierInfo() {
		try {

			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();

			ArrayList list1 = new ArrayList();
			/*int n = data.getRowCount();
			for (int i = 0; i < n; i++) {

				data.setRowIndex(i);
				TPLRecoveryCaseCarrierInfoVO tplRecoveryCaseCarrierInfoVO = (TPLRecoveryCaseCarrierInfoVO) data
						.getRowData();

				list1.add(tplRecoveryCaseCarrierInfoVO);
				data.setRowIndex(-1);
			}*/
			List list = tplRecoveryDataBean.getTplRecoveryCarrierInfoList();
			TPLRecoveryCaseCarrierInfoVO recoveryCaseCarrierInfoVO = (TPLRecoveryCaseCarrierInfoVO)list.get(2);
//			TPLRecoveryCaseCarrierInfoVO recoveryCaseCarrierInfoVO = new TPLRecoveryCaseCarrierInfoVO();
//			tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().
//			 recoveryCaseCarrierInfoVO.setSel(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().isSel());
			 recoveryCaseCarrierInfoVO.setType(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().getType());
			 recoveryCaseCarrierInfoVO.setAddress(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().getAddress());
			 recoveryCaseCarrierInfoVO.setCity(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().getCity());
			 recoveryCaseCarrierInfoVO.setState(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().getState());
			 recoveryCaseCarrierInfoVO.setZip(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().getZip());
			 recoveryCaseCarrierInfoVO.setCountry(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().getCountry());
			 

			list1.add(recoveryCaseCarrierInfoVO);

			tplRecoveryDataBean.setTplRecoveryCarrierInfoList(list1);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";
	}

	/**
	 * This method is used to dispaly edit Interested Party Information.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editInterestedPartyInfo() {
		try {
			
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
	    	
			tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
			tplRecoveryDataBean.setShowSuccessInterestedPartyInfo(false);
			TPLRecoveryCaseInterestedPartyVO tempRecoveryCaseInterestedPartyVO=null;
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext().getRequestParameterMap().get("rowIndex");
			Integer rowValueInt = new Integer(rowValue);
			TPLRecoveryCaseInterestedPartyVO recoveryCaseInterestedPartyVO = (TPLRecoveryCaseInterestedPartyVO) tplRecoveryDataBean
					.getTplRecoveryInterestedPartyInfoList().get(rowValueInt.intValue());
			// Audit			
			
			List interestedPartyList = new ArrayList();
			interestedPartyList.add(createAuditableFeild("Interested Party Represents","instructionPartyRepNameText"));
			
			if(recoveryCaseInterestedPartyVO!=null){
	    	if(recoveryCaseInterestedPartyVO.getAuditKeyList() != null 
	    			&& !recoveryCaseInterestedPartyVO.getAuditKeyList().isEmpty())
	    	{
	    		AuditDataFilter.filterAuditKeys(interestedPartyList,recoveryCaseInterestedPartyVO);
	    		/* Start of Code is added for the defect ESPRD00795067 to display the audit log details
	    		 To update the Audit log table */
	    		if(tplRecoveryDataBean.getTplRecoveryInterestedPartyInfoList()!=null)
				{
		        	UIComponent component=findComponentInRoot("interestedPartyAuditId");
		        	if(component!=null)
		        	{
		        		AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component ;
		        		auditHistoryTable.setValue(recoveryCaseInterestedPartyVO.getAuditKeyList());
		        		auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false);
		        	}
		        }
	    		/* End of Code is added for the defect ESPRD00795067 to display the audit log details
	    		 To update the Audit log table */
	    	}
	    	
			
				tempRecoveryCaseInterestedPartyVO=new TPLRecoveryCaseInterestedPartyVO();
				tempRecoveryCaseInterestedPartyVO.setAddedAuditTimeStamp(recoveryCaseInterestedPartyVO.getAddedAuditTimeStamp());
				tempRecoveryCaseInterestedPartyVO.setAddedAuditUserID(recoveryCaseInterestedPartyVO.getAddedAuditUserID());
				tempRecoveryCaseInterestedPartyVO.setAuditTimeStamp(recoveryCaseInterestedPartyVO.getAuditTimeStamp());
				tempRecoveryCaseInterestedPartyVO.setAuditUserID(recoveryCaseInterestedPartyVO.getAuditUserID());
				tempRecoveryCaseInterestedPartyVO.setEntityType(recoveryCaseInterestedPartyVO.getEntityType());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyAddressVO(recoveryCaseInterestedPartyVO.getInterestedPartyAddressVO());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyAddressVOList(recoveryCaseInterestedPartyVO.getInterestedPartyAddressVOList());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyID(recoveryCaseInterestedPartyVO.getInterestedPartyID());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyName(recoveryCaseInterestedPartyVO.getInterestedPartyName());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyRepresents(recoveryCaseInterestedPartyVO.getInterestedPartyRepresents());
				tempRecoveryCaseInterestedPartyVO.setVersionNo(recoveryCaseInterestedPartyVO.getVersionNo());
				//Defect Fix ESPRD00668192
				tempRecoveryCaseInterestedPartyVO.setCommomEntityVersionNumber(recoveryCaseInterestedPartyVO.getCommomEntityVersionNumber());
				tempRecoveryCaseInterestedPartyVO.setSpecificEntityVersionNumber(recoveryCaseInterestedPartyVO.getSpecificEntityVersionNumber());
				// End
				List entityTypeList = tplRecoveryDataBean.getLegalEntityTypeList();
				Iterator entityTypeIterator = entityTypeList.iterator();
				while (entityTypeIterator.hasNext()) {
					SelectItem element = (SelectItem) entityTypeIterator.next();
					if (element.getValue().equals(recoveryCaseInterestedPartyVO.getEntityType()))
					{
						tempRecoveryCaseInterestedPartyVO.setEntityTypeShortDesc(element.getLabel());
						recoveryCaseInterestedPartyVO.setEntityTypeShortDesc(element.getLabel());
						break;
					}
				}
				tplRecoveryDataBean.setTempRecoveryCaseInterestedPartyVO(tempRecoveryCaseInterestedPartyVO);
			
				TPLRecoveryCaseInterestedPartyVO tplRecoveryInterestedPartyVO = tplRecoveryDataBean.getRecoveryCaseDetailVO()
													.getTplRecoveryInterestedPartyVO();
			
				tplRecoveryInterestedPartyVO.setEntityType(recoveryCaseInterestedPartyVO.getEntityType());
			
				tplRecoveryInterestedPartyVO.setEntityTypeShortDesc(
							recoveryCaseInterestedPartyVO.getEntityTypeShortDesc());

				tplRecoveryInterestedPartyVO.setInterestedPartyID(
							recoveryCaseInterestedPartyVO.getInterestedPartyID());

				tplRecoveryInterestedPartyVO.setInterestedPartyName(
							recoveryCaseInterestedPartyVO.getInterestedPartyName());

				tplRecoveryInterestedPartyVO.setInterestedPartyRepresents(
							recoveryCaseInterestedPartyVO.getInterestedPartyRepresents());
			
			// audit
			if(recoveryCaseInterestedPartyVO.getAuditKeyList() != null)
			{
				tplRecoveryInterestedPartyVO.setAuditKeyList(recoveryCaseInterestedPartyVO.getAuditKeyList());
			}
			
			tplRecoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryInterestedPartyVO(tplRecoveryInterestedPartyVO);
		} 
			 List addressList = tplRecoveryDataBean.getTplRecoveryInterestedPartyAddressTempList();
		if(addressList!=null){
			Iterator iterator = addressList.iterator();
			List interestedPartyAddList = new ArrayList();
			while (iterator.hasNext())
			{
				TPLRecoveryCaseInterestedPartyAddressVO interestedPartyAddressVO = (TPLRecoveryCaseInterestedPartyAddressVO) iterator.next();
				if (tempRecoveryCaseInterestedPartyVO.getInterestedPartyID().equals(Long.toString(interestedPartyAddressVO.getEntitySK())))
				{
					interestedPartyAddList.add(interestedPartyAddressVO);
					tplRecoveryDataBean.setTplRecoveryInterestedPartyAddressList(interestedPartyAddList);
				}
			}
		}
			tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());
			tplRecoveryDataBean.setRenderAddInterestedPartySave(false);
			tplRecoveryDataBean.setRenderEditInterestedPartySave(true);
			tplRecoveryDataBean.setRenderEditInterestedPartyHeader(true);
			tplRecoveryDataBean.setRenderAddInterestedPartyHeader(false);
			tplRecoveryDataBean.setRenderAddInterestedPartyInfo(true);
			tplRecoveryDataBean.setRenderResultInterestedPartyInfo(false);
			tplRecoveryDataBean.setRenderInterestedPartyAddress(true);
			tplRecoveryDataBean.setRenderEditInterestedPartyAddress(false);
			tplRecoveryDataBean.setInterestedPartyFlag(false);
			tplRecoveryDataBean.setDeleteInterestedPartyInfoFlag(false);
						
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}


	/**
	 * This method is used to cancel Interested Party Info page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void cancelInterestedPartyInfo() {
		TPLRecoveryDataBean tplRecoveryDataBean =getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
		tplRecoveryDataBean.setRenderAddInterestedPartyInfo(false);
		tplRecoveryDataBean.setRenderEditInterestedPartyAddress(false);
		tplRecoveryDataBean.setRenderInterestedPartyAddress(false);
		tplRecoveryDataBean.setRenderInterestedPartyAddress(false);
		//ESPRD00827104
		tplRecoveryDataBean.setRenderEditInterestedPartySave(false);
		tplRecoveryDataBean.setRenderAddInterestedPartySave(false);
	}

	/**
	 * This method is used to reset Interested party Information page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String resetInterestedPartyInfo() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("intrestedpartyfocus");
		if(recoveryDataBean.isRenderEditInterestedPartySave()){
			int rowIndex=recoveryDataBean.getCurrentRecord();
			TPLRecoveryCaseInterestedPartyVO recoveryCaseInterestedPartyVO =recoveryDataBean.getTempRecoveryCaseInterestedPartyVO();
			TPLRecoveryCaseInterestedPartyVO tempRecoveryCaseInterestedPartyVO=null;
			if(recoveryCaseInterestedPartyVO!=null){

				tempRecoveryCaseInterestedPartyVO=new TPLRecoveryCaseInterestedPartyVO();
				tempRecoveryCaseInterestedPartyVO.setAddedAuditTimeStamp(recoveryCaseInterestedPartyVO.getAddedAuditTimeStamp());
				tempRecoveryCaseInterestedPartyVO.setAddedAuditUserID(recoveryCaseInterestedPartyVO.getAddedAuditUserID());
				tempRecoveryCaseInterestedPartyVO.setAuditTimeStamp(recoveryCaseInterestedPartyVO.getAuditTimeStamp());
				tempRecoveryCaseInterestedPartyVO.setAuditUserID(recoveryCaseInterestedPartyVO.getAuditUserID());
				tempRecoveryCaseInterestedPartyVO.setEntityType(recoveryCaseInterestedPartyVO.getEntityType());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyAddressVO(recoveryCaseInterestedPartyVO.getInterestedPartyAddressVO());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyAddressVOList(recoveryCaseInterestedPartyVO.getInterestedPartyAddressVOList());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyID(recoveryCaseInterestedPartyVO.getInterestedPartyID());
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyName(recoveryCaseInterestedPartyVO.getInterestedPartyName());				
				tempRecoveryCaseInterestedPartyVO.setEntityTypeShortDesc(recoveryCaseInterestedPartyVO.getEntityTypeShortDesc());				
				tempRecoveryCaseInterestedPartyVO.setInterestedPartyRepresents(recoveryCaseInterestedPartyVO.getInterestedPartyRepresents());
				tempRecoveryCaseInterestedPartyVO.setVersionNo(recoveryCaseInterestedPartyVO.getVersionNo());
				//Defect Fix ESPRD00668192
				tempRecoveryCaseInterestedPartyVO.setCommomEntityVersionNumber(recoveryCaseInterestedPartyVO.getCommomEntityVersionNumber());
				tempRecoveryCaseInterestedPartyVO.setSpecificEntityVersionNumber(recoveryCaseInterestedPartyVO.getSpecificEntityVersionNumber());
				//END
				recoveryDataBean.getTplRecoveryInterestedPartyInfoList().set(rowIndex,tempRecoveryCaseInterestedPartyVO);
				recoveryDataBean.getRecoveryCaseDetailVO()
				.setTplRecoveryInterestedPartyVO(tempRecoveryCaseInterestedPartyVO);
			}
		}else{

		TPLRecoveryCaseInterestedPartyVO recoveryCaseInterestedPartyVO = new TPLRecoveryCaseInterestedPartyVO();
		recoveryDataBean.getRecoveryCaseDetailVO()
				.setTplRecoveryInterestedPartyVO(recoveryCaseInterestedPartyVO);
		}
		return "success";

	}

	
	/**
	 * This method is used to add settlement Information for the Recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String addSettlementInfo() {
		try {

			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("setlemntfocus");

			TPLRecoveryCaseSettlementVO recoveryCaseSettlementVO = new TPLRecoveryCaseSettlementVO();
			
			recoveryCaseSettlementVO.setInterestedPartyFee("0.00");
			recoveryCaseSettlementVO.setLienAmount("0.00");
			recoveryCaseSettlementVO.setNetToMember("0.00");

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.setTplRecoverySettlementVO(recoveryCaseSettlementVO);

			tplRecoveryDataBean.setRenderAddSettlementInfo(true);

			//tplRecoveryDataBean.setRenderAddClaimFilter(true);
			tplRecoveryDataBean.setRenderAddSettlementHeader(true);
			tplRecoveryDataBean.setRenderAddSettlementSave(true);
			tplRecoveryDataBean.setRenderEditSettlementHeader(false);
			tplRecoveryDataBean.setRenderEditSettlementSave(false);
			tplRecoveryDataBean.setRenderResultSettlement(false);
			tplRecoveryDataBean.setSettlementInfoFlag(false);
		} catch (Exception e) {
        	e.printStackTrace();
		}
		return "success";

	}


	/**
	 * This method is used to Update SettlementInfo for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateSettlementInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("setlemntfocus");
			//TPLRecoveryConversionHelper tplRecoveryConversionHelper = new TPLRecoveryConversionHelper();
			int currentRecord = tplRecoveryDataBean.getCurrentRecord();
			List recoverySettlementList = tplRecoveryDataBean
					.getTplRecoverySettlementList();
			if (recoverySettlementList.size() > 0) {

				TPLRecoveryCaseSettlementVO recoveryCaseSettlementVO = new TPLRecoveryCaseSettlementVO();
				TPLRecoveryCaseSettlementVO tplRecoveryCaseSettlementVO = tplRecoveryDataBean
				.getRecoveryCaseDetailVO().getTplRecoverySettlementVO();
				if(validateSettlementInfo()){
				tplRecoveryDataBean.setSettlementInfoFlag(true);
				recoveryCaseSettlementVO.setSettlementDate(tplRecoveryCaseSettlementVO.getSettlementDate());
				recoveryCaseSettlementVO
						.setSettlementReason(tplRecoveryCaseSettlementVO.getSettlementReason());
				description = TPLRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getSettlementList(),tplRecoveryCaseSettlementVO.getSettlementReason());
				recoveryCaseSettlementVO
				.setSettlementReasonDesc(description);
		
				if(tplRecoveryCaseSettlementVO.getTotalSettlementAmount()!=null && 
						StringUtils.isNotEmpty(tplRecoveryCaseSettlementVO.getTotalSettlementAmount())){
					recoveryCaseSettlementVO.setTotalSettlementAmount(decimalValue(Double.valueOf(tplRecoveryCaseSettlementVO.getTotalSettlementAmount()).doubleValue()));
				}
				if(tplRecoveryCaseSettlementVO.getStateSettlementAmount()!=null &&
							StringUtils.isNotEmpty(tplRecoveryCaseSettlementVO.getStateSettlementAmount())){	
					recoveryCaseSettlementVO.setStateSettlementAmount(decimalValue(Double.valueOf(tplRecoveryCaseSettlementVO.getStateSettlementAmount()).doubleValue()));
				}
				
				recoveryCaseSettlementVO.setInterestedPartyFee(tplRecoveryCaseSettlementVO.getInterestedPartyFee());
				recoveryCaseSettlementVO.setLienAmount(tplRecoveryCaseSettlementVO.getLienAmount());
				recoveryCaseSettlementVO.setFcn(tplRecoveryCaseSettlementVO.getFcn());
				recoveryCaseSettlementVO.setNetToMember(tplRecoveryCaseSettlementVO.getNetToMember());
				recoveryCaseSettlementVO.setRecoveryCaseSettlementSeqNumber(tplRecoveryCaseSettlementVO.getRecoveryCaseSettlementSeqNumber());
				recoveryCaseSettlementVO.setVersionNo(tplRecoveryCaseSettlementVO.getVersionNo());

				recoverySettlementList.remove(currentRecord);
				recoverySettlementList.add(currentRecord,
						recoveryCaseSettlementVO);
				tplRecoveryDataBean.setRenderResultSettlement(true);
				tplRecoveryDataBean.setRenderAddSettlementInfo(false);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}


	 /**
	 * Comment for <code>description</code>
	 */
	public String description;

	/**
	 * This method is used to save Settlement Info.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	   public String saveSettlementInfo() 
		{
		   if(logger.isDebugEnabled()){
		   logger.debug("Inside saveSettlementInfo");
		   }
			try 
			{
				getTPLRecoveryDataBean().setFocusThisId("setlemntfocus");
				if (validateSettlementInfo())
				{
					TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
					tplRecoveryDataBean.setSettlementInfoFlag(true);
					if(tplRecoveryDataBean.getTplRecoverySettlementList()==null){
						tplRecoveryDataBean.setTplRecoverySettlementList(new ArrayList()); 
					}

					TPLRecoveryCaseSettlementVO recoveryCaseSettlementVO = new TPLRecoveryCaseSettlementVO();
					TPLRecoveryCaseSettlementVO tplRecoveryCaseSettlementVO = tplRecoveryDataBean
							.getRecoveryCaseDetailVO().getTplRecoverySettlementVO();
					recoveryCaseSettlementVO.setSettlementDate(tplRecoveryCaseSettlementVO.getSettlementDate());
					recoveryCaseSettlementVO.setSettlementReason(tplRecoveryCaseSettlementVO.getSettlementReason());
					
					description = TPLRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getSettlementList(), 
							tplRecoveryCaseSettlementVO.getSettlementReason());
					
					recoveryCaseSettlementVO.setSettlementReasonDesc(description);
					if(tplRecoveryCaseSettlementVO.getTotalSettlementAmount()!=null && 
							StringUtils.isNotEmpty(tplRecoveryCaseSettlementVO.getTotalSettlementAmount())){
						/*recoveryCaseSettlementVO
						.setTotalSettlementAmount(decimalValue(Double.valueOf(tplRecoveryDataBean
								.getRecoveryCaseDetailVO()
								.getTplRecoverySettlementVO()
								.getTotalSettlementAmount()).doubleValue()));*/
						recoveryCaseSettlementVO.setTotalSettlementAmount(
								tplRecoveryCaseSettlementVO.getTotalSettlementAmount());
						
					}
					if(tplRecoveryCaseSettlementVO
							.getStateSettlementAmount()!=null &&
							StringUtils.isNotEmpty(tplRecoveryCaseSettlementVO.getStateSettlementAmount())){
						/*recoveryCaseSettlementVO
						.setStateSettlementAmount(decimalValue(Double.valueOf(tplRecoveryDataBean
								.getRecoveryCaseDetailVO()
								.getTplRecoverySettlementVO()
								.getStateSettlementAmount()).doubleValue()));*/
						recoveryCaseSettlementVO.setStateSettlementAmount(
								tplRecoveryCaseSettlementVO.getStateSettlementAmount());
						
					}
										
					if(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoverySettlementVO().getInterestedPartyFee()!=null
							&& StringUtils.isNotEmpty(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoverySettlementVO().getInterestedPartyFee()))
					{						
						recoveryCaseSettlementVO.setInterestedPartyFee(
								tplRecoveryCaseSettlementVO.getInterestedPartyFee());
					}
					else
					{
						recoveryCaseSettlementVO.setInterestedPartyFee("0.0");
					}
					recoveryCaseSettlementVO.setLienAmount(tplRecoveryCaseSettlementVO.getLienAmount());
					recoveryCaseSettlementVO.setFcn(tplRecoveryCaseSettlementVO.getFcn());
					recoveryCaseSettlementVO.setNetToMember(tplRecoveryCaseSettlementVO.getNetToMember());
					
					
					tplRecoveryDataBean.getTplRecoverySettlementList().add(
							tplRecoveryDataBean.getTplRecoverySettlementList().size(),recoveryCaseSettlementVO);
					tplRecoveryDataBean.setRenderResultSettlement(true);
					tplRecoveryDataBean.setRenderAddSettlementInfo(false);
					
					/*TPLAdministrationHelper
					.setAddRecSettelementInfo(TPLRecoveryCaseConstants.TPL_REC_SETTELMENT_SUCESS);*/
					
					//resetSettlementInfo();
				
				}
			} 
			catch (Exception e)
			{
	     	   e.printStackTrace();
			}
			return "success";
		}


	/**
	 * This method is used to display edit Settlement Info page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editSettlementInfo() 
	{
		try
		{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("setlemntfocus");
		FacesContext facesContext = FacesContext.getCurrentInstance();
		TPLRecoveryCaseSettlementVO tempRecoveryCaseSettlementVO=null;
		String rowValue = (String) facesContext.getExternalContext()
				.getRequestParameterMap().get("rowIndex");
	    //	Audit
		
		 if(tplRecoveryDataBean
                .getTplRecoverySettlementList()!=null){
        	UIComponent component=findComponentInRoot("SettlementAuditId");
        	if(component!=null){
        		AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component ;
        		auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false);
        	}
        }
		
		tplRecoveryDataBean.setSelectedSettlementIndex(rowValue);
		Integer rowValueInt = new Integer(rowValue);
		TPLRecoveryCaseSettlementVO recoveryCaseSettlementVO = (TPLRecoveryCaseSettlementVO) tplRecoveryDataBean
				.getTplRecoverySettlementList().get(rowValueInt.intValue());
		
		if(recoveryCaseSettlementVO!=null){
			tempRecoveryCaseSettlementVO=new TPLRecoveryCaseSettlementVO();
			tempRecoveryCaseSettlementVO.setAddedAuditTimeStamp(recoveryCaseSettlementVO.getAddedAuditTimeStamp());
			tempRecoveryCaseSettlementVO.setAddedAuditUserID(recoveryCaseSettlementVO.getAuditUserID());
			tempRecoveryCaseSettlementVO.setAuditTimeStamp(recoveryCaseSettlementVO.getAuditTimeStamp());
			tempRecoveryCaseSettlementVO.setAuditUserID(recoveryCaseSettlementVO.getAuditUserID());
			tempRecoveryCaseSettlementVO.setFcn(recoveryCaseSettlementVO.getFcn());
			tempRecoveryCaseSettlementVO.setInterestedPartyFee(recoveryCaseSettlementVO.getInterestedPartyFee());
			tempRecoveryCaseSettlementVO.setLienAmount(recoveryCaseSettlementVO.getLienAmount());
			tempRecoveryCaseSettlementVO.setNetToMember(recoveryCaseSettlementVO.getNetToMember());
			tempRecoveryCaseSettlementVO.setRecoveryCaseSettlementSeqNumber(recoveryCaseSettlementVO.getRecoveryCaseSettlementSeqNumber());
			tempRecoveryCaseSettlementVO.setSettlementDate(recoveryCaseSettlementVO.getSettlementDate());
			tempRecoveryCaseSettlementVO.setSettlementReason(recoveryCaseSettlementVO.getSettlementReason());
			tempRecoveryCaseSettlementVO.setSettlementReasonDesc(recoveryCaseSettlementVO.getSettlementReasonDesc());
			if(recoveryCaseSettlementVO.getStateSettlementAmount()!=null &&
					StringUtils.isNotEmpty(recoveryCaseSettlementVO.getStateSettlementAmount())){
				tempRecoveryCaseSettlementVO.setStateSettlementAmount(decimalValue(Double.valueOf(recoveryCaseSettlementVO.getStateSettlementAmount()).doubleValue()));
			}
			if(recoveryCaseSettlementVO.getTotalSettlementAmount()!=null &&
					StringUtils.isNotEmpty(recoveryCaseSettlementVO.getTotalSettlementAmount())){
				tempRecoveryCaseSettlementVO.setTotalSettlementAmount(decimalValue(Double.valueOf(recoveryCaseSettlementVO.getTotalSettlementAmount()).doubleValue()));
			}
			tempRecoveryCaseSettlementVO.setTplRecoverySettlementList(recoveryCaseSettlementVO.getTplRecoverySettlementList());
			tempRecoveryCaseSettlementVO.setVersionNo(recoveryCaseSettlementVO.getVersionNo());
			tempRecoveryCaseSettlementVO.setAuditKeyList(recoveryCaseSettlementVO.getAuditKeyList());
			tplRecoveryDataBean.setTempRecoveryCaseSettlementVO(tempRecoveryCaseSettlementVO);
			
		
			TPLRecoveryCaseSettlementVO tplRecoveryCaseSettlementVO =tplRecoveryDataBean.getRecoveryCaseDetailVO()
			.getTplRecoverySettlementVO();
			tplRecoveryCaseSettlementVO.setSettlementReason(
						recoveryCaseSettlementVO.getSettlementReason());
			tplRecoveryCaseSettlementVO.setSettlementReasonDesc(
				recoveryCaseSettlementVO.getSettlementReasonDesc());

			tplRecoveryCaseSettlementVO.setTotalSettlementAmount(
						recoveryCaseSettlementVO.getTotalSettlementAmount());
			tplRecoveryCaseSettlementVO.setSettlementDate(
				recoveryCaseSettlementVO.getSettlementDate());

			tplRecoveryCaseSettlementVO.setStateSettlementAmount(
						recoveryCaseSettlementVO.getStateSettlementAmount());

			tplRecoveryCaseSettlementVO.setInterestedPartyFee(
						recoveryCaseSettlementVO.getInterestedPartyFee());

			tplRecoveryCaseSettlementVO.setFcn(
						recoveryCaseSettlementVO.getFcn());

			tplRecoveryCaseSettlementVO.setLienAmount(
						recoveryCaseSettlementVO.getLienAmount());

			tplRecoveryCaseSettlementVO.setNetToMember(
						recoveryCaseSettlementVO.getNetToMember());
		
			tplRecoveryCaseSettlementVO.setRecoveryCaseSettlementSeqNumber(
						recoveryCaseSettlementVO
								.getRecoveryCaseSettlementSeqNumber());
			tplRecoveryCaseSettlementVO.setVersionNo(
				recoveryCaseSettlementVO
						.getVersionNo());
		
			tplRecoveryCaseSettlementVO.setAuditKeyList(recoveryCaseSettlementVO.getAuditKeyList());
		
		tplRecoveryDataBean.getRecoveryCaseDetailVO()
		       .setTplRecoverySettlementVO(tplRecoveryCaseSettlementVO);
		tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());

		tplRecoveryDataBean.setRenderAddSettlementSave(false);
		tplRecoveryDataBean.setRenderEditSettlementSave(true);
		tplRecoveryDataBean.setRenderEditSettlementHeader(true);
		tplRecoveryDataBean.setRenderAddSettlementHeader(false);
		tplRecoveryDataBean.setRenderAddSettlementInfo(true);
		tplRecoveryDataBean.setRenderResultSettlement(false);
		tplRecoveryDataBean.setSettlementInfoFlag(false);
		
		}

	} 
	catch (Exception e) 
	{
			e.printStackTrace();
	}
	return "success";
	}
	
	
	/**
	 * @return
	 */
	public boolean validateSettlementInfo()
	{
		if(logger.isDebugEnabled()){
			logger.debug("inside the validateSettlementInfo");
		}
		boolean validateFlag = true;
		boolean settlementvalid=false;
		TPLRecoveryCaseDetailVO tplRecoveryCaseDetailVO = getTPLRecoveryDataBean().getRecoveryCaseDetailVO();
		
		
		//Implemented for ESPRD00579450
		/*if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate()))
		{
			if (TPLRecoveryCommonValidator.dateValidator(
					tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate(),"settlementDateComp"))
			{
				validateFlag = false;
			}
		}*/
		if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate())) 
		{
			if(EnterpriseCommonValidator.validateDate(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate())){
				String recoveryDate=tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate();
                Date recDate = getDateFromString(recoveryDate);
	        	//Date sysDate= new Date(); Find Bug Fix
	        	}
			    else
			    {
			    	TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,TPLRecoveryCaseConstants.JSP_TPL_RECOVERY_SETTLEMENT_DATE);
			    	
				  validateFlag = false;
				  //logger.info("am in 2200000");
			    }
			    Date bgdate = TPLRecoveryCommonValidator.dateConverter(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate());
                String bdate = TPLAdministrationHelper.dateConverter(bgdate);
                tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().setSettlementDate(bdate);
			
		}
		/*if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getInterestedPartyFee()))  
		{
			System.out.println("11-value is "+tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getInterestedPartyFee());
			validateFlag = true;
		}
		else
		{
			System.out.println("22-value is "+tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getInterestedPartyFee());
			validateFlag = false;	
		}
		System.out.println("validateFlag3 -->"+validateFlag);*/
		if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate()) &&
				StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getCaseClaimStartDate()) &&
				TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0065(
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate(), 
				tplRecoveryCaseDetailVO.getCaseClaimStartDate())) 
		{
			validateFlag = false;
		}
		/*if (StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate()) &&
				TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0066(
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate(), 
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementReason())) 
		{
			validateFlag = false;
		}*/
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0066(
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate(), 
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementReason())) 
		{
			settlementvalid=true;
			validateFlag = false;
		}
		if ((!settlementvalid) && (!StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementReason())))
		{
			TPLAdministrationHelper.setAddHIPPInfoMessageToId(TPLRecoveryCaseConstants.TPL_RCVRY_REC_LEGAL_SETTLEMENT_REASON_REQUIRED,"settlementReasonValue",false,TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource);
			validateFlag = false;
		}
		if ((!settlementvalid) && (!StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementDate())))
		{
			TPLAdministrationHelper.setAddHIPPInfoMessageToId(TPLRecoveryCaseConstants.TPL_RCVRY_REC_LEGAL_SETTLEMENT_DATE_REQUIRED,"settlementDateComp",false,TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource);
			validateFlag = false;
		}
		/* Code commented for Defect Id: ESPRD00621411 */
		if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0068(
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getSettlementReason(), 
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getTotalSettlementAmount())) 
		{
			validateFlag = false;
		}
		
		
		if (!StringUtils.isBlank(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getStateSettlementAmount())&& !TPLAdministrationHelper.validateHippValue(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getStateSettlementAmount()))
        {
			System.out.println("loop");					
			validateFlag = false;        	
        	TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"stateSettlementAmountValue");			
        }
		else if(!tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getStateSettlementAmount().contains(".") &&
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getStateSettlementAmount().length()>9){
			validateFlag = false; 
			TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"stateSettlementAmountValue");
        }
		else if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0069(
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getStateSettlementAmount(), 
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getFcn())) 
		{
			validateFlag = false;
		}
		/* End of modification for Defect Id:ESPRD00621411   */
		/*if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0069(
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getStateSettlementAmount(), 
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getFcn())) 
		{
			validateFlag = false;
		}*/
		
		if (!StringUtils.isBlank(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getInterestedPartyFee())
                && !TPLAdministrationHelper.validateHippValue(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getInterestedPartyFee()))
        {
			validateFlag = false;        	
        	TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"interestedPartyFeeValue");
        }
		else if(!tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getInterestedPartyFee().contains(".") &&
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getInterestedPartyFee().length()>9){
			validateFlag = false; 
			TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"interestedPartyFeeValue");
		}	
		
		if (!StringUtils.isBlank(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getLienAmount())
                && !TPLAdministrationHelper.validateHippValue(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getLienAmount()))
        {
			validateFlag = false;        	
        	TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"lienAmount");
        }else if(!tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getLienAmount().contains(".") &&
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getLienAmount().length()>9){
			validateFlag = false; 
			TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"lienAmount");
		}	
		
		if (!StringUtils.isBlank(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getNetToMember())
                && !TPLAdministrationHelper.validateHippValue(tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getNetToMember()))
        {
			validateFlag = false;        	
        	TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"nettoMember");
        }else if(!tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getNetToMember().contains(".") &&
				tplRecoveryCaseDetailVO.getTplRecoverySettlementVO().getNetToMember().length()>9){
			validateFlag = false; 
			TPLAdministrationHelper.addErrorMessage(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,
					TPLRecoveryCaseConstants.ADDRECOVERYCASEPPortletResource,"nettoMember");
        }
		
		return validateFlag;	
	}

	/**
	 * This method is used to cancel settlement information page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void cancelSettlementInfo() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("setlemntfocus");

		recoveryDataBean.setRenderAddSettlementInfo(false);

	}

	/**
	 * 
	 */
	public void cancelRecoveryCarrierInfo() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();

		recoveryDataBean.setRenderEditCarrierInfo(false);
	}
	
	
	/*public void cancelRecoveryCaseDetails() {
		System.err.println("-------- IN CANCEL RECOVERY METHOD -------------");
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		TPLRecoverySearchDataBean recoverySearchDataBean = getTPLRecoverySearchDataBean();
		recoverySearchDataBean.setRenderedSearch(true);
		recoveryDataBean.setShowRecoveryDetails(false);
		
	}*/
	/**
	 * This method is used to reset settlement information page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String resetSettlementInfo() {
		
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("setlemntfocus");
    if(recoveryDataBean.isRenderEditSettlementSave()){
    	int rowIndex=recoveryDataBean.getCurrentRecord();
    	TPLRecoveryCaseSettlementVO recoveryCaseSettlementVO=recoveryDataBean.getTempRecoveryCaseSettlementVO();
    	TPLRecoveryCaseSettlementVO tempRecoveryCaseSettlementVO=new TPLRecoveryCaseSettlementVO();
    	if(recoveryCaseSettlementVO!=null){
    		
    		tempRecoveryCaseSettlementVO.setAddedAuditTimeStamp(recoveryCaseSettlementVO.getAddedAuditTimeStamp());
			tempRecoveryCaseSettlementVO.setAddedAuditUserID(recoveryCaseSettlementVO.getAuditUserID());
			tempRecoveryCaseSettlementVO.setAuditTimeStamp(recoveryCaseSettlementVO.getAuditTimeStamp());
			tempRecoveryCaseSettlementVO.setAuditUserID(recoveryCaseSettlementVO.getAuditUserID());
			tempRecoveryCaseSettlementVO.setFcn(recoveryCaseSettlementVO.getFcn());
			tempRecoveryCaseSettlementVO.setInterestedPartyFee(recoveryCaseSettlementVO.getInterestedPartyFee());
			tempRecoveryCaseSettlementVO.setLienAmount(recoveryCaseSettlementVO.getLienAmount());
			tempRecoveryCaseSettlementVO.setNetToMember(recoveryCaseSettlementVO.getNetToMember());
			tempRecoveryCaseSettlementVO.setRecoveryCaseSettlementSeqNumber(recoveryCaseSettlementVO.getRecoveryCaseSettlementSeqNumber());
			tempRecoveryCaseSettlementVO.setSettlementDate(recoveryCaseSettlementVO.getSettlementDate());
			tempRecoveryCaseSettlementVO.setSettlementReason(recoveryCaseSettlementVO.getSettlementReason());
			tempRecoveryCaseSettlementVO.setSettlementReasonDesc(recoveryCaseSettlementVO.getSettlementReasonDesc());
			tempRecoveryCaseSettlementVO.setStateSettlementAmount(recoveryCaseSettlementVO.getStateSettlementAmount());
			tempRecoveryCaseSettlementVO.setTotalSettlementAmount(recoveryCaseSettlementVO.getTotalSettlementAmount());
			tempRecoveryCaseSettlementVO.setTplRecoverySettlementList(recoveryCaseSettlementVO.getTplRecoverySettlementList());
			tempRecoveryCaseSettlementVO.setVersionNo(recoveryCaseSettlementVO.getVersionNo());
			
			recoveryDataBean.getTplRecoverySettlementList().set(rowIndex,tempRecoveryCaseSettlementVO);
			recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoverySettlementVO(
					tempRecoveryCaseSettlementVO);
    	}
    }else{
		TPLRecoveryCaseSettlementVO recoveryCaseSettlementVO = new TPLRecoveryCaseSettlementVO();
		recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoverySettlementVO(
				recoveryCaseSettlementVO);
    }
	return "success";
	}


	/**
	 * This method is used to display edit carrier Information page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editCarrierInfo() {
		try 
		{
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			String carrieAddressSKString = (String) facesContext.getExternalContext()
			.getRequestParameterMap().get("carrieAddressSK");
			Integer rowValueInt = new Integer(rowValue);
			tplRecoveryDataBean.setDisableAdrFlag(true);
			TPLRecoveryCaseCarrierAddressVO tplRecoveryCaseCarrierAddressVO = (TPLRecoveryCaseCarrierAddressVO) tplRecoveryDataBean
					.getTplRecoveryCarrierInfoList()
					.get(rowValueInt.intValue());
			if (StringUtils.isEmpty(tplRecoveryDataBean.getCarrierAddressSK()))
			{
				tplRecoveryDataBean.setCarrierAdrSel("No");
			}
			else if (tplRecoveryDataBean.getCarrierAddressSK().equals(carrieAddressSKString))
			{
				tplRecoveryDataBean.setCarrierAdrSel("Yes");
			}
			else
			{
				tplRecoveryDataBean.setCarrierAdrSel("No");
			}
			
			tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setSel(tplRecoveryCaseCarrierAddressVO.isSel());
			if (tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().isSel())
			{
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setSelectAddress(Boolean.toString(true));
			}
			else
			{
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setSelectAddress(Boolean.toString(false));
			}
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setType(tplRecoveryCaseCarrierAddressVO.getType());
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setAddress1(tplRecoveryCaseCarrierAddressVO.getAddress1());
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setAddress2(tplRecoveryCaseCarrierAddressVO.getAddress2());
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setCity(tplRecoveryCaseCarrierAddressVO .getCity());
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setState(tplRecoveryCaseCarrierAddressVO.getState());
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setZip4(tplRecoveryCaseCarrierAddressVO.getZip4());
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setZip5(tplRecoveryCaseCarrierAddressVO.getZip5());
		  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseCarrierAddressVO().setCounty(tplRecoveryCaseCarrierAddressVO.getCounty());
		  tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());
		  tplRecoveryDataBean.setRenderEditCarrierInfo(true);
		  tplRecoveryDataBean.setCarrierSuccessMsgRender(false);
	  } catch (Exception e) {
			e.printStackTrace();
	  }
		return "success";

	}



	/**
	 * This method is used to dispaly relationship information page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String addRelationshipInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("relationshipfocus");

			TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO = new TPLRecoveryCaseRelationshipVO();

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.setTplRecoveryCaseRelationshipVO(
							recoveryCaseRelationshipVO);
			tplRecoveryDataBean.setRenderAddRelationship(true);
			
            tplRecoveryDataBean.setRenderEditRelationship(false);
			tplRecoveryDataBean.setRenderAddRelationshipHeader(true);
			tplRecoveryDataBean.setRenderAddRelationshipSave(true);
			tplRecoveryDataBean.setRenderEditRelationshipHeader(false);
			tplRecoveryDataBean.setRenderEditRelationshipSave(false);
			tplRecoveryDataBean.setRelationshipInfoFlag(false);
			tplRecoveryDataBean.setRenderResultRelationship(false);
			tplRecoveryDataBean.setDeleteRelationshipFlag(false);
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * This method is used to Update RelationshipInfo for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateRelationshipInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("relationshipfocus");
			
			List recoveryRelationshipList = tplRecoveryDataBean
					.getTplRecoveryRelationshipList();
			
			if (recoveryRelationshipList.size() > 0) {

				if(validateRelationshipInfo()){
					tplRecoveryDataBean.setRelationshipInfoFlag(true);
					int currentRecord = tplRecoveryDataBean.getCurrentRecord();
					TPLRecoveryCaseRelationshipVO tplRecoveryCaseRelationshipVO = 
						(TPLRecoveryCaseRelationshipVO)tplRecoveryDataBean.getTplRecoveryRelationshipList().get(currentRecord);
					
					
					TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO = new TPLRecoveryCaseRelationshipVO();
					TPLRecoveryCaseRelationshipVO tplRecvryCaseRelationVO = tplRecoveryDataBean
											.getRecoveryCaseDetailVO().getTplRecoveryCaseRelationshipVO();
				recoveryCaseRelationshipVO.setFirstName(tplRecvryCaseRelationVO.getFirstName());

				recoveryCaseRelationshipVO.setMiddleInitial(tplRecvryCaseRelationVO.getMiddleInitial());
				
				recoveryCaseRelationshipVO.setLastName(tplRecvryCaseRelationVO.getLastName());
				
				String name = recoveryCaseRelationshipVO.getFirstName()+ " " +recoveryCaseRelationshipVO.getLastName();
				
				recoveryCaseRelationshipVO.setName(name);
				
				if(tplRecvryCaseRelationVO.getRelationship()!=null){
					recoveryCaseRelationshipVO.setRelationshipDesc(getdescriptionForRelationship(tplRecvryCaseRelationVO.getRelationship()));
				}
				

				recoveryCaseRelationshipVO.setRelationship(tplRecvryCaseRelationVO.getRelationship());

				recoveryCaseRelationshipVO.setDateofBirth(tplRecvryCaseRelationVO.getDateofBirth());
				recoveryCaseRelationshipVO.setDateofDeath(tplRecvryCaseRelationVO.getDateofDeath());
				if (StringUtils.isNotBlank(tplRecvryCaseRelationVO.getSsn()))
				{
					tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseRelationshipVO().setSsn(
							tplRecvryCaseRelationVO.getSsn().replaceAll("-",""));
					recoveryCaseRelationshipVO.setSsn(TPLAdministrationHelper.getSSNFormat(tplRecvryCaseRelationVO.getSsn()));
				}
				//Defect Fix ESPRD00675005
				recoveryCaseRelationshipVO.setGender(getdescriptionForGender(tplRecvryCaseRelationVO.getGender()));
				//End
				recoveryCaseRelationshipVO
						.setRecoveryProhibited(tplRecvryCaseRelationVO.isRecoveryProhibited());
			     recoveryCaseRelationshipVO.setCommonEntitySK(tplRecvryCaseRelationVO.getCommonEntitySK());
				
			 recoveryCaseRelationshipVO.setRepresentativeSK(tplRecvryCaseRelationVO.getRepresentativeSK());
				
			recoveryCaseRelationshipVO.setVersionNo(tplRecoveryCaseRelationshipVO.getVersionNo());
						
					
				recoveryCaseRelationshipVO.setSpecificEntityVersionNumber(tplRecoveryCaseRelationshipVO.getSpecificEntityVersionNumber());
				recoveryCaseRelationshipVO.setCrossEntityVersionNumber(tplRecoveryCaseRelationshipVO.getCrossEntityVersionNumber());
				recoveryCaseRelationshipVO.setRepVersionNumber(tplRecoveryCaseRelationshipVO.getRepVersionNumber());
				recoveryCaseRelationshipVO.setCrossEntityRepCrossVersionNumber(tplRecoveryCaseRelationshipVO.getCrossEntityRepCrossVersionNumber());

				recoveryRelationshipList.remove(currentRecord);
				recoveryRelationshipList.add(currentRecord,
						recoveryCaseRelationshipVO);
				tplRecoveryDataBean.setRenderResultRelationship(true);
				tplRecoveryDataBean.setRenderAddRelationship(false);
				tplRecoveryDataBean.setRenderEditRelationship(false);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * This method is used to save relation ship information for the recovery
	 * case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveRelationshipInfo()
	{
		if(logger.isDebugEnabled()){
		logger.debug("Inside saveRelationshipInfo");
		}
		try 
		{		
			if(validateRelationshipInfo())
			{
				TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
				tplRecoveryDataBean.setRelationshipInfoFlag(true);
				tplRecoveryDataBean.setFocusThisId("relationshipfocus");
				
				List list = tplRecoveryDataBean.getTplRecoveryRelationshipList();
				if(list==null)
				{
					list=new ArrayList();
				}
				TPLRecoveryCaseRelationshipVO tplRecoveryCaseRelationshipVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseRelationshipVO();
				TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO = new TPLRecoveryCaseRelationshipVO();
				String name = tplRecoveryCaseRelationshipVO.getFirstName() +"  "+
					
				tplRecoveryCaseRelationshipVO.getLastName();
				recoveryCaseRelationshipVO.setName(name);
				recoveryCaseRelationshipVO.setFirstName(tplRecoveryCaseRelationshipVO.getFirstName());
	
				recoveryCaseRelationshipVO.setMiddleInitial(tplRecoveryCaseRelationshipVO.getMiddleInitial());
				
				recoveryCaseRelationshipVO.setLastName(tplRecoveryCaseRelationshipVO.getLastName());	
	
			//	List relCodeList = tplRecoveryDataBean.getRelationshipList();
				/*if (null != relCodeList)
				{
					Iterator it = relCodeList.iterator();
					while (it.hasNext())
					{
						SelectItem element = (SelectItem) it.next();
						if (tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseRelationshipVO().getRelationship() != null
								&& element.getValue() != null 
								&& tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseRelationshipVO()
									.getRelationship().equals(element.getValue()))
						{
							recoveryCaseRelationshipVO.setRelationship(element.getValue()+"-"+element.getDescription());
							break;
						}
					}
				}*/
				if(tplRecoveryCaseRelationshipVO.getRelationship()!=null){
				recoveryCaseRelationshipVO.setRelationshipDesc(getdescriptionForRelationship(tplRecoveryCaseRelationshipVO.getRelationship()));
				}
				recoveryCaseRelationshipVO.setRelationship(tplRecoveryCaseRelationshipVO.getRelationship());
	
				recoveryCaseRelationshipVO.setDateofBirth(tplRecoveryCaseRelationshipVO.getDateofBirth());
				recoveryCaseRelationshipVO.setDateofDeath(tplRecoveryCaseRelationshipVO.getDateofDeath());
				if (StringUtils.isNotBlank(tplRecoveryCaseRelationshipVO.getSsn()))
				{
					tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseRelationshipVO().setSsn(
							tplRecoveryCaseRelationshipVO
							.getSsn().replaceAll("-",""));
					recoveryCaseRelationshipVO.setSsn(TPLAdministrationHelper.getSSNFormat(tplRecoveryDataBean.getRecoveryCaseDetailVO()
							.getTplRecoveryCaseRelationshipVO().getSsn()));
				}
				recoveryCaseRelationshipVO.setGender(getdescriptionForGender(tplRecoveryCaseRelationshipVO.getGender()));
				recoveryCaseRelationshipVO
						.setRecoveryProhibited(tplRecoveryCaseRelationshipVO.isRecoveryProhibited());
	
				list.add(recoveryCaseRelationshipVO);
	
				tplRecoveryDataBean.setTplRecoveryRelationshipList(list);
				tplRecoveryDataBean.setRenderAddRelationship(false);
				tplRecoveryDataBean.setRenderResultRelationship(true);
			}

		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return "success";
	}
	
	 private String getdescriptionForRelationship(String value)
	    {
	    	List relCodeList = getTPLRecoveryDataBean().getRelationshipList();
	    	
	    	if (null != relCodeList)
			{
				Iterator it = relCodeList.iterator();
				while (it.hasNext())
				{
					SelectItem element = (SelectItem) it.next();
					if(element.getValue().equals(value)){
						return element.getLabel();
					}
				}
			}
	    	return "";
	    }
	 private String getdescriptionForGender(String value)
	    {
	    	List relCodeList = getTPLRecoveryDataBean().getGenderList();
	    	
	    	if (null != relCodeList)
			{
				Iterator it = relCodeList.iterator();
				while (it.hasNext())
				{
					SelectItem element = (SelectItem) it.next();
					if(element.getValue().equals(value)){
						return element.getLabel();
					}
				}
			}
	    	return "";
	    }
	/**
	 * @return
	 */
	public boolean validateRelationshipInfo()
	{
		boolean validateFlag = true;
		TPLRecoveryCaseDetailVO tplRecoveryCaseDetailVO = getTPLRecoveryDataBean().getRecoveryCaseDetailVO();
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		TPLRecoveryCaseRelationshipVO tRecoveryCaseRelationshipVO = tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO();		
		tplRecoveryDataBean.setFocusThisId("relationshipfocus");
		if(StringUtils.isEmpty(tRecoveryCaseRelationshipVO.getLastName())){
			if(tplRecoveryDataBean.renderEditRelationship){
			TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RCVRY_SEARCH_RELATION_LAST_NAME,"lastName_editrelationship");
			validateFlag = false;
			}else {
				TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RCVRY_SEARCH_RELATION_LAST_NAME,"lastName_addrelationship");
				validateFlag = false;
			}
		}
		
		
		if(StringUtils.isNotEmpty(tRecoveryCaseRelationshipVO.getSsn()))
		{
			String jspid;
			if(tplRecoveryDataBean.renderEditRelationship){
				 jspid="SSN_editValue";
			}else{
				jspid="SSN_addValue";
			}
			
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0081(
					tRecoveryCaseRelationshipVO.getSsn(),jspid))
			{ 
				validateFlag = false;
			}
		}
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0082(
				tRecoveryCaseRelationshipVO.getLastName(), 
				tRecoveryCaseRelationshipVO.getFirstName(),
				tplRecoveryDataBean.renderEditRelationship))
		{
			validateFlag = false;
		}
		 
		if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0079(tRecoveryCaseRelationshipVO.getFirstName(),
				tRecoveryCaseRelationshipVO.getLastName(),
				tRecoveryCaseRelationshipVO.getRelationship(),tplRecoveryDataBean.renderEditRelationship))
		{
			validateFlag = false;
		}
	
		//ESPRD00579566
	if(StringUtils.isNotBlank(tRecoveryCaseRelationshipVO.getDateofBirth())){
		
		if(!EnterpriseCommonValidator.

				validateDate(tRecoveryCaseRelationshipVO.getDateofBirth())){
               if(tplRecoveryDataBean.renderEditRelationship){
            	 TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,"dateofBirth_editvalue");
   			    validateFlag=false;
               }
					
				else {
					 TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,"dateofBirth_addvalue");
				validateFlag =false; 
                  }
				}

				Date bgdate = TPLRecoveryCommonValidator.

				dateConverter(tRecoveryCaseRelationshipVO.getDateofBirth());

				try {

				String bdate = TPLAdministrationHelper.dateConverter(bgdate);
				tRecoveryCaseRelationshipVO.setDateofBirth(bdate);
				
				} catch (Exception e) {

				// TODO Auto-generated catch block

				e.printStackTrace();

				}
	}
		//ESPRD00579566
		
		/*if(StringUtils.isNotEmpty(tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO().getDateofDeath())){
			if(tplRecoveryDataBean.renderEditRelationship){
				if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO().getDateofDeath(),"dateofDeath_editvalue")){
					validateFlag = false;
			}
			}else if (TPLRecoveryCommonValidator.dateValidator(tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO().getDateofDeath(),"dateofDeath_addvalue")){
				validateFlag = false;
			}
		}*/
				//ESPRD00579566
	if(StringUtils.isNotBlank(tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO().getDateofDeath())){
		
	
				if(!EnterpriseCommonValidator.

						validateDate(tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO().getDateofDeath())){
					if(tplRecoveryDataBean.renderEditRelationship){
		            	 TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,"dateofDeath_editvalue");
		   			    validateFlag=false;
		               }
							
						else {
							 TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RECOVERY_INVALID_DATE,"dateofDeath_addvalue");
						validateFlag =false; 
		                  }
						}

						Date btdate = TPLRecoveryCommonValidator.
						dateConverter(tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO().getDateofDeath());

						try {

						String dtdate = TPLAdministrationHelper.dateConverter(btdate);
						tplRecoveryCaseDetailVO.getTplRecoveryCaseRelationshipVO().setDateofDeath(dtdate);
						
						} catch (Exception e) {

						// TODO Auto-generated catch block
						e.printStackTrace();

						}
				
	}	
			//ESPRD00579566
		return validateFlag;
	}

	/**
	 * This method is used to cancel Relationship page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void cancelRelationshipInfo() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("relationshipfocus");
		
		recoveryDataBean.setRenderAddRelationship(false);
		recoveryDataBean.setRenderEditRelationship(false);

	}

	/**
	 * This method is used to reset relationship operation.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String resetRelationshipInfo() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		
		recoveryDataBean.setFocusThisId("relationshipfocus");

		TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO = new TPLRecoveryCaseRelationshipVO();
		recoveryDataBean.getRecoveryCaseDetailVO()
				.setTplRecoveryCaseRelationshipVO(recoveryCaseRelationshipVO);
		return "success";

	}



	/**
	 * this method is used to edit Relationship Information
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editRelationshipInfo() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("relationshipfocus");
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			tplRecoveryDataBean.setSelectedRelationshipIndex(rowValue);
			
			 //	Audit
			
			 if(tplRecoveryDataBean
	                .getTplRecoveryRelationshipList()!=null){
	        	UIComponent component=findComponentInRoot("RelationshipAuditId");
	        	if(component!=null){
	        		AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component ;
	        		auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false);
	        	}
	        }
			
			Integer rowValueInt = new Integer(rowValue);
			TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO = (TPLRecoveryCaseRelationshipVO) tplRecoveryDataBean
					.getTplRecoveryRelationshipList().get(
							rowValueInt.intValue());
			String name = recoveryCaseRelationshipVO.getFirstName()+ " "+recoveryCaseRelationshipVO.getLastName();
			TPLRecoveryCaseRelationshipVO tplRecoveryCaseRelationshipVO = tplRecoveryDataBean.getRecoveryCaseDetailVO()
						.getTplRecoveryCaseRelationshipVO();
			tplRecoveryCaseRelationshipVO.setName(name);
							

			tplRecoveryCaseRelationshipVO.setFirstName(
							recoveryCaseRelationshipVO.getFirstName());

			tplRecoveryCaseRelationshipVO.setMiddleInitial(
							recoveryCaseRelationshipVO.getMiddleInitial());
			
			tplRecoveryCaseRelationshipVO.setLastName(
					recoveryCaseRelationshipVO.getLastName());
			
			
			if(recoveryCaseRelationshipVO.getRelationship()!=null)
			{
				tplRecoveryCaseRelationshipVO.setRelationshipDesc(getdescriptionForRelationship(recoveryCaseRelationshipVO.getRelationship()));
			}

			tplRecoveryCaseRelationshipVO.setRelationship(
							recoveryCaseRelationshipVO.getRelationship());

			tplRecoveryCaseRelationshipVO.setDateofBirth(
							recoveryCaseRelationshipVO.getDateofBirth());

			tplRecoveryCaseRelationshipVO.setDateofDeath(
							recoveryCaseRelationshipVO.getDateofDeath());

			tplRecoveryCaseRelationshipVO.setSsn(
							recoveryCaseRelationshipVO.getSsn());
			
			// Defect Fix ESPRD00675005
			if(recoveryCaseRelationshipVO.getGender()!= null && !(StringUtils.isBlank(recoveryCaseRelationshipVO.getGender()))){
				String gender[] = recoveryCaseRelationshipVO.getGender().split("-");
				tplRecoveryCaseRelationshipVO.setGender(
						gender[0]);
			}
			

			tplRecoveryCaseRelationshipVO.setRecoveryProhibited(
							recoveryCaseRelationshipVO.isRecoveryProhibited());
			tplRecoveryCaseRelationshipVO.setCommonEntitySK(
					recoveryCaseRelationshipVO.getCommonEntitySK());
			tplRecoveryCaseRelationshipVO.setRepresentativeSK(
					recoveryCaseRelationshipVO.getRepresentativeSK());
			tplRecoveryCaseRelationshipVO.setVersionNo(
					recoveryCaseRelationshipVO.getVersionNo());
			
			tplRecoveryCaseRelationshipVO.setSpecificEntityVersionNumber(
					recoveryCaseRelationshipVO.getSpecificEntityVersionNumber());
			tplRecoveryCaseRelationshipVO.setCrossEntityVersionNumber(
					recoveryCaseRelationshipVO.getCrossEntityVersionNumber());
			tplRecoveryCaseRelationshipVO.setRepVersionNumber(
					recoveryCaseRelationshipVO.getRepVersionNumber());
			
			tplRecoveryCaseRelationshipVO.setAuditKeyList(recoveryCaseRelationshipVO.getAuditKeyList());
						
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.setTplRecoveryCaseRelationshipVO(tplRecoveryCaseRelationshipVO);
			tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());

			tplRecoveryDataBean.setRenderEditRelationship(true);			
			tplRecoveryDataBean.setRenderAddRelationshipSave(false);
			tplRecoveryDataBean.setRenderEditRelationshipSave(true);
			tplRecoveryDataBean.setRenderEditRelationshipHeader(true);
			tplRecoveryDataBean.setRenderAddRelationshipHeader(false);
			tplRecoveryDataBean.setRenderAddRelationship(false);
			tplRecoveryDataBean.setRenderResultRelationship(false);
			tplRecoveryDataBean.setRelationshipInfoFlag(false);
			tplRecoveryDataBean.setDeleteRelationshipFlag(false);

		} catch (Exception e) {
        	e.printStackTrace();
		}
		return "success";

	}

	/**
	 * This method is used to dispaly Assests and Liabilities information page.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String addAssetsAndLiabilites() {
		try {
			
		    TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		    tplRecoveryDataBean.setFocusThisId("assetliabilitiesfocus");

			TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO = new TPLRecoveryCaseAssetsAndLiabilitiesVO();
								
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.setTplRecoveryCaseAssetsAndLiabilitiesVO(
							recoveryCaseAssetsAndLiabilitiesVO);
			
			tplRecoveryDataBean.setRenderAddAssetsAndLiabilities(true);
            tplRecoveryDataBean.setRenderEditAssetsAndLiabilities(false);
			tplRecoveryDataBean.setRenderAddAssetsLiabilitiesHeader(true);
			tplRecoveryDataBean.setRenderAddAssetsLiabilitiesSave(true);
			tplRecoveryDataBean.setRenderEditAssetsLiabilitiesHeader(false);
			tplRecoveryDataBean.setRenderEditAssetsLiabilitiesSave(false);
			tplRecoveryDataBean.setRenderResultAssetsLiabilities(false);
			tplRecoveryDataBean.setAssetsAndLiabilitiesFlag(false);
			tplRecoveryDataBean.setDeleteAssetandLiabilityFlag(false);

		} catch (Exception e) {
        	e.printStackTrace();
		}
		return "success";

	}
	/**
	 * This method is used to Update ClaimFilter for the recovery case.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateAssetsAndLiabilites() {
		if(logger.isDebugEnabled()){
		logger.debug("Inside updateAssetsAndLiabilites");
		}
		try {
			SimpleDateFormat sd = new SimpleDateFormat("MM/dd/yyyy");
			Date sysDate = new Date();
			String sysDateStr = sd.format(sysDate);
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("assetliabilitiesfocus");
			
			List recoveryAssetsLiabilitiesList = tplRecoveryDataBean
					.getTplRecoveryAssetsLiabilitiesList();
			if(validateAssetsAndLiabilities()){
				tplRecoveryDataBean.setAssetsAndLiabilitiesFlag(true);
				if (recoveryAssetsLiabilitiesList.size() > 0) {
					int currentRecord = tplRecoveryDataBean.getCurrentRecord();
				TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO = new TPLRecoveryCaseAssetsAndLiabilitiesVO();
				
				TPLRecoveryCaseAssetsAndLiabilitiesVO tplRecoveryCaseAssetsAndLiabilitiesVO = tplRecoveryDataBean
				.getRecoveryCaseDetailVO()
				.getTplRecoveryCaseAssetsAndLiabilitiesVO();
				
				recoveryCaseAssetsAndLiabilitiesVO.setType(tplRecoveryCaseAssetsAndLiabilitiesVO.getType());
				recoveryCaseAssetsAndLiabilitiesVO.setCode(tplRecoveryCaseAssetsAndLiabilitiesVO.getCode());
				recoveryCaseAssetsAndLiabilitiesVO
						.setSubcode(tplRecoveryCaseAssetsAndLiabilitiesVO.getSubcode());
				if(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount()!=null && StringUtils.isNotEmpty(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount()))
				{
					Double actualAmount = Double.valueOf(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount());
					DecimalFormat formatter = new DecimalFormat("###,###,###.00");
					String fomrattedAmount = formatter.format(actualAmount);
					recoveryCaseAssetsAndLiabilitiesVO.setAmountStr(fomrattedAmount);
					recoveryCaseAssetsAndLiabilitiesVO.setAmount(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount());
				}
				recoveryCaseAssetsAndLiabilitiesVO.setSold(tplRecoveryCaseAssetsAndLiabilitiesVO.isSold());
				recoveryCaseAssetsAndLiabilitiesVO
						.setDescription(tplRecoveryCaseAssetsAndLiabilitiesVO.getDescription());
				recoveryCaseAssetsAndLiabilitiesVO.setUpdateDate(sysDateStr);
				/*recoveryCaseAssetsAndLiabilitiesVO
						.setUpdateDate(tplRecoveryDataBean
								.getRecoveryCaseDetailVO()
								.getTplRecoveryCaseAssetsAndLiabilitiesVO()
								.getUpdateDate());*/
				if(recoveryCaseAssetsAndLiabilitiesVO.getType().equalsIgnoreCase(TPLRecoveryCaseConstants.ASSET)){
					tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssetsDate(sysDateStr);
				}
				if(recoveryCaseAssetsAndLiabilitiesVO.getType().equalsIgnoreCase(TPLRecoveryCaseConstants.LIABILITY)){
					tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilitiesDate(sysDateStr);
				}
				recoveryCaseAssetsAndLiabilitiesVO
				       .setEstateSeqNumber(tplRecoveryCaseAssetsAndLiabilitiesVO.getEstateSeqNumber());
		        recoveryCaseAssetsAndLiabilitiesVO
				       .setVersionNo(tplRecoveryCaseAssetsAndLiabilitiesVO.getVersionNo());

				recoveryAssetsLiabilitiesList.remove(currentRecord);
				recoveryAssetsLiabilitiesList.add(currentRecord,
						recoveryCaseAssetsAndLiabilitiesVO);
				double assetAmount = 0.0;
				double liabilityAmount = 0.0;
				List list = tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList();
				if(list.size() > 0){
					 for(int i = 0; i < list.size(); i++){
						recoveryCaseAssetsAndLiabilitiesVO =(TPLRecoveryCaseAssetsAndLiabilitiesVO)list.get(i);
						/* raj */
						if(recoveryCaseAssetsAndLiabilitiesVO.getType().equalsIgnoreCase(TPLRecoveryCaseConstants.ASSET)){
						// ESPRD00642881 @Ramachandra
							if(recoveryCaseAssetsAndLiabilitiesVO.isSold() != true)
							{	
							  assetAmount += new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
							}
								/*{
							 assetAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalAssets();
							  assetAmount -= new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
							  System.out.println("*****asset amount2 in sold:"+ assetAmount);
							  tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssets(assetAmount);
						}
						else
						{
						  assetAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalAssets();
						    assetAmount += new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
						    System.out.println("*****asset amount3 in else:"+ assetAmount);
						   tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssets(assetAmount);
						}*/
						   tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssets(assetAmount);
							
						}
						// ESPRD00642881 @Ramachandra
						if(recoveryCaseAssetsAndLiabilitiesVO.getType().equalsIgnoreCase(TPLRecoveryCaseConstants.LIABILITY)){
							if(recoveryCaseAssetsAndLiabilitiesVO.isSold()!=true){
								liabilityAmount += new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
							}
							
							tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilities(liabilityAmount);
							
							/*if(recoveryCaseAssetsAndLiabilitiesVO.isSold()==true){
								liabilityAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalLiabilities();
								liabilityAmount -= new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
								tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilities(liabilityAmount);
						}	
						else
						{
							liabilityAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalLiabilities();						
							liabilityAmount += new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
							tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilities(liabilityAmount);
						}*/
						}
								
					}
				}
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseAssetsAndLiabilitiesVO().setTotalAssets(assetAmount);
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseAssetsAndLiabilitiesVO().setTotalLiabilities(liabilityAmount);
				tplRecoveryDataBean.setRenderResultAssetsLiabilities(true);
				tplRecoveryDataBean.setRenderAddAssetsAndLiabilities(false);
			}
		}

		} 
			catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * this mehod is used to save Assets and liabilities Information.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveAssetsAndLiabilites() {
		if(logger.isDebugEnabled()){
			logger.debug("Inside saveAssetsAndLiabilites");
		}
		Double actualAmount=new Double(0.0);
		DecimalFormat formatter = new DecimalFormat("###,###,###.00");
		try {
			if(validateAssetsAndLiabilities()){
				double assetAmount = 0.0;
				double liabilityAmount = 0.0;
				SimpleDateFormat sd = new SimpleDateFormat("MM/dd/yyyy");
				Date sysDate = new Date();
				String sysDateStr = sd.format(sysDate);
				TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
				tplRecoveryDataBean.setFocusThisId("assetliabilitiesfocus");
				tplRecoveryDataBean.setAssetsAndLiabilitiesFlag(true);
			
			if(tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList()==null){
				tplRecoveryDataBean.setTplRecoveryAssetsLiabilitiesList(new ArrayList());
			}
			
			TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO = new TPLRecoveryCaseAssetsAndLiabilitiesVO();
			
			TPLRecoveryCaseAssetsAndLiabilitiesVO tplRecoveryCaseAssetsAndLiabilitiesVO = tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseAssetsAndLiabilitiesVO();
			
			recoveryCaseAssetsAndLiabilitiesVO.setType(tplRecoveryCaseAssetsAndLiabilitiesVO.getType());
			recoveryCaseAssetsAndLiabilitiesVO.setCode(tplRecoveryCaseAssetsAndLiabilitiesVO.getCode());
			recoveryCaseAssetsAndLiabilitiesVO.setSubcode(tplRecoveryCaseAssetsAndLiabilitiesVO.getSubcode());
			if(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount()!=null &&
					StringUtils.isNotEmpty(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount()))
			{
				 actualAmount= Double.valueOf(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount());
				 String fomrattedAmount = formatter.format(actualAmount);
				 recoveryCaseAssetsAndLiabilitiesVO.setAmountStr(fomrattedAmount);
				 recoveryCaseAssetsAndLiabilitiesVO.setAmount(tplRecoveryCaseAssetsAndLiabilitiesVO.getAmount());
			}
			recoveryCaseAssetsAndLiabilitiesVO.setSold(tplRecoveryCaseAssetsAndLiabilitiesVO.isSold());
			recoveryCaseAssetsAndLiabilitiesVO
					.setDescription(tplRecoveryCaseAssetsAndLiabilitiesVO.getDescription());
			recoveryCaseAssetsAndLiabilitiesVO
					.setUpdateDate(sysDateStr);
			
			tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList().add(0,recoveryCaseAssetsAndLiabilitiesVO);
			
			if(recoveryCaseAssetsAndLiabilitiesVO.getType().equalsIgnoreCase(TPLRecoveryCaseConstants.ASSET)){
				assetAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalAssets();
				if(recoveryCaseAssetsAndLiabilitiesVO.isSold() != true)
				{
					assetAmount += actualAmount.doubleValue();
					tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssets(assetAmount);
				}
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssetsDate(sysDateStr);
			}
				/*if(recoveryCaseAssetsAndLiabilitiesVO.isSold() == true){
				
				assetAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalAssets();
				
				assetAmount -= actualAmount.doubleValue();
					//new Double(tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryCaseAssetsAndLiabilitiesVO().getAmount()).doubleValue();
				//String fomrattedAmount = formatter.format(assetAmount);
				
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssets(assetAmount);
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssetsDate(sysDateStr);
				}
				else
				{
				    assetAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalAssets();
				    
					assetAmount += actualAmount.doubleValue();
				    //assetAmount += new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
				    //String fomrattedAmount = formatter.format(assetAmount);
					
					tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssets(assetAmount);
					tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssetsDate(sysDateStr);
				}
			}*/
			
			if(recoveryCaseAssetsAndLiabilitiesVO.getType().equalsIgnoreCase(TPLRecoveryCaseConstants.LIABILITY)){
				liabilityAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalLiabilities();
				if(recoveryCaseAssetsAndLiabilitiesVO.isSold()!=true){
					liabilityAmount += actualAmount.doubleValue();
					tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilities(liabilityAmount);
				}
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilitiesDate(sysDateStr);
			}
				/*if(recoveryCaseAssetsAndLiabilitiesVO.isSold()==true){
				
				liabilityAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalLiabilities();
				
				//liabilityAmount -= new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
				
				liabilityAmount -= actualAmount.doubleValue();
				
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilities(liabilityAmount);
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilitiesDate(sysDateStr);
				
			}		
			else
			{
				
				liabilityAmount=tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalLiabilities();
				//liabilityAmount += new Double(recoveryCaseAssetsAndLiabilitiesVO.getAmount()).doubleValue();
				
				liabilityAmount += actualAmount.doubleValue();
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilities(liabilityAmount);
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilitiesDate(sysDateStr);
				
			}
			}*/
			tplRecoveryDataBean.setRenderResultAssetsLiabilities(true);
			tplRecoveryDataBean.setRenderAddAssetsAndLiabilities(false);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}
	
	/**
	 * @return
	 */
	public boolean validateAssetsAndLiabilities(){
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("assetliabilitiesfocus");
		TPLRecoveryCaseDetailVO tplRecoveryCaseDetailVO = tplRecoveryDataBean.getRecoveryCaseDetailVO();
		boolean result = true;
		String type = tplRecoveryCaseDetailVO.getTplRecoveryCaseAssetsAndLiabilitiesVO().getType();
		String code = tplRecoveryCaseDetailVO.getTplRecoveryCaseAssetsAndLiabilitiesVO().getCode();
		String amount = tplRecoveryCaseDetailVO.getTplRecoveryCaseAssetsAndLiabilitiesVO().getAmount();
			if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0083(type,code,amount)) {
				result = false;
			}
			if (TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0085(type,code)) {
				result = false;
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY0088(code,type)){
				result = false;
			}
			if(TPLRecoveryCommonValidator.validateTPLRCVYMNTRCVY008(type,code,amount) ){
				result = false;
			}
		return result;
	}

	/**
	 * this method is used to edit Assets and liabilities Information.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void liabilitiesAction(ValueChangeEvent event) {
		
		String selectedValue = event.getNewValue().toString();		
		TPLRecoveryDataBean getTPLRecoveryDataBean = getTPLRecoveryDataBean();
		getTPLRecoveryDataBean.getRecoveryCaseDetailVO()
		.getTplRecoveryCaseAssetsAndLiabilitiesVO()
		.setSold(true);
		
		if (selectedValue.equals("LIA")) {
			if (getTPLRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().isSold()) {
								
				if(!getTPLRecoveryDataBean.isRenderEditAssetsAndLiabilities()){
									
				HtmlSelectBooleanCheckbox addSoldComponent = (HtmlSelectBooleanCheckbox)findComponentInRoot("TPLADMSBC1");
				addSoldComponent.setValue(false);
				}
				else
				{
					HtmlSelectBooleanCheckbox editSoldComponent = (HtmlSelectBooleanCheckbox)findComponentInRoot("TPLADMSBC2");					
					editSoldComponent.setValue(false);
				}
				
				
				getTPLRecoveryDataBean.getRecoveryCaseDetailVO()
						.getTplRecoveryCaseAssetsAndLiabilitiesVO()
						.setSold(false);
			}
			getTPLRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO()
					.setDisableSold(true);
		}

		else if (selectedValue.equals("AST")) {
			getTPLRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO()
					.setDisableSold(false);
		}

	}

	public String editAssetsAndLiabilites() {

		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("assetliabilitiesfocus");
			 FacesContext facesContext = FacesContext.getCurrentInstance(); 
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			tplRecoveryDataBean.setSelectedAssetsAndLiabilitiesIndex(rowValue);
			// Audit

			if (tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList() != null) {
				UIComponent component = findComponentInRoot("AssetsAuditId");
				if (component != null) {
					AuditHistoryTable auditHistoryTable = (AuditHistoryTable) component;
					auditHistoryTable.getAuditLogControllerBean()
							.setPlusMinusFlag(false);
				}
			}
			 
			Integer rowValueInt = new Integer(rowValue);
			TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO = (TPLRecoveryCaseAssetsAndLiabilitiesVO) tplRecoveryDataBean
					.getTplRecoveryAssetsLiabilitiesList().get(
							rowValueInt.intValue());
			
			
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().setType(
							recoveryCaseAssetsAndLiabilitiesVO.getType());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().setCode(
							recoveryCaseAssetsAndLiabilitiesVO.getCode());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().setSubcode(
							recoveryCaseAssetsAndLiabilitiesVO.getSubcode());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().setAmount(
							recoveryCaseAssetsAndLiabilitiesVO.getAmount());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().setSold(
							recoveryCaseAssetsAndLiabilitiesVO.isSold());

			if(tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().getType().equalsIgnoreCase("LIA")){
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
			.getTplRecoveryCaseAssetsAndLiabilitiesVO()
			.setDisableSold(true);
			}else{
				tplRecoveryDataBean.getRecoveryCaseDetailVO()
				.getTplRecoveryCaseAssetsAndLiabilitiesVO()
				.setDisableSold(false);
			}
			tplRecoveryDataBean
					.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO()
					.setDescription(
							recoveryCaseAssetsAndLiabilitiesVO.getDescription());

			//ESPRD00579570comented
			/*tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().setUpdateDate(
							recoveryCaseAssetsAndLiabilitiesVO.getUpdateDate());
			*/
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO()
					.setEstateSeqNumber(
							recoveryCaseAssetsAndLiabilitiesVO.getEstateSeqNumber());
		
		   tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTplRecoveryCaseAssetsAndLiabilitiesVO().setVersionNo(
							recoveryCaseAssetsAndLiabilitiesVO.getVersionNo());
		   // Audit
		   tplRecoveryDataBean.getRecoveryCaseDetailVO()
			.getTplRecoveryCaseAssetsAndLiabilitiesVO().setAuditKeyList(
					recoveryCaseAssetsAndLiabilitiesVO.getAuditKeyList());

			tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());

			tplRecoveryDataBean.setRenderEditAssetsAndLiabilities(true);
			tplRecoveryDataBean.setRenderEditAssetsLiabilitiesHeader(true);
			tplRecoveryDataBean.setRenderEditAssetsLiabilitiesSave(true);
			tplRecoveryDataBean.setRenderAddAssetsAndLiabilities(false);
			tplRecoveryDataBean.setRenderResultAssetsLiabilities(false);
			tplRecoveryDataBean.setDeleteAssetandLiabilityFlag(false);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * this method used to cancelAssetsAndLiabilities Information .
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void cancelAssetsAndLiabilities() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("assetliabilitiesfocus");

		recoveryDataBean.setRenderAddAssetsAndLiabilities(false);
		recoveryDataBean.setRenderEditAssetsAndLiabilities(false);

	}

	/**
	 * this method is used resetAssetsAndLiabilities Information.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String resetAssetsAndLiabilities() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		
		recoveryDataBean.setFocusThisId("assetliabilitiesfocus");

		TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO = new TPLRecoveryCaseAssetsAndLiabilitiesVO();
		recoveryDataBean.getRecoveryCaseDetailVO()
				.setTplRecoveryCaseAssetsAndLiabilitiesVO(
						recoveryCaseAssetsAndLiabilitiesVO);
		return "success";

	}
	
	public String resetAssetsAndLiabilitiesUpdate() {
		try {
			TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
			recoveryDataBean.setFocusThisId("assetliabilitiesfocus");
			//FacesContext facesContext = FacesContext.getCurrentInstance(); Find Bug Fix
			int rowValueInt = recoveryDataBean.getCurrentRecord();

			//String rowValue = (String)
			// facesContext.getExternalContext().getRequestParameterMap().get("rowIndex");
			TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO = (TPLRecoveryCaseAssetsAndLiabilitiesVO) recoveryDataBean.getTplRecoveryAssetsLiabilitiesList().get(rowValueInt);
			TPLRecoveryCaseAssetsAndLiabilitiesVO recoveryCaseAssetsAndLiabilitiesVO1 = new TPLRecoveryCaseAssetsAndLiabilitiesVO();
			
			recoveryCaseAssetsAndLiabilitiesVO1.setType(recoveryCaseAssetsAndLiabilitiesVO.getType());
			recoveryCaseAssetsAndLiabilitiesVO1.setCode(recoveryCaseAssetsAndLiabilitiesVO.getCode());
			recoveryCaseAssetsAndLiabilitiesVO1.setAmount(recoveryCaseAssetsAndLiabilitiesVO.getAmount());
			recoveryCaseAssetsAndLiabilitiesVO1.setUpdateDate(recoveryCaseAssetsAndLiabilitiesVO.getUpdateDate());
			//Start Added code for the defect ESPRD00904347
			recoveryCaseAssetsAndLiabilitiesVO1.setSubcode(recoveryCaseAssetsAndLiabilitiesVO.getSubcode());
			recoveryCaseAssetsAndLiabilitiesVO1.setSold(recoveryCaseAssetsAndLiabilitiesVO.isSold());	
			recoveryCaseAssetsAndLiabilitiesVO1.setDescription(recoveryCaseAssetsAndLiabilitiesVO.getDescription());
			
		
			
			recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryCaseAssetsAndLiabilitiesVO(recoveryCaseAssetsAndLiabilitiesVO1);
			if(recoveryCaseAssetsAndLiabilitiesVO1.getType().equalsIgnoreCase("LIA")){				
				recoveryDataBean.getRecoveryCaseDetailVO()
			.getTplRecoveryCaseAssetsAndLiabilitiesVO()
			.setDisableSold(true);				
			}else{
				recoveryDataBean.getRecoveryCaseDetailVO()
				.getTplRecoveryCaseAssetsAndLiabilitiesVO()
				.setDisableSold(false);
			}
				//END Added code for the defect ESPRD00904347
			recoveryDataBean.setCurrentRecord(rowValueInt);

			/*msqVo1.setTcn(msqVo.getTcn());
			msqVo1.setIncludedInMSQ(msqVo.getIncludedInMSQ());
			msqVo1.setMsqType(msqVo.getMsqType());
			msqVo1.setMedicalServiceDate(msqVo.getMedicalServiceDate());
			msqVo1.setManualRequest(msqVo.getManualRequest());
			msqVo1.setRequestProcessed(msqVo.getRequestProcessed());
			msqVo1.setFirstNotice(msqVo.getFirstNotice());
			msqVo1.setSecondNotice(msqVo.getSecondNotice());
			msqVo1.setNonResponsenotification(msqVo
					.getNonResponsenotification());
			msqVo1.setReimbursementAmount(msqVo.getReimbursementAmount());
			msqVo1.setAdjudicationDate(msqVo.getAdjudicationDate());
			msqVo1.setResponseDate(msqVo.getResponseDate());
			msqVo1.setReturnResponse(msqVo.getReturnResponse());
			msqVo1.setForceMSQ(msqVo.getForceMSQ());*/

			/*msqDataBean.setMsqVo(msqVo1);
			msqDataBean.setCurrentRecord(rowValueInt);
			msqDataBean.setAddMSQLineRendered(false);
			msqDataBean.setResultRenderedUpdateMSQ(false);
			msqDataBean.setEditMSQLineRendered(true);*/
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "success";
	}

	


	/**
	 * this method for cancel BillingInfomation.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void cancelBillingInfo() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("addbillngfocus");
		recoveryDataBean.setRenderEditBillingInfo(false);
		recoveryDataBean.setRenderAddBillingInfo(false);

	}

	/**
	 * this method used for Reset the BillingInfomation.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String resetBillingInfo() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("addbillngfocus");
		int rowIndex=recoveryDataBean.getCurrentRecord();
        if(recoveryDataBean.isRenderEditBillingInfo()){
        	TPLRecoveryCaseBillingInformationVO tplRecoveryCaseBillingInformationVO=recoveryDataBean.getTempRecoveryCaseBillingInformationVO();
        	TPLRecoveryCaseBillingInformationVO tempTPLRecoveryCaseBillingInformationVO = null;
        	if(tplRecoveryCaseBillingInformationVO!=null){

				tempTPLRecoveryCaseBillingInformationVO=new TPLRecoveryCaseBillingInformationVO();
				tempTPLRecoveryCaseBillingInformationVO.setAddedAuditTimeStamp(tplRecoveryCaseBillingInformationVO.getAddedAuditTimeStamp());
				tempTPLRecoveryCaseBillingInformationVO.setAddedAuditUserID(tplRecoveryCaseBillingInformationVO.getAddedAuditUserID());
				tempTPLRecoveryCaseBillingInformationVO.setAuditTimeStamp(tplRecoveryCaseBillingInformationVO.getAuditTimeStamp());
				tempTPLRecoveryCaseBillingInformationVO.setAuditUserID(tplRecoveryCaseBillingInformationVO.getAuditUserID());
				tempTPLRecoveryCaseBillingInformationVO.setBillAmount(tplRecoveryCaseBillingInformationVO.getBillAmount());
				tempTPLRecoveryCaseBillingInformationVO.setBillDate(tplRecoveryCaseBillingInformationVO.getBillDate());
				tempTPLRecoveryCaseBillingInformationVO.setBillingFrequencyCode(tplRecoveryCaseBillingInformationVO.getBillingFrequencyCode());
				tempTPLRecoveryCaseBillingInformationVO.setBillStartDate(tplRecoveryCaseBillingInformationVO.getBillStartDate());
				tempTPLRecoveryCaseBillingInformationVO.setEnityID(tplRecoveryCaseBillingInformationVO.getEnityID());
				tempTPLRecoveryCaseBillingInformationVO.setEntityIDType(tplRecoveryCaseBillingInformationVO.getEntityIDType());
				tempTPLRecoveryCaseBillingInformationVO.setEntityName(tplRecoveryCaseBillingInformationVO.getEntityName());
				tempTPLRecoveryCaseBillingInformationVO.setEntityTpye(tplRecoveryCaseBillingInformationVO.getEntityTpye());
				String freqDescription = TPLRecoveryConversionHelper.getSourceCodeDescription(
						recoveryDataBean.getBillingFrequencyList(),tplRecoveryCaseBillingInformationVO.getBillingFrequencyCode());
				tempTPLRecoveryCaseBillingInformationVO.setBillingFrequencyCodeDesc(freqDescription);
				String description=TPLRecoveryConversionHelper.getSourceCodeDescription(
						 recoveryDataBean.getEntityTypeList(),tplRecoveryCaseBillingInformationVO.getEntityTpye());					
				tempTPLRecoveryCaseBillingInformationVO.setEntityTypeDesc(description);
				if(tplRecoveryCaseBillingInformationVO.getEntityTpye().equalsIgnoreCase("SE")){
					tempTPLRecoveryCaseBillingInformationVO.setEntityIDType("O-Other");
				}else{
					description=TPLRecoveryConversionHelper.getSourceCodeDescription(
											recoveryDataBean.getEntityIdTypeList(),
											tplRecoveryCaseBillingInformationVO.getEntityIDType());		
					tempTPLRecoveryCaseBillingInformationVO.setEntityIDType(description);
				}
				tempTPLRecoveryCaseBillingInformationVO.setFcn(tplRecoveryCaseBillingInformationVO.getFcn());
				tempTPLRecoveryCaseBillingInformationVO.setLetterType(tplRecoveryCaseBillingInformationVO.getLetterType());
				tempTPLRecoveryCaseBillingInformationVO.setPayeepayerID(tplRecoveryCaseBillingInformationVO.getPayeepayerID());
				tempTPLRecoveryCaseBillingInformationVO.setRecoveryAmount(tplRecoveryCaseBillingInformationVO.getRecoveryAmount());
				tempTPLRecoveryCaseBillingInformationVO.setRecoveryDate(tplRecoveryCaseBillingInformationVO.getRecoveryDate());
				tempTPLRecoveryCaseBillingInformationVO.setTplRecoveryBillingAddressList(tplRecoveryCaseBillingInformationVO.getTplRecoveryBillingAddressList());
				tempTPLRecoveryCaseBillingInformationVO.setTplrecoverycasebillingaddressvo(tplRecoveryCaseBillingInformationVO.getTplrecoverycasebillingaddressvo());
				tempTPLRecoveryCaseBillingInformationVO.setVersionNo(tplRecoveryCaseBillingInformationVO.getVersionNo());
				recoveryDataBean.getTplRecoveryAddBillingInfoList().set(rowIndex,tempTPLRecoveryCaseBillingInformationVO);
				recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryBillingVO(
						tempTPLRecoveryCaseBillingInformationVO);
			
        	}
        }else{
			TPLRecoveryCaseBillingInformationVO recoveryCaseBillingInformationVO = new TPLRecoveryCaseBillingInformationVO();
			recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryBillingVO(
					recoveryCaseBillingInformationVO);
	   }
		return "success";

	}

	/**
	 * this method is for Edit Billing Address.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String editBillingAddress() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			Integer rowValueInt = new Integer(rowValue);
			com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseBillingAddressVO
			tplRecoveryCaseBillingAddressVO = 
				(com.acs.enterprise.mmis.operations.tpladministration.common.vo.TPLRecoveryCaseBillingAddressVO) tplRecoveryDataBean
					.getTplRecoveryBillingAddressList().get(
							rowValueInt.intValue());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryBillingAddressVO().setSel(
							tplRecoveryCaseBillingAddressVO.isSel());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryBillingAddressVO().setType(
							tplRecoveryCaseBillingAddressVO.getType());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryBillingAddressVO().setAddress(
							tplRecoveryCaseBillingAddressVO.getAddress());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryBillingAddressVO().setCity(
							tplRecoveryCaseBillingAddressVO.getCity());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryBillingAddressVO().setState(
							tplRecoveryCaseBillingAddressVO.getState());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryBillingAddressVO().setZip(
							tplRecoveryCaseBillingAddressVO.getZip());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryBillingAddressVO().setCounty(
							tplRecoveryCaseBillingAddressVO.getCounty());

			tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());
			tplRecoveryDataBean.setRenderEditBillingAddress(true);
			tplRecoveryDataBean.setRenderResultBillingAddress(false);
			//tplRecoveryDataBean.setRenderAddBillingInfo(true);

		} catch (Exception e) {
        	e.printStackTrace();
		}
		return "success";

	}

	/**
	 * This method is used to Save BillingAddress.
	 * 
	 * @return
	 * @param hippEffectivePeriod
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String updateBillingAddress() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			List billingAddressList = tplRecoveryDataBean.getTplRecoveryBillingAddressList();
			if (null != billingAddressList && billingAddressList.size() > 0) {
				int currentRecord = tplRecoveryDataBean.getCurrentRecord();
				
				TPLRecoveryCaseBillingAddressVO recoveryCaseBillingAddressVO = new TPLRecoveryCaseBillingAddressVO();
				recoveryCaseBillingAddressVO.setSel(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO().isSel());

				recoveryCaseBillingAddressVO.setType(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO().getType());

				recoveryCaseBillingAddressVO.setAddress(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO().getAddress());

				recoveryCaseBillingAddressVO.setCity(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO().getCity());

				recoveryCaseBillingAddressVO.setState(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO().getState());
				recoveryCaseBillingAddressVO.setZip(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO().getZip());
				recoveryCaseBillingAddressVO.setCounty(tplRecoveryDataBean
						.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO().getCounty());
				billingAddressList.remove(currentRecord);
				billingAddressList.add(currentRecord,recoveryCaseBillingAddressVO);
				tplRecoveryDataBean.setRenderResultBillingAddress(true);
				tplRecoveryDataBean.setRenderEditInterestedPartyAddress(false);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";
	}

	/**
	 * this method for save Billing Address.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String saveBillingAddress() {
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();

			List list = tplRecoveryDataBean.getTplRecoveryBillingAddressList();

			TPLRecoveryCaseBillingAddressVO recoveryCaseBillingAddressVO = new TPLRecoveryCaseBillingAddressVO();

			recoveryCaseBillingAddressVO.setSel(tplRecoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO()
					.isSel());

			recoveryCaseBillingAddressVO.setType(tplRecoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO()
					.getType());

			recoveryCaseBillingAddressVO.setAddress(tplRecoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO()
					.getAddress());

			recoveryCaseBillingAddressVO.setCity(tplRecoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO()
					.getCity());

			recoveryCaseBillingAddressVO.setState(tplRecoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO()
					.getState());
			recoveryCaseBillingAddressVO.setZip(tplRecoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO()
					.getZip());
			recoveryCaseBillingAddressVO.setCounty(tplRecoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryBillingAddressVO()
					.getCounty());

			list.add(recoveryCaseBillingAddressVO);

			tplRecoveryDataBean.setTplRecoveryBillingAddressList(list);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}

	/**
	 * this method Reset Billing Address.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public String resetBillingAddress() {
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();

		TPLRecoveryCaseBillingAddressVO recoveryCaseBillingAddressVO = new TPLRecoveryCaseBillingAddressVO();
		recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryBillingAddressVO(
				recoveryCaseBillingAddressVO);
		return "success";

	}

	/**
	 * this method for Cancel Billing Address Information.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void cancelBillingAddress() {
		TPLRecoveryDataBean recovceryDataBean = getTPLRecoveryDataBean();
		recovceryDataBean.setRenderBillingAddress(false);

	}


	
	/**
	 * @return Returns the data.
	 *//*
	public UIData getData() {
		return data;
	}

	*//**
	 * @param data
	 *            The data to set.
	 *//*
	public void setData(UIData data) {
		this.data = data;
	}*/

	/**
	 * @return Returns the searchColumnSortFlag.
	 */
	public boolean[] getSearchColumnSortFlag() {
		return searchColumnSortFlag;
	}

	/**
	 * @param searchColumnSortFlag
	 *            The searchColumnSortFlag to set.
	 */
	public void setSearchColumnSortFlag(boolean[] searchColumnSortFlag) {
		this.searchColumnSortFlag = searchColumnSortFlag;
	}

	
	

	/**
	 * This method is used to validate Policy Number.
	 * 
	 * @generated "UML to Java V1.4
	 *            (com.ibm.xtools.transform.uml2.java.internal.UML2JavaTransform)"
	 */
	public void validatePolicyNumber() {
		try {
			if (!validatePolicyNum()) {
				TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
				tplRecoveryDataBean.setFocusThisId("policynumberfocus");
				String policyNumber = tplRecoveryDataBean
						.getRecoveryCaseDetailVO()
						.getRecoveryCasePolicyInfoVO().getPolicyNumber();
				if (StringUtils.isNotEmpty(policyNumber)) {
					TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
					TPLRecoveryCasePolicyInfoVO tplRecoveryCasePolicyInfoVO = tplRecoveryDelegate
							.validatePolicyNumber(policyNumber);
					
					/*tplRecoveryDataBean.getRecoveryCaseDetailVO()
							.setRecoveryCasePolicyInfoVO(
									tplRecoveryCasePolicyInfoVO);*/
					if(tplRecoveryCasePolicyInfoVO.getPolicyNumber() == null || tplRecoveryCasePolicyInfoVO.getPolicyHolderName() == null){
						tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCasePolicyInfoVO().setPolicyNumber(policyNumber);
						tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCasePolicyInfoVO().setPolicyHolderName("");
						//Infinite Defect Resolution :ESPRD00480198
						TPLAdministrationHelper.setAddRecoveryInformation(TPLRecoveryCaseConstants.TPL_RCVRY_POLICY_NUMB_NOT_FOUND,"policyNumber");
					//	TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RCVRY_POLICY_NUMB_NOT_FOUND);
					}else{
						tplRecoveryDataBean.getRecoveryCaseDetailVO()
						.setRecoveryCasePolicyInfoVO(tplRecoveryCasePolicyInfoVO);
					}

				}
			} else {
				//Infinite Defect Resolution :ESPRD00480198
				TPLHIPPValidateHelper.errorForRequiredField("policyNumber");
				
			}
		} catch (TPLRecoveryBusinessException hippBusinessException) {
			//Infinite Defect Resolution :ESPRD00480198
			TPLAdministrationHelper.setAddRecoveryInfo(TPLRecoveryCaseConstants.TPL_RCVRY_POLICY_NUMB_NOT_FOUND);
		} catch (Exception e) {
			FacesMessage message = new FacesMessage();
			message.setDetail(e.getMessage());
			FacesContext.getCurrentInstance().addMessage("abc", message);
		}
	}
	
	/**
	 * @return
	 */
	public boolean validatePolicyNum() {
		boolean result = true;
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("policynumberfocus");

		if (recoveryDataBean.getRecoveryCaseDetailVO() != null) {
			TPLRecoveryCasePolicyInfoVO tplRecoveryCasePolicyInfoVO = recoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryCasePolicyInfoVO();

			if (tplRecoveryCasePolicyInfoVO != null) {
				String policyNumber = recoveryDataBean
						.getRecoveryCaseDetailVO()
						.getRecoveryCasePolicyInfoVO().getPolicyNumber();

				if (StringUtils.isNotEmpty(policyNumber)) {
					result = false;
				}
			}
		}

		return result;
	}
	

	/**
	 * Validates CarrierID
	 */
	public void validateCarrierID() 
	{
 	 try {
		if (!validateCarrier()) {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("carrieridfocus");
			String carrierID = tplRecoveryDataBean.getRecoveryCaseDetailVO()
											.getRecoveryCaseCarrierInfoVO().getCarrierID();
			String groupID = tplRecoveryDataBean.getRecoveryCaseDetailVO()
											.getRecoveryCaseCarrierInfoVO().getGroupID();
				
			if (StringUtils.isNotEmpty(carrierID)) {
					//String carrierName = "";
				String commonEntitySK = null;
				String carrierClaimNum = null;
				TPLPolicyDelegate tplPolicyDelegate = new TPLPolicyDelegate();
				TPLCarrierRequestVO tplCarrierRequestVO = new TPLCarrierRequestVO();
				TPLCarrier tplCarrier = new TPLCarrier();
                tplCarrier.setCarrierID(carrierID);
                tplCarrierRequestVO.setTplCarrier(tplCarrier);
				TPLCarrier tplCarrierDetails = tplPolicyDelegate.validateCarrierForPOLICYHIPP(tplCarrierRequestVO);
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO()
								   .setCarrierName(tplCarrierDetails.getCarrierName());
			    tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO()
			    				   .setCarrierID(tplCarrierDetails.getCarrierID());
				if (tplCarrierDetails.getCommonEntity() != null )
		        {
                   Set addressUsageSet=tplCarrierDetails.getCommonEntity().getAddressUsage();
            	   Iterator adrUsgIterator=addressUsageSet.iterator();
            	   TPLRecoveryCaseCarrierAddressVO  tplRecoveryCaseCarrierAddressVO = null;
            	   List arrayList = new ArrayList();
            	   while(adrUsgIterator.hasNext())
            	   {
            		 AddressUsage addressUsage=(AddressUsage)adrUsgIterator.next();
            		 if(addressUsage!=null)
            		 {
            			Address address=addressUsage.getAddress();
            			if(address!=null)
            			{
            				tplRecoveryCaseCarrierAddressVO = new TPLRecoveryCaseCarrierAddressVO();
							tplRecoveryCaseCarrierAddressVO.setSel(false);
							tplRecoveryCaseCarrierAddressVO.setSelectAddress(Boolean.toString(false));
							tplRecoveryCaseCarrierAddressVO.setType(addressUsage.getAddressUsageTypeCode());
							//Code added for ESPRD00579556
							if (addressUsage.getAddressUsageTypeCode()!=null)
							{
								String description = TPLRecoveryConversionHelper.getSourceCodeDescription(
										               getTPLRecoveryDataBean().getPolicyAddressTypeList(),
										               addressUsage.getAddressUsageTypeCode());
								tplRecoveryCaseCarrierAddressVO.setType(description);
    						}
    						tplRecoveryCaseCarrierAddressVO.setAddress1(addressUsage.getAddress().getAddressLine1());
							//ram
							/*tplRecoveryCaseCarrierAddressVO
							.setAddressSK(address.getAddressSK().toString());*/
    										
    						tplRecoveryCaseCarrierAddressVO.setAddress2(addressUsage
    														.getAddress().getAddressLine2());
    										
							/*tplRecoveryCaseCarrierAddressVO.setAddressSk(address.getAddressSK().toString());

							tplRecoveryCaseCarrierAddressVO.setAddressSK(address.getAddressSK().toString());*/
							//ram							
							tplRecoveryCaseCarrierAddressVO.setCity(addressUsage
														   .getAddress().getCityName());
							tplRecoveryCaseCarrierAddressVO.setState(addressUsage
														   .getAddress().getStateCode());
							// Defect Fix ESPRD00659123
							tplRecoveryCaseCarrierAddressVO.setZip((addressUsage
											.getAddress().getZipCode5() != null ? addressUsage
											.getAddress().getZipCode5() : "" )
    										+ TPLAdministrationConstants.SPACE_STRING
    										+ (addressUsage.getAddress()
    										.getZipCode4() != null ? addressUsage
    	    								.getAddress().getZipCode4() : "" ));
    										
							tplRecoveryCaseCarrierAddressVO.setCounty(addressUsage
											.getAddress().getCountyCode()!= null ? addressUsage
											.getAddress().getCountyCode() : "");
    						//END
							tplRecoveryCaseCarrierAddressVO.setZip4(addressUsage
														   .getAddress().getZipCode4());
							tplRecoveryCaseCarrierAddressVO.setZip5(addressUsage
														   .getAddress().getZipCode5());

    					    tplRecoveryCaseCarrierAddressVO.setAddressSK(addressUsage
    												       .getAddress().getAddressSK().toString());
    						arrayList.add(tplRecoveryCaseCarrierAddressVO);
                          }
                      }
                   }
                   tplRecoveryDataBean.setTplRecoveryCarrierInfoList(arrayList);
			    }
			    else
			    {
	            	if (null != tplRecoveryDataBean.getTplRecoveryCarrierInfoList())
	            	{
	            		tplRecoveryDataBean.getTplRecoveryCarrierInfoList().clear();
	            	}
			            	
			    }
			  }
			} 
		} catch (TPLPolicyBusinessException hippBusinessException) {
			hippBusinessException.printStackTrace();
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			if (hippBusinessException.getMessage().equals("invalid Carrier"))
			{
				//Infinite Defect Resolution :ESPRD00480198
				TPLAdministrationHelper.setAddHIPPInfoMessageToId(TPLAdministrationConstants.CARRIER_ID_NOT_FOUND_IN_RCVRYCASE,"carrierID",false,TPLAdministrationConstants.POLICY_PROPERTIES_FILE);
				tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO().setCarrierName("");
				/*tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO()
					.setCarrierClaimNumber("");*/
				List groupIdList = new ArrayList();
				groupIdList.add(new SelectItem(""));
				tplRecoveryDataBean.setTplRecoveryCarrierGroupIDList(groupIdList);
				tplRecoveryDataBean.setTplRecoveryCarrierInfoList(new ArrayList());
				tplRecoveryDataBean.setTplRecoveryCarrierGroupIDList(new ArrayList());
			}
			//TPLAdministrationHelper.setAddHIPPInfo(TPLHIPPConstants.WORKER_DETAILS_NOT_FOUND);
		} catch (Exception e) {
			e.printStackTrace();
			FacesMessage message = new FacesMessage();
			message.setDetail(e.getMessage());
			FacesContext.getCurrentInstance().addMessage("abc", message);
		}
	}
	/**
	 * @return
	 */
	public boolean validateCarrier() {
		boolean result = false;
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("carrieridfocus");

		if (recoveryDataBean.getRecoveryCaseDetailVO() != null) {
			TPLRecoveryCaseCarrierInfoVO tplRecoveryCaseCarrierInfoVO = recoveryDataBean
					.getRecoveryCaseDetailVO().getRecoveryCaseCarrierInfoVO();

			if (tplRecoveryCaseCarrierInfoVO != null) {
				String carrierID = recoveryDataBean.getRecoveryCaseDetailVO()
						.getRecoveryCaseCarrierInfoVO().getCarrierID();
					//Added for defect ESPRD00088999
				if (StringUtils.isNotEmpty(carrierID)&& !EnterpriseCommonValidator.validateAlphaNumeric(carrierID.trim())) {
					result = true;
					//	Infinite Defect Resolution :ESPRD00480198
					 TPLAdministrationHelper.setAddHIPPInfoMessageToId(TPLAdministrationConstants.CARRIER_ID_ALPHANUMERIC,"carrierID",false,TPLRecoveryCaseConstants.RECOVERYSEARCHPortletResource);
				}
				if (StringUtils.isEmpty(carrierID) && isCarrierIDRequired()){
					//Infinite Defect Resolution :ESPRD00480198
					result = true;
					TPLHIPPValidateHelper.errorForRequiredField("carrierID");
				}
			}
		}
		return result;
	}
	
	/**
	 * 
	 */
	public String  setRecoveryResultVo() {
        TPLRecoverySearchDataBean tplRecoverySearchDataBean = getTPLRecoverySearchDataBean();
        TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
        
        tplRecoveryDataBean.setRenderUpdateRecovery(true);
        tplRecoveryDataBean.setRenderAddMode(false);
        tplRecoveryDataBean.setDisableRecoveryMethod(false);
        tplRecoveryDataBean.setShowWorkerDetails(true);
       // tplRecoveryDataBean.setDisableRecoveryMethod(true);

        FacesContext facesContext = FacesContext.getCurrentInstance();
        String rowValue = (String) facesContext.getExternalContext()
                                               .getRequestParameterMap()
                                               .get("rowIndex");
        String action = (String) facesContext.getExternalContext()
                                             .getRequestParameterMap()
                                             .get("ACTION_NAME");
        Integer rowValueInt = null;

        if (StringUtils.isNotEmpty(rowValue)) {
            rowValueInt = new Integer(rowValue);
        }

        List searchResultList = tplRecoverySearchDataBean.getSearchResultList();
        ActionRequest request = (ActionRequest) FacesContext.getCurrentInstance()
                                                            .getExternalContext()
                                                            .getRequest();

        if (searchResultList.size() > 0) {
            if (rowValueInt != null) {
                if ("sourceAction1".equalsIgnoreCase(action)) {
                    tplRecoverySearchDataBean.setRenderedSearch(false);
                    tplRecoverySearchDataBean.setRenderedRecoveryCaseDetails(false);
                    tplRecoveryDataBean.setShowWorkerDetails(true);

                    TPLRecoverySearchResultVO tplRecoverySearchResultVO = (TPLRecoverySearchResultVO) searchResultList.get(rowValueInt.intValue());
                    //CR640833
    				TPLAdministrationHelper administrationHelper = new TPLAdministrationHelper();
    				administrationHelper.logEventInquiry(TPLAdministrationConstants.PORTLET_NAME_RECOVERY, tplRecoverySearchResultVO.getRecoveryCaseID(), GlobUserID);
    				  boolean lockFlag=false;
    	                //This added for CR779820
    	             try {
    						LockDelegete lockDelegete=new LockDelegete();
    						lockFlag =lockDelegete.lockExist(TPLAdministrationConstants.TABLE_NAME_RECOVERY,tplRecoverySearchResultVO.getRecoveryCaseID().toString(),null);
    						if(lockFlag){
    							TPLAdministrationHelper.setErrorMessage(EnterpriseMessageConstants.ERR_GLB_DATA_CHANGED_TRY_AGAIN);
    							return "";
    						}
    					} catch (EnterpriseBaseBusinessException e) {
    						e.printStackTrace();
    					}
                    request.setAttribute("sendVO1", tplRecoverySearchResultVO);
                }
            }
        }
        return "";
    }
	
	/**
	 * @param tplRecoverySearchResultVO
	 */
	public void getRecoveryCaseDetails(TPLRecoverySearchResultVO tplRecoverySearchResultVO)
	{
		String caseId = tplRecoverySearchResultVO.getRecoveryCaseID();
		// DEFECT_ESPRD00867983_PGM-GLB_TPL_12-14-12
		LettersAndResponsesDataBean lettersAndResponsesDataBean = getLettersDataBeanFromContext();
		lettersAndResponsesDataBean.setLetterGenerationInputVO(new LetterGenerationInputVO());
		if(lettersAndResponsesDataBean.getLetterGenerationRequests() != null)
		{
		lettersAndResponsesDataBean.getLetterGenerationRequests().clear();
		}
		lettersAndResponsesDataBean.setRenderEditSection(false);
		lettersAndResponsesDataBean.setShowSucessMessage(false);
		// Ends //
		getRecoveryDetails(caseId);
	}
	
	/**
	 * @param caseId
	 */
	public void getRecoveryDetails(String caseId){
		TPLRecoveryDataBean  tplRecoveryDataBean = getTPLRecoveryDataBean();		
		tplRecoveryDataBean.setRenderUpdateRecovery(true);
		tplRecoveryDataBean.setRenderRouterPage(true);
		tplRecoveryDataBean.setRenderAlert(true);
		tplRecoveryDataBean.setRenderEditResponse(false);
		tplRecoveryDataBean.setSaveResponseDetails(false); //ESPRD00853186
		tplRecoveryDataBean.setDisableFixedAmount(true); //CR ESPRD00915907
		getTPLAlertDataBean().setRenderEditAlert(false);
		getTPLAlertDataBean().setAlertVO(new TPLAlertVO());
		//ESPRD00901520
		TPLNotesHelper.getCommonEntityDataBean().setMainNotesRender(false);
		TPLRecoveryCaseDetail rcvryCase = null;
		RecoveryResponse recoveryResponse = null;
		try 
		{
			TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();			
			recoveryResponse = tplRecoveryDelegate.getRecoveryCaseDetails(caseId);			
			//As per defect ESPRD00088786
			String memberID = "";
			String memberIDType = "";
			String firstName="";
			String lastName="";
			String middleInitial="";
			String dateOfBirth="";
			String dateOfDeath="";
			String ssn="";
			rcvryCase = recoveryResponse.getRcvryCase();			
			TPLRecoveryConversionHelper tplRecoveryConversionHelper = new TPLRecoveryConversionHelper();			
			//caseDetails
			TPLRecoveryCaseDetailVO tplRecoveryCaseDetailVO = tplRecoveryConversionHelper.convertRCVRYCaseDetailDOtoVO(rcvryCase);
			//ESPRD00579570
			if(tplRecoveryCaseDetailVO != null && tplRecoveryCaseDetailVO.getWorkingStatusCode() != null)
			{
				String shortDescription = tplRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getWorkingStatusCodeList(),tplRecoveryCaseDetailVO.getWorkingStatusCode());
			    tplRecoveryCaseDetailVO.setWorkingStatusCodeStr(shortDescription );
			}
			// Defect Fix ESPRD00659910
			if(tplRecoveryCaseDetailVO != null && tplRecoveryCaseDetailVO.getCaseincidentType() != null)
			{
				String caseIndent = tplRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getRecovreyCaseIncidentTypeList(),tplRecoveryCaseDetailVO.getCaseincidentType());			
				tplRecoveryCaseDetailVO.setCaseincidentDetails(caseIndent);				
			}
			//Routing
			TPLRoutingDOConvertor tplRoutingDOConvertor=new TPLRoutingDOConvertor();
			List listOfRoutingVOs=tplRoutingDOConvertor.convertListOfRecoveryRoutingDOs(rcvryCase);
			if(listOfRoutingVOs!=null && listOfRoutingVOs.size()>0 ){
				getRoutingDataBean().setRenderNoData(false);
				getRoutingDataBean().setListOfTPLRoutingVOs(listOfRoutingVOs);
			}else if (getRoutingDataBean().getListOfTPLRoutingVOs() != null
					&& getRoutingDataBean().getListOfTPLRoutingVOs().size() > 0) {
				getRoutingDataBean().getListOfTPLRoutingVOs().clear();
			}
			
			tplRecoveryDataBean.setRecoveryCaseDetailVO(tplRecoveryCaseDetailVO);
			TPLRecoveryCaseDetailVO recoveryCaseDetailVO = tplRecoveryDataBean.getRecoveryCaseDetailVO();
			TPLRecoveryCaseVO recoveryCaseVO = recoveryCaseDetailVO.getRecoveryCaseVO();
			//ESPRD00710991 defect fix.
			//
			if (recoveryCaseVO.getCaseStatus().equals(TPLRecoveryCaseConstants.OPEN)){
				tplRecoveryDataBean.setClosedexcludeind(false);
				tplRecoveryDataBean.setRecoveryType(true); 
				tplRecoveryDataBean.setRecoveryMethod(true); 
				tplRecoveryDataBean.setClaimDatesreqfield(true);
			}
			//
			if (recoveryCaseVO.getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE))
	    	{
				//defect id:ESPRD00810801 added for flag for closed status(exclude indicator,exclude reason, req amount) 
				tplRecoveryDataBean.setClosedexcludeind(true);
	    		tplRecoveryDataBean.setRecoveryType(true);
	    		tplRecoveryDataBean.setClaimDatesreqfield(true);
	    	}
			else
			{
				tplRecoveryDataBean.setClaimDatesreqfield(false);
			}
			// ESPRD00665733 Defect @Ram	
			if (recoveryCaseVO.getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE)
					||	recoveryCaseVO.getCaseStatus().equals(TPLRecoveryCaseConstants.PEND))
		    {
				tplRecoveryDataBean.setRecoveryMethod(true);
		    }
			else
			{
				  tplRecoveryDataBean.setRecoveryMethod(false);
			}
			// ESPRD00665733 Defect End @Ram
			//Infinite defect Resolution :ESPRD00494645
			if (recoveryCaseVO.getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE)){
				getTPLRecoveryDataBean().setDisableTplRecoveryForClosedCase(true);
				getTPLRecoveryDataBean().setEnableTplRecoveryLink(true);
			}
			else{
				getTPLRecoveryDataBean().setDisableTplRecoveryForClosedCase(false);
				getTPLRecoveryDataBean().setEnableTplRecoveryLink(true);
			}
			// setting the select all claim false
			tplRecoveryDataBean.setSelectAll(false);
			tplRecoveryDataBean.setRenderAddMode(false);
			List responselist = recoveryResponse.getTplRecoveryCaseResponses();
			List recoveryResponseList = new ArrayList();
			// for orthodontia
			List orthodontiaList = new ArrayList();
			double creditBalance = 0.0;
			if(responselist != null && responselist.size()>0){
				Iterator iterator = responselist.iterator();
				while (iterator.hasNext()) 
				{
					TPLRecoveryCaseOrthodontiaVO recoveryCaseOrthodontiaVO = (TPLRecoveryCaseOrthodontiaVO)iterator.next();
					creditBalance = recoveryCaseOrthodontiaVO.getCreditBalance();
					orthodontiaList.add(recoveryCaseOrthodontiaVO);
				}
			}
			tplRecoveryDataBean.setTplRecoveryOrthodontiaList(orthodontiaList);	
			TPLRecoveryResponsesListVO tplRcvryResponsesListVO = recoveryResponse.getRecoveryResponsesListVO();
			if(tplRcvryResponsesListVO != null){
				recoveryResponseList = tplRcvryResponsesListVO.getTPLRecoveryCaseResponseVO();
				tplRecoveryDataBean.setTplRecoveryResponseList(recoveryResponseList);
			}
			if (rcvryCase.getResponsibleUserID() != null)
	    	{
				TPLHIPPWokerVO tPLHIPPWokerVO = tplRecoveryDelegate.validateWorkerId(rcvryCase.getResponsibleUserID().toUpperCase());
				if(tPLHIPPWokerVO != null)
				{					
					recoveryCaseDetailVO.getTplRecoveryWorkerVO().setWorkerID(tPLHIPPWokerVO.getWorkerID());
					recoveryCaseDetailVO.getTplRecoveryWorkerVO().setWorkerName(tPLHIPPWokerVO.getWorkerName());
					tplRecoveryDataBean.setShowWorkerDetails(true);
				}
	    	}
			if(recoveryCaseDetailVO.getRecoveryCaseServiceAuthVO() !=null && recoveryCaseDetailVO.getRecoveryCaseServiceAuthVO().getServiceAuthID() != null ){			
				tplRecoveryDataBean.setSaValidateflag(true);
			}
			else{
				tplRecoveryDataBean.setSaValidateflag(false);
			}
			//summary
			if(tplRecoveryCaseDetailVO.getRecoveryCaseVO().getRecoveryType()!=null)
			{
				String rcvrytype=recoveryCaseVO.getRecoveryType();
				if("1".equalsIgnoreCase(rcvrytype)){
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderLegalSummary(true);
					tplRecoveryDataBean.setRenderSettlementSummary(true);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderSummary(true);
				}
				if("2".equalsIgnoreCase(rcvrytype))
				{
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderLegalSummary(false);
					tplRecoveryDataBean.setRenderSettlementSummary(false);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(false);
				}
				if ("3".equalsIgnoreCase(rcvrytype)) {
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderLegalSummary(true);
					tplRecoveryDataBean.setRenderSettlementSummary(true);
					tplRecoveryDataBean.setRenderEstateDetailSummary(true);
					tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(true);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderSummary(true);
				}
				if ("4".equalsIgnoreCase(rcvrytype)) {
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderLegalSummary(false);
					tplRecoveryDataBean.setRenderSettlementSummary(false);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(false);
				}
				if ("5".equalsIgnoreCase(rcvrytype)) {
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderLegalSummary(false);
					tplRecoveryDataBean.setRenderSettlementSummary(false);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(false);
				}
				if("6".equalsIgnoreCase(rcvrytype)){
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderLegalSummary(false);
					tplRecoveryDataBean.setRenderSettlementSummary(false);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(true);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(true);
					tplRecoveryDataBean.setRenderSummary(true);
				}
				if ("7".equalsIgnoreCase(rcvrytype)) {
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderLegalSummary(false);
					tplRecoveryDataBean.setRenderSettlementSummary(false);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(false);
				}
				if ("8".equalsIgnoreCase(rcvrytype)) {
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderLegalSummary(false);
					tplRecoveryDataBean.setRenderSettlementSummary(false);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(false);
				}
				if(StringUtils.isEmpty(rcvrytype))
				{
					tplRecoveryDataBean.setRenderCaseDetailSummary(true);
					tplRecoveryDataBean.setRenderMemberInfosummary(true);
					tplRecoveryDataBean.setRenderInterestedPartySummary(true);
					tplRecoveryDataBean.setRenderServiceAuthInfoSummary(false);
					tplRecoveryDataBean.setRenderLegalSummary(false);
					tplRecoveryDataBean.setRenderSettlementSummary(false);
					tplRecoveryDataBean.setRenderEstateDetailSummary(false);
					tplRecoveryDataBean.setRenderCarrierPolicySummary(false);
					tplRecoveryDataBean.setRenderAssetsLiabilitiesSummary(false);
				}	
			}
			//member details
			//As per defect ESPRD00088943
			//ESPRD00579570
			TPLRecoveryCaseMemberDetailsVO tplRecoveryCaseMemberDetailsVO = recoveryResponse.getTplRecoveryCaseMemberDetailsVO();
			if(tplRecoveryCaseMemberDetailsVO != null && tplRecoveryCaseMemberDetailsVO.getMemberIDType()!=null)
			{
				 String memberIDTypedesc = tplRecoveryConversionHelper.getSourceCodeDescription(tplRecoveryDataBean.getMemberIDTypeList(),tplRecoveryCaseMemberDetailsVO.getMemberIDType());
				 tplRecoveryCaseMemberDetailsVO.setMemberIDType(memberIDTypedesc);
			}
			if (null != tplRecoveryCaseMemberDetailsVO)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
				if (tplRecoveryCaseMemberDetailsVO.getDob() != null)
				{
					String dob = dateFormat.format(tplRecoveryCaseMemberDetailsVO.getDob());
					tplRecoveryCaseMemberDetailsVO.setDobStr(dob);
				}
				if (tplRecoveryCaseMemberDetailsVO.getDod() != null)
				{
					String dod = dateFormat.format(tplRecoveryCaseMemberDetailsVO.getDod());
					tplRecoveryCaseMemberDetailsVO.setDodStr(dod);
				}
				memberID = tplRecoveryCaseMemberDetailsVO.getMemberID();
				memberIDType = tplRecoveryCaseMemberDetailsVO.getMemberIDType();
				tplRecoveryCaseMemberDetailsVO.setMemberID(memberID);
				tplRecoveryCaseMemberDetailsVO.setMemberIDType(memberIDType);
				tplRecoveryCaseMemberDetailsVO.setSystemID(tplRecoveryCaseMemberDetailsVO.getSystemID());
				tplRecoveryDataBean.setSystemId(tplRecoveryCaseMemberDetailsVO.getSystemID());
				firstName=tplRecoveryCaseMemberDetailsVO.getFirstName();
				lastName=tplRecoveryCaseMemberDetailsVO.getLastName();
				middleInitial=tplRecoveryCaseMemberDetailsVO.getMiddleName();
				dateOfBirth=tplRecoveryCaseMemberDetailsVO.getDobStr();
				//for defect :ESPRD00724047
				if(StringUtils.isNotBlank(tplRecoveryCaseMemberDetailsVO.getDodStr())
						&& tplRecoveryCaseMemberDetailsVO.getDodStr().equalsIgnoreCase("12/31/9999")){
					tplRecoveryCaseMemberDetailsVO.setDodStr("") ; 
				}//end
				dateOfDeath=tplRecoveryCaseMemberDetailsVO.getDodStr();
				ssn=tplRecoveryCaseMemberDetailsVO.getSsn();
				if (null != ssn)
				{
					tplRecoveryCaseMemberDetailsVO.setSsn(TPLAdministrationHelper.getSSNFormat(ssn));
				}
			}			
			recoveryCaseDetailVO.setRecoveryCaseMemberDetailsVO(tplRecoveryCaseMemberDetailsVO);
			tplRecoveryDataBean.setMemberIdCaseDetail(memberID);			
			tplRecoveryDataBean.setMemberIdTypeCaseDetail(memberIDType);	
		    //service authorization - ESPRD00809650			
			TPLRecoveryCaseServiceAuthVO recAuthVo = tplRecoveryCaseDetailVO.getRecoveryCaseServiceAuthVO();
			if(recAuthVo.getServiceAuthID() != null && !(recAuthVo.getServiceAuthID().isEmpty())){				
				if(recoveryResponse.getServicAuthApprovedAmount() != null){					
					recAuthVo.setServicAuthApprovedAmount(recoveryResponse.getServicAuthApprovedAmount());				
				}
				if(recoveryResponse.getServicAuthApprovedUnits() != null){					
					recAuthVo.setServicAuthApprovedUnits(recoveryResponse.getServicAuthApprovedUnits());				
				}
				if(recoveryResponse.getServiceAuthUnitsUsed() != null){
					recAuthVo.setServiceAutUnitsUsed(recoveryResponse.getServiceAuthUnitsUsed());
				}
				if(recoveryResponse.getServicAuthUsedAmount() != null){
					recAuthVo.setServicAuthUsedAmount(recoveryResponse.getServicAuthUsedAmount());
				}
				//CR ESPRD00798251
				String name="";
				if(StringUtils.isNotBlank(firstName)){
					name = firstName + " ";
				}
				if(StringUtils.isNotBlank(lastName)){
					name = name + lastName;
				}
				if(StringUtils.isNotBlank(name)){
					recAuthVo.setMemberName(name);
				}
				if(StringUtils.isNotBlank(dateOfBirth)){
					recAuthVo.setDOB(dateOfBirth);
				}
			}			
			recoveryCaseDetailVO.setRecoveryCaseServiceAuthVO(recAuthVo);
			//Billing Details
			Set rcvryPayerSet=null;
			rcvryPayerSet = recoveryResponse.getRcvryCase().getRcvryPayer();
			List billingList = tplRecoveryConversionHelper.convertBillingInoDOtoVO(recoveryResponse.getTplRecoveryCaseBillingInformationVO(),rcvryPayerSet);
			tplRecoveryDataBean.setTplRecoveryAddBillingInfoList(billingList);
			//Billing Histories
			List billingHistList = tplRecoveryConversionHelper.convertBillingHistDOtoVO(rcvryCase.getTplRecoveryBillingHistories());
			//ESPRD00793586 -- to show billing start date as write protected.
			if(billingHistList !=null && billingHistList.size()>0)
			{
		       tplRecoveryDataBean.setDisableAfterLetterGen(true);
			}
			tplRecoveryDataBean.setTplBillingHistoryList(billingHistList);
			
			//Included Claim 
			TPLRecoveryCaseClaimAndResponseVO tplRcvryCaseClaimAndRespVO = recoveryResponse.getTplRecoveryCaseClaimAndResponseVO();
			List includedList = null;
			if(tplRcvryCaseClaimAndRespVO!=null){
				includedList = tplRcvryCaseClaimAndRespVO.getListOfRecoveryIncludedCliamsVO();
				tplRecoveryDataBean.setTplRecoveryIncludedclaimsList(includedList);
				tplRecoveryDataBean.setInclClmsSortColumn(tplRcvryCaseClaimAndRespVO.getSortColumn());
				tplRecoveryDataBean.setInclClmsSortOrder(tplRcvryCaseClaimAndRespVO.isSortOrder());
				tplRecoveryDataBean.setIncludeClaimsCount((int) tplRcvryCaseClaimAndRespVO.getRecordCount());
				if(null !=includedList && includedList.size()>0){
					setRenderingForIncludeClaims(tplRecoveryDataBean,tplRcvryCaseClaimAndRespVO.getRecordCount(),false);
					tplRecoveryDataBean.setCheckClaimsEmpty(false);
				}else{
					tplRecoveryDataBean.setCheckClaimsEmpty(true);
				}
			}
			if(recoveryResponse.getIncludedTotalAmount()!=null){
				recoveryCaseVO.setIncludedClaimsTotal(recoveryResponse.getIncludedTotalAmount());
				recoveryCaseVO.setIncludedClaimsTotalStr(decimalValue(recoveryResponse.getIncludedTotalAmount()));
			}else{
				recoveryCaseVO.setIncludedClaimsTotal(0.0);
				recoveryCaseVO.setIncludedClaimsTotalStr(decimalValue(0.0));
			}
			//CR ESPRD00909402
	    	double postedInclClmsAmnt = 0;
	    	double remainingCreditBal = 0;
	    	double remainingInclClmsAmnt = 0;
	    	double tempRemainingCreditBalance = 0;
	    	if(recoveryResponse.getTotalRecoveredAmount()!=null){
	    		if("6".equalsIgnoreCase(recoveryCaseVO.getRecoveryType()) && creditBalance > 0 ){
	    			postedInclClmsAmnt = (recoveryResponse.getTotalRecoveredAmount() - creditBalance);
	    			remainingCreditBal = (creditBalance - postedInclClmsAmnt);
	    			tempRemainingCreditBalance = remainingCreditBal;
	    			remainingInclClmsAmnt = (recoveryCaseVO.getIncludedClaimsTotal()-postedInclClmsAmnt);
	    			recoveryCaseVO.setTotalRecovered(creditBalance);
	    			recoveryCaseVO.setTotalRecoveredStr(decimalValue(creditBalance));
	    		}else{
	    			remainingInclClmsAmnt = (recoveryCaseVO.getIncludedClaimsTotal()- recoveryResponse.getTotalRecoveredAmount());
	    			recoveryCaseVO.setTotalRecovered(recoveryResponse.getTotalRecoveredAmount());
	    			recoveryCaseVO.setTotalRecoveredStr(decimalValue(recoveryResponse.getTotalRecoveredAmount()));
	    		}
	    	}else{
	    		remainingInclClmsAmnt = recoveryCaseVO.getIncludedClaimsTotal();
	    		recoveryCaseVO.setTotalRecovered(0.0);
	    		recoveryCaseVO.setTotalRecoveredStr(decimalValue(0.0));
	    	}
	    	tplRecoveryDataBean.setTempRemainingCreditBalance(tempRemainingCreditBalance);
	    	tplRecoveryDataBean.setRemainingInclClmsAmt(remainingInclClmsAmnt);
	    	tplRecoveryDataBean.setRemainingCreditBalance(remainingCreditBal);
	    	if (recoveryResponse.getRecoveryLastDate() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
			 	String recoveryDate = dateFormat.format(recoveryResponse.getRecoveryLastDate());
			 	recoveryCaseVO.setLastRecPaymentDate(recoveryDate);
			}
			TPLRecoveryResponseHistroyListVO rcvryResponseHistroyListVO = 
				                   recoveryResponse.getRecoveryResponseHistroyListVO();
			if(rcvryResponseHistroyListVO != null){
				List recoveryHistList = rcvryResponseHistroyListVO.getTPLRecoveryResponseHistoryList();
				tplRecoveryDataBean.setTplRecoveryHistoryList(recoveryHistList);
				if(null !=recoveryHistList && recoveryHistList.size()>0)
					setRenderingForRcvryHist(tplRecoveryDataBean,rcvryResponseHistroyListVO,false);
			}

			//Filter Details
			List list = tplRecoveryConversionHelper.convertClaimFilterDOtoVO(rcvryCase.getTplRecoveryClaimFilters());
			tplRecoveryDataBean.setTplRecoveryClaimFilterList(list);
			
			
			// Intersted party
			List interstedPartyList = tplRecoveryConversionHelper.convertInterestedPartyDOtoVO(rcvryCase.getRcvryEntityCrossReference());
			tplRecoveryDataBean.setTplRecoveryInterestedPartyInfoList(interstedPartyList);
			//Legal Info
			recoveryCaseDetailVO.setRecoveryCaseLegalInformationVO(tplRecoveryConversionHelper.convertLegalInfoDOtoVO(rcvryCase.getTplRecoveryTORTs()));
			//Settlement
			List listofSettlement = tplRecoveryConversionHelper.convertSettlementDOtoVO(rcvryCase.getRecoveryCaseSettlements());
			tplRecoveryDataBean.setTplRecoverySettlementList(listofSettlement);
			// Relation ship 
			List relationShipSet = tplRecoveryConversionHelper.convertRelationshipDOtoVO(rcvryCase.getRcvryEntityCrossReference());
			tplRecoveryDataBean.setTplRecoveryRelationshipList(relationShipSet);
			//RecoveryEstate
			Set recoveryEstateSet = rcvryCase.getTplRecoveryEstates();
			if(recoveryEstateSet!=null){
				Iterator recoveryEstateIter = recoveryEstateSet.iterator();
				while(recoveryEstateIter.hasNext())
				{
					TPLRecoveryEstate tplRecoveryEstate = (TPLRecoveryEstate)recoveryEstateIter.next();				
					TPLRecoveryCaseEstateDetailVO tPLRecoveryCaseEstateDetailVO = 
						             tplRecoveryConversionHelper.convertEstateDOtoVO(tplRecoveryEstate);
					recoveryCaseDetailVO.setTplRecoveryCaseEstateDetailVO(tPLRecoveryCaseEstateDetailVO);
					Set TplRecoveryEstateDetailsSet = tplRecoveryEstate.getTplRecoveryEstateDetails();				
					tplRecoveryDataBean.setTplRecoveryAssetsLiabilitiesList(
							tplRecoveryConversionHelper.convertAssetsAndLiabilitiesDOtoVO(TplRecoveryEstateDetailsSet));
					setTotalAssetsAndLibilities(tplRecoveryDataBean,TplRecoveryEstateDetailsSet);				
					Set tplRecoveryEstateLienDetails=tplRecoveryEstate.getTplRecoveryEstateLienDetails();
					if(tplRecoveryEstateLienDetails != null){					
						if (tplRecoveryEstateLienDetails.size()>0)
						{
							recoveryCaseDetailVO.setRecoveryCaseLienInfoVO(
									tplRecoveryConversionHelper.convertLienInfoDOtoVO((RCVRYESTLien)new ArrayList(tplRecoveryEstateLienDetails).get(0)));
						}
					}
				}
			}
			String previousRecovered=recoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getPreviousRecoveredAmount();
			if(previousRecovered!=null && previousRecovered.trim().length()>0)
			{
				double pRecoveredAmount=Double.parseDouble(previousRecovered);
				recoveryCaseVO.setPreviousRecovered(new Double(pRecoveredAmount).doubleValue());
				recoveryCaseVO.setLastRecPaymentAmt(pRecoveredAmount);
				recoveryCaseVO.setLastRecPaymentAmtStr(decimalValue(pRecoveredAmount));
			}
			else
			{
				recoveryCaseVO.setLastRecPaymentAmtStr(decimalValue(0.0));
			}
			
			String priorClaimsAmnt = recoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().getPriorClaimsAmount();
			//As per defect ESPRD00089098
			if(priorClaimsAmnt!=null && priorClaimsAmnt.trim().length()>0)
			{
				recoveryCaseVO.setPriorEstClaimsAmt(new Double(priorClaimsAmnt));
				recoveryCaseVO.setPriorEstClaimsAmtStr(decimalValue(new Double(priorClaimsAmnt)));
			}else{
				recoveryCaseVO.setPriorEstClaimsAmt(0.0);
				recoveryCaseVO.setPriorEstClaimsAmtStr(decimalValue(0.0));
			}
		
			recoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().setRecoveryAmount("");
			recoveryCaseDetailVO.getRecoveryCaseRecoveryMethodVO().setFixedAmount("");
			
			double totalUncollectedAmount = 0;
			if("6".equalsIgnoreCase(recoveryCaseVO.getRecoveryType())){
				if( creditBalance > 0 ){
					totalUncollectedAmount = ((- creditBalance)+postedInclClmsAmnt);
				}else {
					totalUncollectedAmount = recoveryCaseVO.getIncludedClaimsTotal();
				}
			}	
			if(!"6".equalsIgnoreCase(recoveryCaseVO.getRecoveryType())){	
				totalUncollectedAmount = recoveryCaseVO.getIncludedClaimsTotal()+ recoveryCaseVO.getPriorEstClaimsAmt()
								- (recoveryCaseVO.getPreviousRecovered()+ recoveryCaseVO.getTotalRecovered());
			}
			recoveryCaseVO.setTotalUnCollected(totalUncollectedAmount);
			recoveryCaseVO.setTotalUnCollectedStr(decimalValue(totalUncollectedAmount));
			
			if (recoveryCaseVO.getPriorEstClaimsAmt() != 0)
			{
				double includeClaimsAmt= recoveryCaseVO.getIncludedClaimsTotal()
                                     				+ recoveryCaseVO.getPriorEstClaimsAmt();
				recoveryCaseVO.setIncludedClaimsTotal(includeClaimsAmt);
				recoveryCaseVO.setIncludedClaimsTotalStr(decimalValue(includeClaimsAmt));
			}
			String previousRecoveredAmount = recoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO().
											getPreviousRecoveredAmount();
			if (previousRecoveredAmount != null && previousRecoveredAmount.trim().length() > 0)
			{
				
				double totalRecovAmt = recoveryCaseVO.getTotalRecovered()
											+new Double(previousRecoveredAmount).doubleValue();
				recoveryCaseVO.setTotalRecovered(totalRecovAmt);
				recoveryCaseVO.setTotalRecoveredStr(decimalValue(totalRecovAmt));
			}else{
				recoveryCaseVO.setPreviousRecovered(0.0);
			}
			recoveryCaseDetailVO.setRecoveryCaseVO(recoveryCaseVO);
			//ESPRD00917760
			if (recoveryCaseVO.getRecoveryType()!=null && "3".equalsIgnoreCase(recoveryCaseVO.getRecoveryType())) {
				TPLRecoveryCaseEstateDetailVO tplRecoveryCaseEstateDetailVO = recoveryCaseDetailVO.getTplRecoveryCaseEstateDetailVO();
				tplRecoveryCaseEstateDetailVO.setFirstName(firstName);
				tplRecoveryCaseEstateDetailVO.setLastName(lastName);
				tplRecoveryCaseEstateDetailVO.setMiddleInitial(middleInitial);
				tplRecoveryCaseEstateDetailVO.setDateofBirth(dateOfBirth);
				tplRecoveryCaseEstateDetailVO.setDateofDeath(dateOfDeath);
				if (null != ssn){
					tplRecoveryCaseEstateDetailVO.setSsn(TPLAdministrationHelper.getSSNFormat(ssn));
				}
				recoveryCaseDetailVO.setTplRecoveryCaseEstateDetailVO(tplRecoveryCaseEstateDetailVO);
			}
			tplRecoveryDataBean.setRecoveryCaseDetailVO(recoveryCaseDetailVO);
			Set recoveryPolicySet = rcvryCase.getTplRecoveryPolicies();
			if(recoveryPolicySet != null){
			Iterator policyItr = recoveryPolicySet.iterator();
			while (policyItr.hasNext()) {
				TPLRecoveryPolicy tplRecoveryPolicy = (TPLRecoveryPolicy) policyItr.next();
				tplRecoveryDataBean.setPolicyVersionNo(tplRecoveryPolicy.getVersionNo());
			}
			}
			tplRecoveryConversionHelper.convertCarrierDOtoVO(recoveryPolicySet);
		//	validateCarrierID();
			tplRecoveryDataBean.setShowRecoveryDetails(true);
			/*if(StringUtils.isNotEmpty(recoveryCaseVO.getCaseStatus()) &&
					recoveryCaseVO.getCaseStatus().equals(TPLRecoveryCaseConstants.CLOSE) &&
					StringUtils.isNotEmpty(recoveryCaseDetailVO.getCaseCloseDate()) && 
	    			StringUtils.isNotEmpty(recoveryCaseDetailVO.getCaseCloseReason())){
	    		tplRecoveryDataBean.setDisableRecoveryMethod(true);
	    		tplRecoveryDataBean.setRenderRcvryMethod(true);
	    	}*/

			//Notes_IssueFix // Defect ESPRD00851880 : For display notes
			if(rcvryCase.getNoteSet()!= null && rcvryCase.getNoteSet().getNoteSetSK() != null){
				tplRecoveryDataBean.setNoteSetSK(rcvryCase.getNoteSet().getNoteSetSK());
				tplRecoveryDataBean.setRcvryNotesFlag(true);
			}
			else{
				tplRecoveryDataBean.setRcvryNotesFlag(false);
				tplRecoveryDataBean.setNoteSetSK(null); //ESPRD00901
				TPLNotesHelper.getCommonEntityDataBean().getCommonEntityVO()
											.getNoteSetVO().getNotesList().clear();
			}
			/*if(rcvryCase!=null)
			{
				if(rcvryCase.getNoteSet()!=null)
				{
					TPLNotesHelper noteshelper=new TPLNotesHelper();
					CommonEntityDataBean commonEntityDataBean=(CommonEntityDataBean)getDataBean(TPLRecoveryCaseConstants.COMMONENTITYDATABEAN);
					if(commonEntityDataBean!=null)
					{
						NoteSetVO noteSetVO = noteshelper
                        .convertNoteSetDomainToVO(rcvryCase
                                .getNoteSet());
						 if (noteSetVO != null)
		                 {
		                        commonEntityDataBean.getCommonEntityVO().setNoteSetVO(
		                                noteSetVO);
		                        if (noteSetVO.getNotesList() != null)
		                        {
		                        	tplRecoveryDataBean.setNotesCount(noteSetVO.getNotesList().size());
		                        }
		                 }
		     		}
			     }
			}*/
			
			
			
			/* converting alertDOs to AlertVOs and setting it to TPLAlertDataBean */ 
            TPLAlertDOConvertor alertConverter = new TPLAlertDOConvertor();                    
            alertConverter.convertTPLAlertDOtoVO(rcvryCase);  
            
			//Attachment Starts
			Set attachmentsList = rcvryCase.getRcvryAttachment();
	        List attachmentVOList = new ArrayList();
	        if(null != attachmentsList && attachmentsList.size()>0)
	        {
	           Iterator attachItr = attachmentsList.iterator();
	        	while(attachItr.hasNext())
	        	{
	        		RCVRYAttachment rcvryAttachment = (RCVRYAttachment)attachItr.next();
	        		Attachment attachment = rcvryAttachment.getAttachment();
	        		AttachmentsVO attachmentsVO = tplRecoveryConversionHelper.convertAttachmentDOTOVO(attachment);
	        		
	        		if (rcvryAttachment.getDeattachedAttachmentIndicator().equals(Boolean.TRUE))
	                {
	                    attachmentsVO.setDetachFlag(true);
	                }
	                else
	                {
	                	attachmentsVO.setDetachFlag(false);
	                }
	        		attachmentsVO.setVersionNo(rcvryAttachment.getVersionNo());
	        		attachmentVOList.add(attachmentsVO);
	        	}
	        }
	        TPLAttachmentDataBean attachmentDataBean = getTPLAttachmentDataBean();
	        attachmentDataBean.setAttachmentList(attachmentVOList);
	        attachmentDataBean.setShowDelSucessMessage(false);
	        attachmentDataBean.setShowSucessMessage(false);
	        //to close previous opened attachments.
	        attachmentDataBean.setShowEditAttachments(false);
	        attachmentDataBean.setShowAddAttachments(false);
	        //Member claim filter details to be null
	        tplRecoveryDataBean.setTplRecoveryMemberClaimsList(new ArrayList());
	 		tplRecoveryDataBean.setTplRecoveryClaimsList(new ArrayList());		
	 		tplRecoveryDataBean.setClaimLineRendered(false);
	        
	 		// For checking Member is already in another open Recovery Case based on claim dates
	 		tplRecoveryDataBean.setMemberAllReadyOpen(recoveryResponse.isAlreadyOpenRecoveryCase());
	 		
	 		tplRecoveryDataBean.setRenderEditInterestedPartySave(false);
	 		tplRecoveryDataBean.setShowSuccessInterestedPartyInfo(false);
	 		tplRecoveryDataBean.setShowSuccessBillingInfo(false);	 		
	 		tplRecoveryDataBean.setRenderResultInterestedPartyAddress(false);
	 		tplRecoveryDataBean.setRenderResultAssetsLiabilities(false);
	 		tplRecoveryDataBean.setRenderResultRelationship(false);
	 		tplRecoveryDataBean.setRenderResultClaimFilter(false);
	 		tplRecoveryDataBean.setDeleteBillingInfoFlag(false);
	 		tplRecoveryDataBean.setDeleteAssetandLiabilityFlag(false);
	 		tplRecoveryDataBean.setDeleteFilterFlag(false);
	 		tplRecoveryDataBean.setDeleteInterestedPartyInfoFlag(false);
	 		tplRecoveryDataBean.setDeleteRelationshipFlag(false);
	 		tplRecoveryDataBean.setRenderEditCarrierInfo(false);  // For Defect ESPRD00855843
	 		//Setting the member in recovery case
	 		if(rcvryCase.getMember() != null)
	 		{
	 			tplRecoveryDataBean.setMember(rcvryCase.getMember());
	 			if(null != rcvryCase.getMember().getSystemID())
	 			{
		 			tplRecoveryDataBean.setSystemId(rcvryCase.getMember().getSystemID());
		    	}
	    	}
	 		tplRecoveryDataBean.setFocusThisId("");
	 			 		
		} 
		catch (TPLRecoveryBusinessException e) 
		{
			e.printStackTrace();
		}
		FacesContext.getCurrentInstance().getExternalContext()
		.getSessionMap().put("TPLRecoveryDataBean", tplRecoveryDataBean); 
		
	}
	
	
	/**
	 * This method wil handle the total assets, total liabilities amounts and dates
	 * @param tplRecoveryDataBean
	 * @param TplRecoveryEstateDetailsSet
	 */
	public void setTotalAssetsAndLibilities(TPLRecoveryDataBean tplRecoveryDataBean, Set TplRecoveryEstateDetailsSet)
	{
		if(logger.isDebugEnabled()){
    	logger.debug("Inside setTotalAssetsAndLibilities");
		}
    	TPLRecoveryEstateDetail assetliabilities = null;
    	 
    	if(TplRecoveryEstateDetailsSet != null){
    	SimpleDateFormat dateformatYYYYMMDD = new SimpleDateFormat("MM/dd/yyyy");
    	Iterator it = TplRecoveryEstateDetailsSet.iterator();
    	Date assetsDate = null;
    	Date liabilitiesDate=null;
    	while(it.hasNext())
    	{
    	  assetliabilities = (TPLRecoveryEstateDetail) it.next();
    	  if (TPLRecoveryCaseConstants.ASSET.equals(assetliabilities.getEstateTypeCode())) 
    	   {
			
    		 if (assetliabilities.getEstateTotalAssetAmount() != null) 
			 {
			  if(!assetliabilities.isEstateSoldInd())
			   {
				 tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.setTotalAssets(tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getTotalAssets()+ assetliabilities.getEstateTotalAssetAmount().doubleValue());
							
				 //tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssetsDate(dateformatYYYYMMDD.format(tplRecoveryDataBean.getRecoveryCaseDetailVO().getAuditTimeStamp()));
			   }					
			  }
			  //ESPRD00677746 Begin @Ram
			  if(assetsDate==null)
	    	   {
	    		 assetsDate=assetliabilities.getAuditTimeStamp();
	    	   }
	    	   else
	    	   {
	    		if(assetsDate.before(assetliabilities.getAuditTimeStamp()))
	    		   assetsDate= assetliabilities.getAuditTimeStamp();
	    	   }
			   tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalAssetsDate(dateformatYYYYMMDD.format(assetsDate));
			   //ESPRD00677746 end @Ram
    		}else
    		{
			 if (assetliabilities.getEstateTotalAssetAmount() != null) {						
				if(!assetliabilities.isEstateSoldInd())
				 {
			    	tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilities(
				   	  tplRecoveryDataBean.getRecoveryCaseDetailVO().getTotalLiabilities()+assetliabilities.getEstateTotalAssetAmount().doubleValue());
					 //	tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilitiesDate(dateformatYYYYMMDD.format(tplRecoveryDataBean.getRecoveryCaseDetailVO().getAuditTimeStamp()));
				 }
			   }
			 //ESPRD00677746 Begin @Ram
		   	  if(liabilitiesDate==null)
	    	   {
	    		liabilitiesDate=assetliabilities.getAuditTimeStamp();
	    	   }
	    	   else
	    	   {
	    		  if(liabilitiesDate.before(assetliabilities.getAuditTimeStamp()))
	    		  {
	    			liabilitiesDate=assetliabilities.getAuditTimeStamp(); 
	    		  }
	    	   } 
				tplRecoveryDataBean.getRecoveryCaseDetailVO().setTotalLiabilitiesDate(dateformatYYYYMMDD.format(liabilitiesDate));
				//ESPRD00677746 end @Ram
    		 }
    	  }
    	}
    }
	
	/**
	 * @param messages
	 */
	public void addMessages(String messages)
	{
		FacesMessage message = new FacesMessage();
		message.setDetail(messages);
		FacesContext.getCurrentInstance().addMessage("abc", message);
	}
	
	/**
	 * 
	 */
	public void getFilterDetails(){
		String caseId = null;
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("clmfilterfocus");
		tplRecoveryDataBean.setDataFirst(0);
		List filterList = tplRecoveryDataBean.getTplRecoveryClaimFilterList();
		String lob = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getLineOfBusiness();
		TPLRecoveryConversionHelper tplRecoveryConversionHelper = new TPLRecoveryConversionHelper();
		Set filterSet = tplRecoveryConversionHelper.convertClaimFilterVOtoDO(filterList, new TPLRecoveryCaseDetail());
		String caseBeginDate = tplRecoveryDataBean.getRecoveryCaseDetailVO().getCaseClaimStartDate();
		String caseEndDate = tplRecoveryDataBean.getRecoveryCaseDetailVO().getCaseClaimStopDate();
		Long memberSysId=tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getSystemID();
		 try {
		 	if(!TPLRecoveryCommonValidator.validateTPLRCVYADDRCVY0007(caseBeginDate,caseEndDate)){
		 		TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		 		caseId = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
		 		List listofClaims =tplRecoveryDelegate.MMISPharmacyFilter(memberSysId,caseBeginDate,caseEndDate,filterSet);
		 		listofClaims = sortMemberClmsByTcn(listofClaims);
		 		List list = gettingListOfMemberClaims(listofClaims,caseId);
		 		tplRecoveryDataBean.setTplRecoveryMemberClaimsList(list);
		 		tplRecoveryDataBean.setTplRecoveryClaimsList(listofClaims);			
		 	}
			
		} catch (TPLRecoveryBusinessException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * This will fire when user select/deselect the checkbox.
	 * 
	 * @param selDeselEvent
	 */
	/*public void selectDeselectEvent(ActionEvent selDeselEvent) {
		try{
			
			FacesContext context = FacesContext.getCurrentInstance();
			Map map = context.getExternalContext().getRequestParameterMap();
			TPLRecoveryDataBean recoveryDataBean =  getTPLRecoveryDataBean();
			recoveryDataBean.setFocusThisId("selectallfocus");
			
			String selectedTCN = map.get("selectedTCN").toString();
			//String rowID = map.get("rowIndex").toString(); Find Bug Fix
			HtmlCommandLink commandLink = (HtmlCommandLink) selDeselEvent.getSource();
			List list = commandLink.getChildren();
			Iterator iterator = list.iterator();
			while (iterator.hasNext()) {
				Object object = iterator.next();
				if (object instanceof HtmlSelectBooleanCheckbox) {
					HtmlSelectBooleanCheckbox new_name = (HtmlSelectBooleanCheckbox) object;
					if (!((Boolean)new_name.getValue()).booleanValue())
					{
						recoveryDataBean.setSelectAll(false);
					}
				}
			}
			List massAdjRecords = recoveryDataBean.getTplRecoveryMemberClaimsList();
	        List listOfSelectedClaims = recoveryDataBean.getTplRecoveryIncludedclaimsList();
	        if(listOfSelectedClaims == null)
	        {
	        	listOfSelectedClaims = new ArrayList();
	        }
	        TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = null;
	        TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO = null;
	        if (massAdjRecords != null && !massAdjRecords.isEmpty()) {
				int listSize = massAdjRecords.size();
				for (int i = 0; i < listSize; i++) {
					tplRecoveryCaseMemberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO) massAdjRecords.get(i);
					String tcn = tplRecoveryCaseMemberClaimSelectionVO.getTcn();
					if ((selectedTCN != null ) && ((tcn != null && selectedTCN.trim().equals(tcn)))) {
						if(tplRecoveryCaseMemberClaimSelectionVO.isSelectClaim())
						{
							massAdjRecords.remove(i);
							massAdjRecords.add(i, tplRecoveryCaseMemberClaimSelectionVO);
							getIncludedClaims(tplRecoveryCaseMemberClaimSelectionVO,listOfSelectedClaims);
						
						}else
						{
							if(listOfSelectedClaims != null && listOfSelectedClaims.size()>0)
							{
								removeClaimIncludedList(tplRecoveryCaseMemberClaimSelectionVO,listOfSelectedClaims);
							}
						}
					}
				}
				recoveryDataBean.setTplRecoveryIncludedclaimsList(listOfSelectedClaims);
	      
				recoveryDataBean.setTplRecoveryClaimsList(massAdjRecords);
				if (listOfSelectedClaims.isEmpty())
				{
					recoveryDataBean.setCheckClaimsEmpty(true);
				}
				else
				{
					recoveryDataBean.setCheckClaimsEmpty(false);
					recoveryDataBean.setDisableRecoveryMethod(false);
					recoveryDataBean.setRenderRcvryMethod(false);
				}
	        }
		}catch(Exception e1){
			e1.printStackTrace();
		}
		
	}*/
	
	/**
	 * @param selectedTCN
	 * @param listOfIncludedClaims
	 */
	private void removeClaimIncludedList(TPLRecoveryCaseMemberClaimSelectionVO  memberClaimSelectionVO,
			List tempIncludedClaimsList){
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO  = null;
		Iterator listIncludedClaims = tempIncludedClaimsList.iterator();
		while(listIncludedClaims.hasNext())
		{
			String removedTcns;
			TPLRecoveryCaseIncludedClaimsVO tplRcvryCaseClaim = (TPLRecoveryCaseIncludedClaimsVO)listIncludedClaims.next();
			if(tplRcvryCaseClaim.getTcn() != null && memberClaimSelectionVO.getTcn()!=null 
				&& memberClaimSelectionVO.getTcn().equalsIgnoreCase(tplRcvryCaseClaim.getTcn()))
			{ 
				tplRecoveryCaseIncludedClaimsVO = removedIncludedClaimsVO(memberClaimSelectionVO,
						tplRcvryCaseClaim.getLi(),tplRcvryCaseClaim.isExcludeIndicator());
				////matching removed TCN with Response List and removing from ResponseList.
				List respList = tplRecoveryDataBean.getTplRecoveryResponseList();
				if ( respList!= null && respList.size()>0){	
					Iterator respListItr = respList.iterator();
					while(respListItr.hasNext()){
						TPLRecoveryCaseResponseVO caseResponseVO = 
							                 (TPLRecoveryCaseResponseVO)respListItr.next();
						if(caseResponseVO.getTcn().equalsIgnoreCase(memberClaimSelectionVO.getTcn()))
							respListItr.remove();
					}
					tplRecoveryDataBean.setTplRecoveryResponseList(respList);
				}
				//matching removed TCN with updatedRespList and removing from updatedRespList.
				List updatedRespList = tplRecoveryDataBean.getUpdatedResponseList();
				if(updatedRespList!=null && updatedRespList.size()>0){
					Iterator updatedRespListItr = respList.iterator();
					while(updatedRespListItr.hasNext()){
						TPLRecoveryCaseResponseVO caseResponseVO = 
							                 (TPLRecoveryCaseResponseVO)updatedRespListItr.next();
						if(caseResponseVO.getTcn().equalsIgnoreCase(memberClaimSelectionVO.getTcn()))
							updatedRespListItr.remove();
					}
					tplRecoveryDataBean.setUpdatedResponseList(updatedRespList);
				}
				//matching removed TCN with newIncluded Claims List and removing from newlist.
				List newIncludedClaims = tplRecoveryDataBean.getNewIncludedClmList();
				if(newIncludedClaims!=null && newIncludedClaims.size()>0) {
					Iterator newInclClmsItr = newIncludedClaims.iterator();
					while(newInclClmsItr.hasNext()){
						TPLRecoveryCaseIncludedClaimsVO newRcvryCaseInclClmsVO = 
							           (TPLRecoveryCaseIncludedClaimsVO)newInclClmsItr.next();
						if(newRcvryCaseInclClmsVO.getTcn().equals(tplRcvryCaseClaim.getTcn())){
							newInclClmsItr.remove();	
						}
					}
					tplRecoveryDataBean.setNewIncludedClmList(newIncludedClaims);
				}
				//matching removed TCN with Modified Included Claims List and removing from modified list.
				List modifiedInclClmsList = tplRecoveryDataBean.getModifiedInclClmsList();
				if(modifiedInclClmsList!=null && modifiedInclClmsList.size()>0) {
					Iterator modfiedInclClmsItr = modifiedInclClmsList.iterator();
					while(modfiedInclClmsItr.hasNext()){
						TPLRecoveryCaseIncludedClaimsVO rcvryCaseInclClmsVO = 
							       (TPLRecoveryCaseIncludedClaimsVO)modfiedInclClmsItr.next();
						if(rcvryCaseInclClmsVO.getTcn().equals(tplRcvryCaseClaim.getTcn())){
							modfiedInclClmsItr.remove();	
						}
					}
					tplRecoveryDataBean.setModifiedInclClmsList(modifiedInclClmsList);
				}
				listIncludedClaims.remove();
				tplRecoveryDataBean.getRemovedInclClmList().add(tplRecoveryCaseIncludedClaimsVO);
			}
		}
				tplRecoveryDataBean.setRenderIncludeClaim(false);
	}
	
	 //Infinite CR Implementation:{1825}
    /**
     * Used to get user permissions
     */
    public Map getUserPermission()
    {
      	Map linksMap = new HashMap();
      	String userid = getUserID();
    	FieldAccessControl fieldAccessControlImpl = new FieldAccessControl();
    	if(logger.isDebugEnabled()){
    		logger.debug("fieldAccessControlImpl::" + fieldAccessControlImpl);
    	}
    	String ssnpermissions ="";	
    	ArrayList linksList2Pass = new ArrayList();
    	linksList2Pass.add(TPLAdministrationConstants.UPDATE_RECOVERY_PAGE);
    	try 
		{
    		linksMap =  fieldAccessControlImpl.getActionLinkPermission(linksList2Pass,userid);
    	} 
    	catch (SecurityFLSServiceException e) 
		{
    		e.printStackTrace();
    		e.getCause();
    	}  	
    	if(logger.isDebugEnabled()){
    		logger.debug("linksMap in TPLPolicyControllerBean"+linksMap);
    	}
        return linksMap;
     }
 
      /**
       * Used to render or disable links based on permission.
       *
       */
    public void link2Show()
    {    	
    	Map links2Hide = getUserPermission();
    	Set keys = links2Hide.keySet();
    	Iterator keyitr = keys.iterator();
    	FieldAccessControl fieldAccessControlImpl = new FieldAccessControl();
    	while( keyitr. hasNext() )
    	{
	  		String linkName=(String)keyitr.next();	
	  		String linkPermission=(String)links2Hide.get(linkName);
	  		if(logger.isDebugEnabled()){
	  		logger.debug("Inside TPLPolicyControllerBean linkPermission"+linkPermission);
	  		}
	  		if (linkPermission != null)
	    	{
	    		linkPermission = linkPermission.trim();	
	    		if( linkName.equals(TPLAdministrationConstants.UPDATE_RECOVERY_PAGE))
	    		{
    				if(("r".equalsIgnoreCase(linkPermission)))//100
    				{	
    					if(logger.isDebugEnabled()){
    				  		logger.debug(">>>READ ONLY  linkPermission>>>"+linkPermission);
    					}
    					getTPLRecoveryDataBean().setDisabletplRecovery(true);
    					try
						{
    						String maskPriv = fieldAccessControlImpl.getFiledAccessPermission(
    								TPLHIPPConstants.TPL_HIPP_FIELD_MASKING, GlobUserID);
    						if(logger.isDebugEnabled()){
    					  		logger.debug(">>------MASK_PRIVILEGES----->"+maskPriv);
    						}
    						if(maskPriv == null || !TPLHIPPConstants.MASK_PRIVILEGES.equalsIgnoreCase(maskPriv))
    						{    					
    							getTPLRecoveryDataBean().setPartialMask("partial");
    							getTPLRecoveryDataBean().setFullMask("full");
    							getTPLRecoveryDataBean().setFullMaskBooleanValue(true); //for defect ESPRD00830192
    						}
						}
    					catch(SecurityFLSServiceException e)
						{
    						e.printStackTrace();
    						e.getCause();
						}
    				}
    				if(("d".equalsIgnoreCase(linkPermission)))
    				{
    					if(logger.isDebugEnabled()){
    				  		logger.debug(">>>>>>SUPER VISOR linkPermission>>>>>>>>"+linkPermission);
    					}
    					getTPLRecoveryDataBean().setDeleteFlag(true);
    				}	
    			}
	    	} 
	    	else 
	    	{	    		
	    		if( linkName.equals(TPLAdministrationConstants.UPDATE_RECOVERY_PAGE))
	    		{
					getTPLRecoveryDataBean().setDisabletplRecovery(true);
					try
					{
						if(logger.isDebugEnabled()){
    				  		logger.debug("> i am in else part>>>>>");
    					}
				 		String maskPriv = fieldAccessControlImpl.getFiledAccessPermission(
    							TPLHIPPConstants.TPL_HIPP_FIELD_MASKING, GlobUserID);
    					if(maskPriv == null || !TPLHIPPConstants.MASK_PRIVILEGES.equalsIgnoreCase(maskPriv))
    					{    					
    						getTPLRecoveryDataBean().setPartialMask("partial");
    						getTPLRecoveryDataBean().setFullMask("full");
    						getTPLRecoveryDataBean().setFullMaskBooleanValue(true); //for defect ESPRD00830192
    					}
					}
				 	catch(SecurityFLSServiceException e)
					{
			    		e.printStackTrace();
			    		e.getCause();
					}
	    		}
	    	}
    	}
    }
	
	/**
	 * @param selDeselEvent
	 */
	public void SelectAllClaimLines(ActionEvent selDeselEvent)
	{

		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("selectallclaimfocus");
		//List listOfSelectedClaims = tplRecoveryDataBean.getTplRecoveryIncludedclaimsList();
		List listOfSelectedClaims =  new ArrayList();
		/*if (listOfSelectedClaims == null) {
			listOfSelectedClaims = new ArrayList();
		}*/
		List claimsList = tplRecoveryDataBean.getTplRecoveryMemberClaimsList();
		String tcn = tplRecoveryDataBean.getTcn();
		String caseID = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
		TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO = null;
		if (tplRecoveryDataBean.isSelectAllClaimLines()) 
		{
			for (int i = 0; i < claimsList.size(); i++) 
			{
				tplRecoveryCaseMemberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO) claimsList.get(i);
				if (tplRecoveryCaseMemberClaimSelectionVO.getTcn().equals(tcn)) {
					listOfSelectedClaims = getIncludedClaimsForAllLineItems(
							tplRecoveryCaseMemberClaimSelectionVO,listOfSelectedClaims,caseID);
					break;
				}
			}
			//tplRecoveryDataBean.setTplRecoveryIncludedclaimsList(listOfSelectedClaims);
			if(tplRecoveryDataBean.getTplRecoveryIncludedclaimsList()!=null){
				tplRecoveryDataBean.getTplRecoveryIncludedclaimsList().addAll(listOfSelectedClaims);
			}else{
				tplRecoveryDataBean.setTplRecoveryIncludedclaimsList(listOfSelectedClaims);
			}
			setRenderingForIncludeClaims(tplRecoveryDataBean,
					tplRecoveryDataBean.getTplRecoveryIncludedclaimsList().size(),false);
			//add listOfSelectedClaims to new list and templist and removing from remove list
			tplRecoveryDataBean.getNewIncludedClmList().addAll(listOfSelectedClaims);
			List newIncludedClaims = tplRecoveryDataBean.getNewIncludedClmList();
			if(newIncludedClaims!=null && newIncludedClaims.size()>0) {
				List removedInclClmList = tplRecoveryDataBean.getRemovedInclClmList(); 
				if(removedInclClmList!=null && removedInclClmList.size()>0) {
					Iterator removedList = removedInclClmList.iterator();
					while(removedList.hasNext()){
						TPLRecoveryCaseIncludedClaimsVO removedRcvryCaseInclClmsVO = (TPLRecoveryCaseIncludedClaimsVO)removedList.next();
						if(newIncludedClaims.contains(removedRcvryCaseInclClmsVO)){
							removedList.remove();	
						}
					}
					tplRecoveryDataBean.setRemovedInclClmList(removedInclClmList);
				}
			}
		}
		if (!tplRecoveryDataBean.isSelectAllClaimLines()) {
			List listOfSelectedClaimsTemp = new ArrayList();
			listOfSelectedClaims = tplRecoveryDataBean.getTplRecoveryIncludedclaimsList();
			if (listOfSelectedClaims != null) {

				for (int i = 0; i < listOfSelectedClaims.size(); i++) {
					TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) listOfSelectedClaims
					.get(i);
					if (!tplRecoveryCaseIncludedClaimsVO.getTcn()
							.equalsIgnoreCase(tplRecoveryDataBean.getTcn())) {
						listOfSelectedClaimsTemp.add(tplRecoveryCaseIncludedClaimsVO);
					}
					//adding tcn to remove list
					if(tplRecoveryCaseIncludedClaimsVO.getTcn().equalsIgnoreCase(tplRecoveryDataBean.getTcn()))
					{
						tplRecoveryDataBean.getRemovedInclClmList().add(tplRecoveryCaseIncludedClaimsVO);
					}
				}
			}
			// Removing tcn from new List and tempList
			List removedInclClmList = tplRecoveryDataBean.getRemovedInclClmList();
			if(removedInclClmList!=null && removedInclClmList.size()>0) {
				List newIncludedClaims = tplRecoveryDataBean.getNewIncludedClmList();
				if(newIncludedClaims!=null && newIncludedClaims.size()>0){ 
					Iterator newInclClmsItr = newIncludedClaims.iterator();
					while(newInclClmsItr.hasNext()){
						TPLRecoveryCaseIncludedClaimsVO newRcvryCaseInclClmsVO = (TPLRecoveryCaseIncludedClaimsVO)newInclClmsItr.next();
						if(removedInclClmList.contains(newRcvryCaseInclClmsVO))
						{
							newInclClmsItr.remove();
						}
					}
					tplRecoveryDataBean.setNewIncludedClmList(newIncludedClaims);
				}
				List tempIncludedClaims = tplRecoveryDataBean.getTempInclClmsList();
				if(tempIncludedClaims!=null && tempIncludedClaims.size()>0){
					Iterator tempInclClmsItr = tempIncludedClaims.iterator();
					while(tempInclClmsItr.hasNext()){
						TPLRecoveryCaseIncludedClaimsVO tempRcvryCaseInclClmsVO = 
							(TPLRecoveryCaseIncludedClaimsVO)tempInclClmsItr.next();
						if(removedInclClmList.contains(tempRcvryCaseInclClmsVO))
						{
							tempInclClmsItr.remove();
						}
					}
					tplRecoveryDataBean.setTempInclClmsList(tempIncludedClaims);
				}
			}

			Set setOfLineItems = getTPLRecoveryDataBean().getTplRecoveryClaimLineItemList();
			Set setOfAllLineItems = new HashSet();
			List listTemp = new ArrayList();
			if (setOfLineItems != null) {
				Iterator iterator = setOfLineItems.iterator();
				while (iterator.hasNext()) {
					TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO = (TPLRecoveryCaseMemberClaimLineSelectionVO) iterator.next();
					if (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode() != null
							&& tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equalsIgnoreCase("P"))
					{
						tplRecoveryCaseMemberClaimLineSelectionVO.setSelectClaimLineItem(false);
						setOfAllLineItems.add(tplRecoveryCaseMemberClaimLineSelectionVO);
						listTemp.add(tplRecoveryCaseMemberClaimLineSelectionVO);
					}
				}
				getTPLRecoveryDataBean().setTplRecoveryClaimLineItemList(setOfAllLineItems);
				getTPLRecoveryDataBean().setTplRecoveryClaimLineItemShowList(listTemp);
			}
			tplRecoveryDataBean.setTplRecoveryIncludedclaimsList(listOfSelectedClaimsTemp);
			setRenderingForIncludeClaims(tplRecoveryDataBean,
					tplRecoveryDataBean.getTplRecoveryIncludedclaimsList().size(),false);
		}
		if (listOfSelectedClaims.isEmpty())
		{
			tplRecoveryDataBean.setCheckClaimsEmpty(true);
		}
		else
		{
			tplRecoveryDataBean.setCheckClaimsEmpty(false);
		}
	}
	
	
	private List getIncludedClaimsForAllLineItems(TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO,
			List listOfIncludedClaims, String caseID)
	{
		if(logger.isDebugEnabled()){
			logger.debug("Inside getIncludedClaimsForSelectedLineItems");
		}
		Set lineItemSet=new HashSet();
		TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		try{
			lineItemSet = tplRecoveryDelegate.MMISPharmacyLineItemsFilter(
					tplRecoveryCaseMemberClaimSelectionVO.getTcn(),
					tplRecoveryCaseMemberClaimSelectionVO.getSysId(),
					tplRecoveryCaseMemberClaimSelectionVO.getClaimType(),caseID);
		}catch(TPLRecoveryBusinessException e){
			e.printStackTrace();
		}
		TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = null;
		if(lineItemSet!=null && lineItemSet.size()>0){
			Iterator iterator=lineItemSet.iterator();
			while(iterator.hasNext()){
				TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO = (TPLRecoveryCaseMemberClaimLineSelectionVO)iterator.next();
				
				if (!tplRecoveryCaseMemberClaimLineSelectionVO.isSelectClaimLineItem() 
						&& tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode() != null 
						&& ((tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equalsIgnoreCase("P")) 
								|| (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equalsIgnoreCase("O"))))
				{
					tplRecoveryCaseIncludedClaimsVO=new TPLRecoveryCaseIncludedClaimsVO();
					if(tplRecoveryCaseMemberClaimLineSelectionVO.getLi()!=null)
					{
						tplRecoveryCaseIncludedClaimsVO.setLi(Integer.valueOf(tplRecoveryCaseMemberClaimLineSelectionVO.getLi().toString()));
					}
					else
					{
						tplRecoveryCaseIncludedClaimsVO.setLi(Integer.valueOf(0));
					}
					if(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()!=null && StringUtils.isNotEmpty(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount())){
						tplRecoveryCaseIncludedClaimsVO.setReimbursementAmount(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue());
						tplRecoveryCaseIncludedClaimsVO.setReimbursementAmountStr(
								decimalValue(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue()));
						tplRecoveryCaseIncludedClaimsVO.setReqAmountStr(
								decimalValue(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue()));
						tplRecoveryCaseIncludedClaimsVO.setReqAmount(
								new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue());
				    }
					tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmount(
					 		new Double("0.00").doubleValue());
					tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmountStr(
					 		decimalValue(new Double("0.00").doubleValue()));
					
					tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmount(
					 		Double.valueOf(tplRecoveryCaseMemberClaimLineSelectionVO.getProviderChargedAmount()).doubleValue());
					tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmountStr(
					 		decimalValue((tplRecoveryCaseMemberClaimLineSelectionVO.getProviderChargedAmount())));
					
					tplRecoveryCaseIncludedClaimsVO.setClaimType(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
					tplRecoveryCaseIncludedClaimsVO.setClaimTypeDesc(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
					tplRecoveryCaseIncludedClaimsVO.setTcn(tplRecoveryCaseMemberClaimSelectionVO.getTcn());
					tplRecoveryCaseIncludedClaimsVO.setSysId(tplRecoveryCaseMemberClaimSelectionVO.getSysId());
					tplRecoveryCaseIncludedClaimsVO.setFdos(dateformatYYYYMMDD.format(tplRecoveryCaseMemberClaimSelectionVO.getFdos()));
					listOfIncludedClaims.add(tplRecoveryCaseIncludedClaimsVO);
				}
			}
		}
		Set setOfLineItems=getTPLRecoveryDataBean().getTplRecoveryClaimLineItemList();
		Set setOfAllLineItems=new HashSet();
		List listTemp = new ArrayList();
		if(setOfLineItems!=null){
			Iterator iterator=setOfLineItems.iterator();
			while(iterator.hasNext()){
				TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO = (TPLRecoveryCaseMemberClaimLineSelectionVO)iterator.next();
				if (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode() != null
					 && ( (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equals("P")) 
							|| (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equals("O"))))
				{
					tplRecoveryCaseMemberClaimLineSelectionVO.setSelectClaimLineItem(true);
					setOfAllLineItems.add(tplRecoveryCaseMemberClaimLineSelectionVO);
					listTemp.add(tplRecoveryCaseMemberClaimLineSelectionVO);
				}
			}
			getTPLRecoveryDataBean().setTplRecoveryClaimLineItemList(setOfAllLineItems);
			getTPLRecoveryDataBean().setTplRecoveryClaimLineItemShowList(listTemp);
		}
		return listOfIncludedClaims;
	}
	
	
	public void selectDeselectLineItems(ActionEvent selDeselEvent)
	{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("selectallclaimfocus");
		List lineItemSet = tplRecoveryDataBean.getTplRecoveryClaimLineItemShowList();		
		List listOfIncludedClaims = tplRecoveryDataBean.getTplRecoveryIncludedclaimsList();
		List claimsList = tplRecoveryDataBean.getTplRecoveryMemberClaimsList();
		List tempList = new ArrayList();
		String caseID = tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
		TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO = null;
		TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO = null;
		TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = null;
		HashMap hashMap = new HashMap();
		boolean flagForSelectAllLinrItem = true;
		if (listOfIncludedClaims != null && listOfIncludedClaims.size() > 0) {
			for (Iterator it = listOfIncludedClaims.iterator(); it.hasNext(); )
			{
				tplRecoveryCaseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) it.next();
				if (tplRecoveryCaseIncludedClaimsVO.getTcn().equals(tplRecoveryDataBean.getTcn())) {
					hashMap.put(tplRecoveryCaseIncludedClaimsVO.getLi(),Integer.valueOf(tplRecoveryCaseIncludedClaimsVO.getVersionNo()));
					it.remove();
					tempList.add(tplRecoveryCaseIncludedClaimsVO);
				}
			}
		}
		if (listOfIncludedClaims == null) {
			listOfIncludedClaims = new ArrayList();
		}
		if (claimsList != null && claimsList.size() > 0) {
			for (int i = 0; i < claimsList.size(); i++) {
				tplRecoveryCaseMemberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO) claimsList.get(i);
				if (tplRecoveryCaseMemberClaimSelectionVO.getTcn().equals(tplRecoveryDataBean.getTcn())) {
					break;
				}
			}
			if (lineItemSet != null && lineItemSet.size() > 0) {
				Iterator iterator = lineItemSet.iterator();
				while (iterator.hasNext()) {
					tplRecoveryCaseMemberClaimLineSelectionVO = (TPLRecoveryCaseMemberClaimLineSelectionVO) iterator.next();
					if (tplRecoveryCaseMemberClaimLineSelectionVO.isSelectClaimLineItem()) {
						Object selectedLi = tplRecoveryCaseMemberClaimLineSelectionVO.getLi();
						listOfIncludedClaims = getIncludedClaimsForSelectedLineItems(
													tplRecoveryCaseMemberClaimSelectionVO,
													listOfIncludedClaims, selectedLi, hashMap,caseID);
					}
					else
					{
						flagForSelectAllLinrItem = false;
					}
				}
			}
			if (flagForSelectAllLinrItem)
			{
				tplRecoveryDataBean.setSelectAllClaimLines(true);
			}
			else
			{
				tplRecoveryDataBean.setSelectAllClaimLines(false);
			}
		}
		if(tempList.size()>0 && listOfIncludedClaims.size()>0){
			Iterator tempListItr = tempList.iterator();
			List newInludedList = tplRecoveryDataBean.getNewIncludedClmList();
			tplRecoveryCaseIncludedClaimsVO = null;
			while(tempListItr.hasNext()){
				tplRecoveryCaseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) tempListItr.next();
				//if listOfIncluedClaims not having tempList records then add to remove list and remove from new list
				if(!listOfIncludedClaims.contains(tplRecoveryCaseIncludedClaimsVO)){
					tplRecoveryDataBean.getRemovedInclClmList().add(tplRecoveryCaseIncludedClaimsVO);
					//remove from new list
					if(newInludedList!=null && newInludedList.size()>0){
						TPLRecoveryCaseIncludedClaimsVO rcvryInclClaimsVO = null;
						Iterator newIncludeItr = newInludedList.iterator();
						while (newIncludeItr.hasNext()){
							rcvryInclClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) newIncludeItr.next();
							if((rcvryInclClaimsVO.getTcn().equals(tplRecoveryCaseIncludedClaimsVO.getTcn()))
								&& (rcvryInclClaimsVO.getLi().equals(tplRecoveryCaseIncludedClaimsVO.getLi()))){
								newIncludeItr.remove();
							}
						}
					}
				}
			}
			Iterator InclListItr = listOfIncludedClaims.iterator();
			List removeInludedList = tplRecoveryDataBean.getRemovedInclClmList();
			tplRecoveryCaseIncludedClaimsVO = null;
			//Adding new Line items to new list and removing new line items in remove list if it is having new line
			while(InclListItr.hasNext()){
				tplRecoveryCaseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) InclListItr.next();
				if(tplRecoveryCaseIncludedClaimsVO.getTcn().equals(tplRecoveryDataBean.getTcn())){
					if(!tplRecoveryDataBean.getNewIncludedClmList().contains(tplRecoveryCaseIncludedClaimsVO)){
						tplRecoveryDataBean.getNewIncludedClmList().add(tplRecoveryCaseIncludedClaimsVO);
					}
					if(removeInludedList!=null && removeInludedList.size()>0){
						TPLRecoveryCaseIncludedClaimsVO rcvryInclClaimsVO = null;
						Iterator removeIncludeItr = removeInludedList.iterator();
						while (removeIncludeItr.hasNext()){
							rcvryInclClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) removeIncludeItr.next();
							if((rcvryInclClaimsVO.getTcn().equals(tplRecoveryCaseIncludedClaimsVO.getTcn()))
								&& (rcvryInclClaimsVO.getLi().equals(tplRecoveryCaseIncludedClaimsVO.getLi()))){
								removeIncludeItr.remove();
							}
						}
					}
					
				}
			}
		}else{
			if(listOfIncludedClaims.size()>0){
				//add all tcns to new list from listOfIncludedClaims which match with tplRecoveryDataBean.getTcn()
				Iterator InclListItr = listOfIncludedClaims.iterator();
				while(InclListItr.hasNext()){
					tplRecoveryCaseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) InclListItr.next();
					if(tplRecoveryCaseIncludedClaimsVO.getTcn().equals(tplRecoveryDataBean.getTcn())){
						tplRecoveryDataBean.getNewIncludedClmList().add(tplRecoveryCaseIncludedClaimsVO);
					}
				}
			}
			if(tempList.size()>0){
				//Add all tempList to remove List
				Iterator tempListItr = tempList.iterator();
				List removeInludedList = tplRecoveryDataBean.getNewIncludedClmList();
				tplRecoveryCaseIncludedClaimsVO = null;
				while(tempListItr.hasNext()){
					tplRecoveryCaseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) tempListItr.next();
					if(!tplRecoveryDataBean.getRemovedInclClmList().contains(tplRecoveryCaseIncludedClaimsVO)){
						tplRecoveryDataBean.getRemovedInclClmList().add(tplRecoveryCaseIncludedClaimsVO);
					}
				}
			}
		}
		tplRecoveryDataBean.setTplRecoveryIncludedclaimsList(listOfIncludedClaims);
		setRenderingForIncludeClaims(tplRecoveryDataBean, listOfIncludedClaims.size(), false);
		
		if (listOfIncludedClaims.isEmpty())
		{
			tplRecoveryDataBean.setCheckClaimsEmpty(true);
		}
		else
		{
			tplRecoveryDataBean.setCheckClaimsEmpty(false);
		}
	}
	
	private List getIncludedClaimsForSelectedLineItems(TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO,
			List listOfIncludedClaims, Object selectedLi, HashMap hashMap, String caseID)
	{
		Set lineItemSet=new HashSet();
		TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		try{
			lineItemSet = tplRecoveryDelegate.MMISPharmacyLineItemsFilter(
					tplRecoveryCaseMemberClaimSelectionVO.getTcn(),
					tplRecoveryCaseMemberClaimSelectionVO.getSysId(),
					tplRecoveryCaseMemberClaimSelectionVO.getClaimType(),caseID);
		}catch(TPLRecoveryBusinessException e){
			e.printStackTrace();
		}
		TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = null;
		if(lineItemSet!=null && lineItemSet.size()>0)
		{
			Iterator iterator=lineItemSet.iterator();
			while(iterator.hasNext())
			{
				TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO = (TPLRecoveryCaseMemberClaimLineSelectionVO)iterator.next();
				if(tplRecoveryCaseMemberClaimLineSelectionVO.getLi().toString().equals(selectedLi.toString()))
				{
					tplRecoveryCaseIncludedClaimsVO=new TPLRecoveryCaseIncludedClaimsVO();
					if(tplRecoveryCaseMemberClaimLineSelectionVO.getLi()!=null)
					{
						tplRecoveryCaseIncludedClaimsVO.setLi(Integer.valueOf(tplRecoveryCaseMemberClaimLineSelectionVO.getLi().toString()));
					}
					else
					{
						tplRecoveryCaseIncludedClaimsVO.setLi(Integer.valueOf(0));
					}
					Integer integerLi = (Integer)hashMap.get(Integer.valueOf(selectedLi.toString()));
					if (null != integerLi)
					{
						tplRecoveryCaseIncludedClaimsVO.setVersionNo(integerLi.intValue());
					}
					if(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()!=null)
					{
						tplRecoveryCaseIncludedClaimsVO.setReimbursementAmount(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue());
						tplRecoveryCaseIncludedClaimsVO.setReimbursementAmountStr(
								decimalValue(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue()));
						tplRecoveryCaseIncludedClaimsVO.setReqAmountStr(
								decimalValue(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue()));
						tplRecoveryCaseIncludedClaimsVO.setReqAmount(
								new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue());
					}
					tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmount(new Double("0.00").doubleValue());
					tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmountStr(
							decimalValue(new Double("0.00").doubleValue()));

					tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmount(
							(tplRecoveryCaseMemberClaimLineSelectionVO.getProviderChargedAmount()));
					tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmountStr(
							decimalValue((tplRecoveryCaseMemberClaimLineSelectionVO.getProviderChargedAmount())));
					tplRecoveryCaseIncludedClaimsVO.setSysId(tplRecoveryCaseMemberClaimSelectionVO.getSysId());
					tplRecoveryCaseIncludedClaimsVO.setClaimType(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
					tplRecoveryCaseIncludedClaimsVO.setClaimTypeDesc(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
					tplRecoveryCaseIncludedClaimsVO.setTcn(tplRecoveryCaseMemberClaimSelectionVO.getTcn());
					tplRecoveryCaseIncludedClaimsVO.setFdos(dateformatYYYYMMDD.format(tplRecoveryCaseMemberClaimSelectionVO.getFdos()));
					listOfIncludedClaims.add(tplRecoveryCaseIncludedClaimsVO);
					break;
				}
			}
			}
		return listOfIncludedClaims;
	}
	
	
	
	/**
	 * @param selDeselEvent
	 */
	public void valueChangeSelectAll(ActionEvent selDeselEvent) {
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("selectallfocus");
		tplRecoveryDataBean.setSelectAllClaims(true);
		
		List massAdjRecords = tplRecoveryDataBean.getTplRecoveryMemberClaimsList();
        List listOfSelectedClaims = tplRecoveryDataBean.getTplRecoveryIncludedclaimsList();
        if(listOfSelectedClaims == null)
        {
        	listOfSelectedClaims = new ArrayList();
        	tplRecoveryDataBean.setTplRecoveryIncludedclaimsList(listOfSelectedClaims);
        }
        TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = null;
        TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO = null;
        if (massAdjRecords != null && !massAdjRecords.isEmpty()) {
	
			int listSize = massAdjRecords.size();
			for (int i = 0; i < listSize; i++) {
				tplRecoveryCaseMemberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO) massAdjRecords.get(i);
				if(tplRecoveryDataBean.isSelectAll())
				{
					if (!tplRecoveryCaseMemberClaimSelectionVO.isSelectClaim())
					{
						massAdjRecords.remove(i);
						tplRecoveryCaseMemberClaimSelectionVO.setSelectClaim(true);
						massAdjRecords.add(i, tplRecoveryCaseMemberClaimSelectionVO);
					}
				}
				else
				{
					if(listOfSelectedClaims != null && listOfSelectedClaims.size()>0)
					{
						if (!tplRecoveryCaseMemberClaimSelectionVO.isDisableClaim())
						{
							massAdjRecords.remove(i);
							tplRecoveryCaseMemberClaimSelectionVO.setSelectClaim(false);
							massAdjRecords.add(i, tplRecoveryCaseMemberClaimSelectionVO);
						}
					}
					else
					{
						if (!tplRecoveryCaseMemberClaimSelectionVO.isDisableClaim())
						{
							massAdjRecords.remove(i);
							tplRecoveryCaseMemberClaimSelectionVO.setSelectClaim(false);
							massAdjRecords.add(i, tplRecoveryCaseMemberClaimSelectionVO);
						}
					}
						
				}
	        }
	    }
        tplRecoveryDataBean.setTplRecoveryClaimsList(massAdjRecords);
        if (!tplRecoveryDataBean.isSelectAll() && listOfSelectedClaims.isEmpty())
		{
			tplRecoveryDataBean.setCheckClaimsEmpty(true);
		}
		else
		{
			tplRecoveryDataBean.setCheckClaimsEmpty(false);
			tplRecoveryDataBean.setDisableRecoveryMethod(false);
			tplRecoveryDataBean.setRenderRcvryMethod(false);
			
		}
	}
	
	/**
	 * @param tplRecoveryCaseMemberClaimSelectionVO
	 * @param listOfIncludedClaims
	 * @return
	 */
	private List getIncludedClaims(TPLRecoveryCaseMemberClaimSelectionVO 
								tplRecoveryCaseMemberClaimSelectionVO,List newIncludedClaims,String caseID)
	{
		TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = null;
		Set listOfLineItems=new HashSet(); 
		TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		try{
			if("L".equalsIgnoreCase(tplRecoveryCaseMemberClaimSelectionVO.getPricingMethodCode()))
			{
				tplRecoveryCaseMemberClaimSelectionVO.setSysId(getTPLRecoveryDataBean().getSystemId());
				listOfLineItems = tplRecoveryDelegate.MMISPharmacyLineItemsFilter(
						tplRecoveryCaseMemberClaimSelectionVO.getTcn(),
						tplRecoveryCaseMemberClaimSelectionVO.getSysId(),
						tplRecoveryCaseMemberClaimSelectionVO.getClaimType(),caseID);
			}
		}catch(TPLRecoveryBusinessException e){
			e.printStackTrace();
		}
		List listOfPreviousResponse = new ArrayList(); 
		if(listOfLineItems != null && listOfLineItems.size()>0)
		{
			Iterator it = listOfLineItems.iterator();
			while(it.hasNext())
			{
				tplRecoveryCaseIncludedClaimsVO = new TPLRecoveryCaseIncludedClaimsVO();
				TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO = (TPLRecoveryCaseMemberClaimLineSelectionVO)it.next();
				if (tplRecoveryCaseMemberClaimLineSelectionVO != null)
				{
					tplRecoveryCaseIncludedClaimsVO.setClaimType(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
					tplRecoveryCaseIncludedClaimsVO.setClaimTypeDesc(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
					tplRecoveryCaseIncludedClaimsVO.setTcn(tplRecoveryCaseMemberClaimSelectionVO.getTcn());
					//ESPRD00756163
					tplRecoveryCaseIncludedClaimsVO.setSysId(tplRecoveryCaseMemberClaimSelectionVO.getSysId());
					if (tplRecoveryCaseMemberClaimSelectionVO.getFdos() != null)
					{
						tplRecoveryCaseIncludedClaimsVO.setFdos(dateformatYYYYMMDD.format(tplRecoveryCaseMemberClaimSelectionVO.getFdos()));
					}
					if (tplRecoveryCaseMemberClaimLineSelectionVO.getLi() != null)
					{
						tplRecoveryCaseIncludedClaimsVO.setLi(Integer.valueOf(tplRecoveryCaseMemberClaimLineSelectionVO.getLi().toString()));
					}
					else
					{
						tplRecoveryCaseIncludedClaimsVO.setLi(Integer.valueOf(0));
					}
					if (tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount() != null 
							&& StringUtils.isNotEmpty(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()))
					{
						tplRecoveryCaseIncludedClaimsVO.setReimbursementAmountStr(decimalValue(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue()));
						tplRecoveryCaseIncludedClaimsVO.setReqAmountStr(decimalValue(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue()));
					}
					tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmountStr(decimalValue(
							new Double("0").doubleValue()));
					tplRecoveryCaseIncludedClaimsVO.setReimbursementAmount(new Double(
							tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue());
					tplRecoveryCaseIncludedClaimsVO.setReqAmount(new Double(
							tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue());
					tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmount((
							tplRecoveryCaseMemberClaimLineSelectionVO.getProviderChargedAmount()));
					tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmountStr(decimalValue(
							(tplRecoveryCaseMemberClaimLineSelectionVO.getProviderChargedAmount())));
					tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmount(
							new Double("0").doubleValue());

					Set set = tplRecoveryCaseMemberClaimLineSelectionVO.getTplRecoveryCaseClaims();
					if (set!=null)
					{
						if (getTPLRecoveryDataBean().getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID() != null)
						{
							Iterator it1 = set.iterator();
							while(it1.hasNext())
							{
								TPLRecoveryResponse tplRecoveryResponse = (TPLRecoveryResponse)it1.next();
								if (tplRecoveryCaseMemberClaimSelectionVO.getTcn().equals(tplRecoveryResponse.getTcn()))
								{
									listOfPreviousResponse.add(tplRecoveryResponse);
								}
							}
						}
					}
				}
				if (tplRecoveryCaseMemberClaimSelectionVO.isSelectClaim() 
						&& tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode()!=null
						&& ((tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equals("P")) 
								|| (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equals("O"))
						))
				{
					newIncludedClaims.add(tplRecoveryCaseIncludedClaimsVO);
				}
				
			}
		}else {
			System.out.println("inside else block of listOfLineItems != null && listOfLineItems.size()>0");
			tplRecoveryCaseIncludedClaimsVO = new TPLRecoveryCaseIncludedClaimsVO();	
			//Added for defect : ESPRD00796144 - Setting SysId in tplRecoveryCaseIncludedClaimsVO
			tplRecoveryCaseIncludedClaimsVO.setSysId(tplRecoveryCaseMemberClaimSelectionVO.getSysId());
			//end
			tplRecoveryCaseIncludedClaimsVO.setClaimType(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
			tplRecoveryCaseIncludedClaimsVO.setClaimTypeDesc(tplRecoveryCaseMemberClaimSelectionVO.getClaimType());
			tplRecoveryCaseIncludedClaimsVO.setTcn(tplRecoveryCaseMemberClaimSelectionVO.getTcn());
			if(tplRecoveryCaseMemberClaimSelectionVO.getReplacementReason()!=null 
				&& !tplRecoveryCaseMemberClaimSelectionVO.getReplacementReason().trim().equalsIgnoreCase(""))
			{
				tplRecoveryCaseIncludedClaimsVO.setReplacementReason(
						tplRecoveryCaseMemberClaimSelectionVO.getReplacementReason());
			}
			if (tplRecoveryCaseMemberClaimSelectionVO.getFdos() != null)
			{
				tplRecoveryCaseIncludedClaimsVO.setFdos(dateformatYYYYMMDD.format(tplRecoveryCaseMemberClaimSelectionVO.getFdos()));
			}
			tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmountStr(decimalValue(
					new Double("0").doubleValue()));
			tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmount(
					new Double("0").doubleValue());
			//for defect : ESPRD00811218 
			if(tplRecoveryCaseMemberClaimSelectionVO.getProviderRechargeAmount() != null){
				tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmountStr(decimalValue(tplRecoveryCaseMemberClaimSelectionVO.getProviderRechargeAmount()));
				tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmount(tplRecoveryCaseMemberClaimSelectionVO.getProviderRechargeAmount().doubleValue());
			}				
			
			tplRecoveryCaseIncludedClaimsVO.setLi(Integer.valueOf(0));
			if (tplRecoveryCaseMemberClaimSelectionVO.getReimbursementAmount()!=null)
			{
				tplRecoveryCaseIncludedClaimsVO.setReimbursementAmount(
						tplRecoveryCaseMemberClaimSelectionVO.getReimbursementAmount().doubleValue());
				tplRecoveryCaseIncludedClaimsVO.setReimbursementAmountStr(decimalValue(
						tplRecoveryCaseMemberClaimSelectionVO.getReimbursementAmount().doubleValue()));
				tplRecoveryCaseIncludedClaimsVO.setReqAmountStr(
						decimalValue(tplRecoveryCaseMemberClaimSelectionVO.getReimbursementAmount().doubleValue()));
				tplRecoveryCaseIncludedClaimsVO.setReqAmount(
						tplRecoveryCaseMemberClaimSelectionVO.getReimbursementAmount().doubleValue());
			}
			newIncludedClaims.add(tplRecoveryCaseIncludedClaimsVO);
		}
		return newIncludedClaims;
		
	}
	/**
	 * 
	 */
	public void displayClaimLineItems()
	{
		FacesContext context = FacesContext.getCurrentInstance();
		Map map = context.getExternalContext().getRequestParameterMap();
		String rowID = map.get("rowIndex").toString();
		TPLRecoveryDataBean recoveryDataBean =  getTPLRecoveryDataBean();
		recoveryDataBean.setFocusThisId("clamlinefocus");
		List recoveyClaimList = recoveryDataBean.getTplRecoveryMemberClaimsList();
		TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO = null;
		TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		int listSize = recoveyClaimList.size();		
		//for defect : ESPRD00811218 
		recoveryDataBean.setSelectAllClaimLines(false);
		recoveryDataBean.setDisableAllClaimLineItem(false);
		String caseID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();

		try
		{
		for (int i = 0; i < listSize; i++) {
			tplRecoveryCaseMemberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO) recoveyClaimList.get(i);
			String tcn = tplRecoveryCaseMemberClaimSelectionVO.getTcn();
			if ((rowID != null )
					&& ((tcn != null && rowID.trim().equals(tcn)))) 
			{
				boolean flag = true;
				Set listOfLineItems= new HashSet(); 
				List listTemp = new ArrayList();
				try{
					if("L".equalsIgnoreCase(tplRecoveryCaseMemberClaimSelectionVO.getPricingMethodCode()))
					{
					    listOfLineItems = tplRecoveryDelegate.MMISPharmacyLineItemsFilter(
					    		tcn,tplRecoveryCaseMemberClaimSelectionVO.getSysId(),
					    		tplRecoveryCaseMemberClaimSelectionVO.getClaimType(),caseID);
					}
				}catch(TPLRecoveryBusinessException e){
					e.printStackTrace();
				}
				if(listOfLineItems!= null && listOfLineItems.size() >0){
					if(logger.isDebugEnabled()){
						logger.debug("listOfLineItems is not nullllll::::::::::::");
					}
					if (!tplRecoveryCaseMemberClaimSelectionVO.getClaimType().startsWith("P")
							&& !tplRecoveryCaseMemberClaimSelectionVO.getClaimType().startsWith("I"))
					{
						recoveryDataBean.setTcn(rowID);
						recoveryDataBean.setSelectAllClaimLines(true);
						Iterator iterator = listOfLineItems.iterator();
						while (iterator.hasNext())
						{
							TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO = (TPLRecoveryCaseMemberClaimLineSelectionVO)iterator.next();
							
							if(tplRecoveryCaseMemberClaimLineSelectionVO != null){
							if (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode() != null
									&& ((tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equals("P"))
											|| (tplRecoveryCaseMemberClaimLineSelectionVO.getStatusCode().equals("O")))
									
								)
							{
								if(tplRecoveryCaseMemberClaimLineSelectionVO.isLineSelected()){
									tplRecoveryCaseMemberClaimLineSelectionVO.setSelectClaimLineItem(true);
								}else{
									tplRecoveryCaseMemberClaimLineSelectionVO.setSelectClaimLineItem(false);
								}
									
								//for disabling claim line detail - ESPRD00811218 
								if(tplRecoveryCaseMemberClaimSelectionVO.isDisableClaim() ){									
									tplRecoveryCaseMemberClaimLineSelectionVO.setDisableClaimLineItem(true);
									recoveryDataBean.setDisableAllClaimLineItem(true);
								}
								if (tplRecoveryCaseMemberClaimLineSelectionVO != null && 
										tplRecoveryCaseMemberClaimSelectionVO.getTDOS() != null)
								{
									tplRecoveryCaseMemberClaimLineSelectionVO.setTdos(dateformatYYYYMMDD.format(tplRecoveryCaseMemberClaimSelectionVO.getTDOS()));
								}
								if (tplRecoveryCaseMemberClaimLineSelectionVO != null && 
										tplRecoveryCaseMemberClaimSelectionVO.getFdos() != null)
								{
									tplRecoveryCaseMemberClaimLineSelectionVO.setFdos(dateformatYYYYMMDD.format(tplRecoveryCaseMemberClaimSelectionVO.getFdos()));
								}
								tplRecoveryCaseMemberClaimLineSelectionVO.setProviderChargedAmountStr(
										decimalValue(tplRecoveryCaseMemberClaimLineSelectionVO.getProviderChargedAmount()));
								tplRecoveryCaseMemberClaimLineSelectionVO.setReimbursementAmount(
										decimalValue(new Double(tplRecoveryCaseMemberClaimLineSelectionVO.getReimbursementAmount()).doubleValue()));
								disableClaimLineSelection(tplRecoveryCaseMemberClaimLineSelectionVO);
								flag = tplRecoveryCaseMemberClaimLineSelectionVO.isSelectClaimLineItem();
								if (!flag)
								{
									getTPLRecoveryDataBean().setSelectAllClaimLines(false);
								}
								
								listTemp.add(tplRecoveryCaseMemberClaimLineSelectionVO);
								listOfLineItems.add(tplRecoveryCaseMemberClaimLineSelectionVO);
							}
						 }	
						}
					 	
						recoveryDataBean.setClaimLineRendered(true);
						recoveryDataBean.setTcn(rowID);
						recoveryDataBean.setTplRecoveryClaimLineItemList(listOfLineItems);
						recoveryDataBean.setTplRecoveryClaimLineItemShowList(listTemp);
					}
					else
					{
						recoveryDataBean.setTcn(rowID);
						listOfLineItems = new HashSet(); 
						listTemp = new ArrayList(); 
						recoveryDataBean.setTplRecoveryClaimLineItemList(listOfLineItems);
						recoveryDataBean.setTplRecoveryClaimLineItemShowList(listTemp);
						recoveryDataBean.setClaimLineRendered(true);
					}
					
				}else {
					recoveryDataBean.setTcn(rowID);
					listOfLineItems = new HashSet(); 
					listTemp = new ArrayList(); 
					recoveryDataBean.setTplRecoveryClaimLineItemList(listOfLineItems);
					recoveryDataBean.setTplRecoveryClaimLineItemShowList(listTemp);
					recoveryDataBean.setClaimLineRendered(true);
				}
 			}
	 }
		}
		catch(Exception ee)
		{
			ee.printStackTrace();
		}
		//recoveryDataBean.setTplRecoveryMemberClaimsList(recoveyClaimList);
	}
	/**
	 * @param tplRecoveryCaseMemberClaimLineSelectionVO
	 */
	private TPLRecoveryCaseMemberClaimLineSelectionVO disableClaimLineSelection(TPLRecoveryCaseMemberClaimLineSelectionVO tplRecoveryCaseMemberClaimLineSelectionVO) {
		List recoveyIncludedClaimList = getTPLRecoveryDataBean().getTplRecoveryIncludedclaimsList();
		if (null != recoveyIncludedClaimList && recoveyIncludedClaimList.size()>0)
		{
			Iterator iterator = recoveyIncludedClaimList.iterator();
			while (iterator.hasNext()) {
				TPLRecoveryCaseIncludedClaimsVO caseIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) iterator.next();
				
				if (tplRecoveryCaseMemberClaimLineSelectionVO.getLi().equals(caseIncludedClaimsVO.getLi()) &&
						getTPLRecoveryDataBean().getTcn().equals(caseIncludedClaimsVO.getTcn()))
				{
					if (caseIncludedClaimsVO.isExcludeIndicator())
					{
						tplRecoveryCaseMemberClaimLineSelectionVO.setDisableClaimLineItem(true);
					}
					if (!caseIncludedClaimsVO.getTplRecoveredAmountStr().equals("0.00"))
					{
						tplRecoveryCaseMemberClaimLineSelectionVO.setDisableClaimLineItem(true);
					}
					tplRecoveryCaseMemberClaimLineSelectionVO.setSelectClaimLineItem(true);
				}
			}
		}
		
		return tplRecoveryCaseMemberClaimLineSelectionVO;
		
	}
	/**
	 * As per defect ESPRD00089051
	 * @return Returns the claimUpdateFlag.
	 *//*
	public boolean isClaimUpdateFlag() {
		return claimUpdateFlag;
	}
	*//**
	 * As per defect ESPRD00089051
	 * @param claimUpdateFlag The claimUpdateFlag to set.
	 *//*
	public void setClaimUpdateFlag(boolean claimUpdateFlag) {
		this.claimUpdateFlag = claimUpdateFlag;
	}*/
	
	/**
	 * As per defect ESPRD00089078
	 * @return Returns the interestedPartyUpdateFlag.
	 */
	public boolean isInterestedPartyUpdateFlag() {
		return interestedPartyUpdateFlag;
	}
	/**
	 * As per defect ESPRD00089078
	 * @param interestedPartyUpdateFlag The interestedPartyUpdateFlag to set.
	 */
	public void setInterestedPartyUpdateFlag(boolean interestedPartyUpdateFlag) {
		this.interestedPartyUpdateFlag = interestedPartyUpdateFlag;
	}
	
	/**
	 * @return
	 *///ESPRD00856351:Modified method to use differet VO for previousResponse and ResponseDetails
	public String editPreviousResponse()
	{
		String SUCCESS = "success";
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("prevresponsefocus");
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			Integer rowValueInt = new Integer(rowValue);
			TPLRecoveryCaseResponseVO caseResponseVO = (TPLRecoveryCaseResponseVO) tplRecoveryDataBean
							.getTplRecoveryPreviousResponseList().get(rowValueInt.intValue());
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRcvryCasePrevResponseVO().setTcn(caseResponseVO.getTcn());
			
			//ESPRD00853186
 			List responseList = new ArrayList();
 			responseList.add(createAuditableFeild("responseDate","ResponseDate"));
 			responseList.add(createAuditableFeild("responseAmount","ResponseAmount"));
 			responseList.add(createAuditableFeild("responseReasonCode","ResponseReasonCode"));
 			responseList.add(createAuditableFeild("fcnNumber","FCNNumber"));
 			if(caseResponseVO.getAuditKeyList()!=null && !caseResponseVO.getAuditKeyList().isEmpty())
 			{
 				AuditDataFilter.filterAuditKeys(responseList,caseResponseVO);
    			UIComponent component = TPLAdministrationHelper.findComponentInRoot("RecoveryResponseAuditId");
    			if(component!=null){
    				AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    				auditHistoryTable.setValue(caseResponseVO.getAuditKeyList());			
    				auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    			}
    		}else{
    				
    		 		if(logger.isDebugEnabled()){
    		 			logger.debug("======tplrcvyResponseVO====Before Filter Empty===");
    		 			}
        	}
 			//End ESPRD00853186

			if (caseResponseVO.getLi() != null)
			{
				tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRcvryCasePrevResponseVO().setLi(new Integer(caseResponseVO.getLi().toString()));
			}
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRcvryCasePrevResponseVO().setRecoveryDate(caseResponseVO.getRecoveryDate());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRcvryCasePrevResponseVO().setRecoveryAmount(caseResponseVO.getRecoveryAmount());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRcvryCasePrevResponseVO().setRecoveryReason(caseResponseVO.getRecoveryReason());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRcvryCasePrevResponseVO().setFcn(caseResponseVO.getFcn());
			
			tplRecoveryDataBean.setRenderIncludeClaim(true);
			tplRecoveryDataBean.setDisableLinkFlag(true);
			tplRecoveryDataBean.setRenderEditPreviousResponse(true);
			//save flag
			tplRecoveryDataBean.setRecoveryEditClaimDetailsFlag(false);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}
	
	//private String loadRecoveryuserPermission ="";
	
	/**
	 * @return
	 */
	public String closeEditResponse()
	{
		getTPLRecoveryDataBean().setFocusThisId("prevresponsefocus");
		getTPLRecoveryDataBean().setRenderEditPreviousResponse(false);
		return "success";
	}
	
	/**
	 * @return
	 */
	public String editResponseDetails()
	{
		String SUCCESS = "success";
		try {
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("responsefocus");
			FacesContext facesContext = FacesContext.getCurrentInstance();
			String rowValue = (String) facesContext.getExternalContext()
					.getRequestParameterMap().get("rowIndex");
			Integer rowValueInt = new Integer(rowValue);
			TPLRecoveryCaseResponseVO caseResponseVO = (TPLRecoveryCaseResponseVO) tplRecoveryDataBean
					.getTplRecoveryResponseList().get(rowValueInt.intValue());
			tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseResponseVO().setTcn(
														   caseResponseVO.getTcn());

			if (caseResponseVO.getLi() != null)
			{
				tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryCaseResponseVO().setLi(
						new Integer(caseResponseVO.getLi().toString()));
			}
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryCaseResponseVO().setRecoveryDate(caseResponseVO.getRecoveryDate());

			if (caseResponseVO.getRecoveryAmount() != null)
			{
				String amount =   caseResponseVO.getRecoveryAmount();
				tplRecoveryDataBean.setResponseRecoveryAmount(new Double(amount).doubleValue());
				tplRecoveryDataBean.getRecoveryCaseDetailVO()
						.getRecoveryCaseResponseVO().setRecoveryAmount(caseResponseVO.getRecoveryAmount());
			}
			else{
				tplRecoveryDataBean.getRecoveryCaseDetailVO()
							.getRecoveryCaseResponseVO().setRecoveryAmount(null);
			}
			
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryCaseResponseVO().setRecoveryReason(caseResponseVO.getRecoveryReason());

			tplRecoveryDataBean.getRecoveryCaseDetailVO()
					.getRecoveryCaseResponseVO().setFcn(caseResponseVO.getFcn());
			
			tplRecoveryDataBean.getRecoveryCaseDetailVO().
					getRecoveryCaseResponseVO().setClaimLineRecoveryAmount(
							caseResponseVO.getClaimLineRecoveryAmount());
			
			tplRecoveryDataBean.getRecoveryCaseDetailVO()
							.getRecoveryCaseResponseVO().setVersionNo(caseResponseVO.getVersionNo());
			tplRecoveryDataBean.setCurrentRecord(rowValueInt.intValue());
			tplRecoveryDataBean.setRenderEditResponse(true);
			tplRecoveryDataBean.setSaveResponseDetails(true); //ESPRD00853186
			tplRecoveryDataBean.setRenderResultResponse(false);
			tplRecoveryDataBean.setResponseDetailsFlag(false);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return SUCCESS;
	}
	
	/**
	 * @return
	 */
	public String cancelResponseDetails()
	{   
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("responseSortFocus");
		tplRecoveryDataBean.setRenderEditResponse(false);
		tplRecoveryDataBean.setSaveResponseDetails(false); //ESPRD00853186
		return null;
	}
	
	/**
	 * @return
	 */
	public String cancelIncludedClaim()
	{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("includeclaimsfocus");
		tplRecoveryDataBean.setRenderIncludeClaim(false);
		tplRecoveryDataBean.setRenderEditPreviousResponse(false);
		return null;
	}
	
	/**
	 * Method for checking the satisfied claims
	 * @return
	 */
	private boolean checkSatisfiedClaim()
	{
		List includedClaimList = getTPLRecoveryDataBean().getTplRecoveryIncludedclaimsList();
		List responseList = getTPLRecoveryDataBean().getTplRecoveryResponseList();
		if (null != includedClaimList)
		{
			if(logger.isDebugEnabled()){
				logger.debug("checkSatisfiedClaim :: includedClaimList.size() ::  "+includedClaimList.size());
			}
		}
		if (null != responseList)
		{
			if(logger.isDebugEnabled()){
				logger.debug("checkSatisfiedClaim :: responseList.size() ::  "+responseList.size());
			}
		}
		if ((includedClaimList != null 
				&& includedClaimList.size()>0) && (responseList != null 
				&& responseList.size()==0))
		{
			return true;
			/*Iterator iterator = includedClaimList.iterator();
			while(iterator.hasNext())
			{
				TPLRecoveryCaseIncludedClaimsVO includedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO)iterator.next();
				if (null!=includedClaimsVO && null != includedClaimsVO.getTplRecoveredAmountStr() 
						&& includedClaimsVO.getTplRecoveredAmount() != includedClaimsVO.getReqAmount() 
						|| !includedClaimsVO.getTplRecoveredAmountStr().equals(includedClaimsVO.getReqAmountStr()))
				{
					if (!includedClaimsVO.isExcludeIndicator())
					{
						return false;
					}
				}
			}*/
		}
		else
		{
			return false;
		}

	}
	
	/**
	 * Method for checking the satisfied claims
	 * @return
	 */
	/*private boolean checkSatisfiedClaimAmount()
	{
		List includedClaimList = getTPLRecoveryDataBean().getTplRecoveryIncludedclaimsList();
		if (includedClaimList != null 
				&& includedClaimList.size()>0)
		{
			Iterator iterator = includedClaimList.iterator();
			while(iterator.hasNext())
			{
				TPLRecoveryCaseIncludedClaimsVO includedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO)iterator.next();
				if (includedClaimsVO.getReqAmount() == 0 && (includedClaimsVO.getTplRecoveredAmount() !=
								includedClaimsVO.getReqAmount()))
				{
					return false;
				}
			}
		}
		else
		{
			return false;
		}
		return true;
	}*/
	
	/**
	 * @return Returns the description.
	 */
	public String getDescription() {
		return description;
	}
	/**
	 * @param description The description to set.
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
	/**
	 * 
	 */
	public void editInterestedPartyAddress()
	{
		FacesContext facesContext = FacesContext.getCurrentInstance();
		String rowValue = (String) facesContext.getExternalContext()
				.getRequestParameterMap().get("rowIndex");
		Integer rowValueInt = new Integer(rowValue);
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
		TPLRecoveryCaseInterestedPartyVO tplRecoveryCaseInterestedPartyVO = 
			tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO();
		
		TPLRecoveryCaseInterestedPartyAddressVO tplInterestedPartyVO = 
			(TPLRecoveryCaseInterestedPartyAddressVO) tplRecoveryDataBean.getTplRecoveryInterestedPartyAddressList().get(
						rowValueInt.intValue());
		
		tplRecoveryDataBean.setInterestedPartyAddSelect("true");
		tplInterestedPartyVO.setType(tplInterestedPartyVO.getType());
		tplInterestedPartyVO.setAddress1(tplInterestedPartyVO.getAddress1());
		tplInterestedPartyVO.setCity(tplInterestedPartyVO.getCity());
		tplInterestedPartyVO.setState(tplInterestedPartyVO.getState());
		tplInterestedPartyVO.setZip(tplInterestedPartyVO.getZip());
		if (tplInterestedPartyVO.isSel())
		{
			tplRecoveryDataBean.setInterestedPartyAddSelect("00");
		}
		else
		{
			tplRecoveryDataBean.setInterestedPartyAddSelect("11");
		}
		tplRecoveryDataBean.getRecoveryCaseDetailVO().getTplRecoveryInterestedPartyVO().setInterestedPartyAddressVO(tplInterestedPartyVO);
		tplRecoveryDataBean.setRenderEditInterestedPartyAddress(true);
		tplRecoveryDataBean.setRenderResultInterestedPartyAddress(false);
		tplRecoveryDataBean.setRowValueIntPartyAddress(rowValueInt);
	}
	
	/**
	 * @param value
	 */
	public void excludeRecAmount(ValueChangeEvent value){
		
		Boolean exlIndChecked = (Boolean)value.getNewValue();
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		
		if(exlIndChecked.booleanValue()){
			
			recoveryDataBean.setDisableRecAmount(true);
			
		}
		else{
			recoveryDataBean.setDisableRecAmount(false);
			
		}
		
	}
	
	/**
	 * @param value
	 */
	public void excludeRecReason(ValueChangeEvent value){
		
		String exlReasonSelected = (String)value.getNewValue();
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		
		if(StringUtils.isNotEmpty(exlReasonSelected)){
			
			recoveryDataBean.setDisableRecAmount(true);
			
		}
		else{
			recoveryDataBean.setDisableRecAmount(false);
			
		}
		
	}
	
	/**
	 * @return
	 */
	public String updateInterestedPartyAddress() {
		try 
		{
			TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
			tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
			TPLRecoveryCaseInterestedPartyAddressVO tplInterestedPartyVO = 
				(TPLRecoveryCaseInterestedPartyAddressVO) tplRecoveryDataBean.getTplRecoveryInterestedPartyAddressList().get(
						tplRecoveryDataBean.getRowValueIntPartyAddress().intValue());
			if (null != tplRecoveryDataBean.getInterestedPartyAddSelect() &&
					tplRecoveryDataBean.getInterestedPartyAddSelect().equals("00"))
			{
				tplInterestedPartyVO.setSel(true);
			}
			else
			{
				tplInterestedPartyVO.setSel(false);
			}
			tplRecoveryDataBean.getTplRecoveryInterestedPartyAddressList().remove(tplRecoveryDataBean.getRowValueIntPartyAddress().intValue());
			tplRecoveryDataBean.getTplRecoveryInterestedPartyAddressList().add(tplRecoveryDataBean.getRowValueIntPartyAddress().intValue(), tplInterestedPartyVO);
			tplRecoveryDataBean.setRenderResultInterestedPartyAddress(true);
			tplRecoveryDataBean.getIntPartyAddressMap().put(Long.valueOf(tplInterestedPartyVO.getEntitySK()), tplRecoveryDataBean.getTplRecoveryInterestedPartyAddressList());
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
		return "success";

	}
	
	/**
	 * @return
	 */
	public String resetInterestedPartyAddress()
	{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
		tplRecoveryDataBean.setInterestedPartyAddSelect("");
		tplRecoveryDataBean.setRenderResultInterestedPartyAddress(false);
		return "success";
	}
	
	/**
	 * @return
	 */
	public String cancelInterestedPartyAddress()
	{
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		tplRecoveryDataBean.setFocusThisId("intrestedpartyfocus");
		tplRecoveryDataBean.setRenderEditInterestedPartyAddress(false);
		return "success";
	}
	
	private boolean validatClaimeForOverlapping()

    {
         TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
         List claimList = recoveryDataBean.getTplRecoveryClaimFilterList();
         TPLRecoveryCaseMemberClaimFilterVO caseMemberClaimFilterVO = 
                       recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberClaimFilterVO();
         int currentRecord = recoveryDataBean.getCurrentRecord();
         int rowCount  = 0;
         if (claimList != null && claimList.size()>0 && caseMemberClaimFilterVO != null)
         {
             Iterator iterator = claimList.iterator();
             while (iterator.hasNext())
            {
               TPLRecoveryCaseMemberClaimFilterVO caseMemberClaimFilterVOFromList = (TPLRecoveryCaseMemberClaimFilterVO)iterator.next();
               String existingFilterType = caseMemberClaimFilterVOFromList.getFilterType();
               String existingBeginValue = caseMemberClaimFilterVOFromList.getBeginValue();
               String existingEndValue = caseMemberClaimFilterVOFromList.getEndValue();
               String currentFilterType = caseMemberClaimFilterVO.getFilterType();
               String currentBeginValue = caseMemberClaimFilterVO.getBeginValue();
               String currentEndValue = caseMemberClaimFilterVO.getEndValue();
               if(existingFilterType != null 
                    && StringUtils.isNotEmpty(existingFilterType)
                    && existingBeginValue != null 
                    && StringUtils.isAlphanumeric(existingBeginValue)
                    && existingEndValue != null 
                    && StringUtils.isAlphanumeric(existingEndValue)
                    && currentFilterType != null 
                    && StringUtils.isNotEmpty(currentFilterType)
                    &&  currentBeginValue != null 
                    && StringUtils.isAlphanumeric(currentBeginValue)
                    && currentEndValue != null 
                    && StringUtils.isAlphanumeric(currentEndValue))
               {
                  if (existingFilterType.equals(currentFilterType) && !(recoveryDataBean.renderEditClaimFilter==true && currentRecord == rowCount))
                  {
                        List AlphaNumValueList = new ArrayList();
                        AlphaNumValueList.add(existingBeginValue);
                        AlphaNumValueList.add(existingEndValue);
                        AlphaNumValueList.add(currentBeginValue);
                        AlphaNumValueList.add(currentEndValue);
                        Collections.sort(AlphaNumValueList);
                          if(!((AlphaNumValueList.get(0).equals(existingBeginValue)
                              && AlphaNumValueList.get(1).equals(existingEndValue)) 
                              ||(AlphaNumValueList.get(2).equals(existingBeginValue)
                              && AlphaNumValueList.get(3).equals(existingEndValue))))
                          {
                              return true;
                          }
                   }
                }
                rowCount++;
            }
        }
        return false;
  }


	private List gettingListOfMemberClaims(List list, String caseID)
	{
		List listOfMemberClaims = new ArrayList();
		//List listOfIncludedClaims = getTPLRecoveryDataBean().getTplRecoveryIncludedclaimsList();
		TPLRecoveryDelegate recoverydelegate=new TPLRecoveryDelegate();
		List listOfIncludedClaims;
		try
		{
			if (list != null && list.size()>0)
			{
				TPLRecoveryDataBean rcvryDataBean = getTPLRecoveryDataBean();
				listOfIncludedClaims = recoverydelegate.getIncludedClaimList(caseID);
				rcvryDataBean.setTempInclClmsList(listOfIncludedClaims);
				TPLRecoveryCaseMemberClaimSelectionVO tplRecoveryCaseMemberClaimSelectionVO = null;
				TPLRecoveryCaseMemberClaimSelectionVO caseMemberClaimSelectionVO = null;
				int listSize = list.size();
				int k=0;
				for (int j=0; j<listSize; j++)
				{
					caseMemberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO)list.get(j);
					if (listOfMemberClaims.size()==0)
					{
						k=0;
					}
					else
					{
						for (int i = 0; i < listOfMemberClaims.size(); i++) 
						{
							tplRecoveryCaseMemberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO) listOfMemberClaims.get(i);
							if (!caseMemberClaimSelectionVO.getTcn().equals(tplRecoveryCaseMemberClaimSelectionVO.getTcn()))
							{
								k=0;
							}
							else
							{
								k=1;
							}
						}
					}
					if (k==0)
					{
						if (caseMemberClaimSelectionVO.getClaimType()!=null)
						{
							List claimList = rcvryDataBean.getClaimsTypeList();
							Iterator iterator = claimList.iterator();
							while (iterator.hasNext())
							{
								SelectItem selectItem = (SelectItem)iterator.next();
								if (caseMemberClaimSelectionVO.getClaimType().equals(selectItem.getValue()))
								{
									caseMemberClaimSelectionVO.setClaimType(selectItem.getValue()+"-"+selectItem.getDescription());
								}
							}
						}
						if (listOfIncludedClaims!= null && listOfIncludedClaims.size()>0)
						{
							Iterator iterator = listOfIncludedClaims.iterator();
							TPLRecoveryCaseIncludedClaimsVO tplRcvryCaseClaim=null;
							while (iterator.hasNext()) {
								 tplRcvryCaseClaim = (TPLRecoveryCaseIncludedClaimsVO)iterator.next();
								//TPLRecoveryCaseIncludedClaimsVO includedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO) iterator.next();
								if ((tplRcvryCaseClaim.getTcn()).equals(caseMemberClaimSelectionVO.getTcn()))
								{
									caseMemberClaimSelectionVO.setDisableDuplicateClaim(true);
									caseMemberClaimSelectionVO.setSelectClaim(true);
									//ESPRD00793586 -- added to disabled Sel when bill is genarated.
									if ((tplRcvryCaseClaim.getTplRecoveredAmount()>0)
										 || (rcvryDataBean.getTplBillingHistoryList()!=null 
												 && rcvryDataBean.getTplBillingHistoryList().size()>0))
									{
										caseMemberClaimSelectionVO.setDisableClaim(true);
									} 
									//ESPRD00904088
									/*else if (tplRcvryCaseClaim.isExcludeIndicator()) {
										caseMemberClaimSelectionVO.setDisableClaim(true);
									}else {
										caseMemberClaimSelectionVO.setDisableClaim(false);
									}*/
								}
							}
						}
						if (caseMemberClaimSelectionVO.getReimbursementAmount()!=null)
						{
							caseMemberClaimSelectionVO.setReimbursementAmountStr(
									decimalValue(caseMemberClaimSelectionVO.getReimbursementAmount().doubleValue()));
						}
						listOfMemberClaims.add(caseMemberClaimSelectionVO);
					}
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return listOfMemberClaims;
	}
	
	public String resetRelationshipInfoUpdate() {
		try {
			TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
			//FacesContext facesContext = FacesContext.getCurrentInstance(); Find Bug Fix
			int rowValueInt = recoveryDataBean.getCurrentRecord();

			//String rowValue = (String)
			// facesContext.getExternalContext().getRequestParameterMap().get("rowIndex");
			TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO = (TPLRecoveryCaseRelationshipVO) recoveryDataBean.getTplRecoveryRelationshipList().get(rowValueInt);
			TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO1 = new TPLRecoveryCaseRelationshipVO();
			
			recoveryCaseRelationshipVO1.setFirstName(recoveryCaseRelationshipVO.getFirstName());
			recoveryCaseRelationshipVO1.setLastName(recoveryCaseRelationshipVO.getLastName());
			recoveryCaseRelationshipVO1.setMiddleInitial(recoveryCaseRelationshipVO.getMiddleInitial());
			recoveryCaseRelationshipVO1.setRelationship(recoveryCaseRelationshipVO.getRelationship());
			recoveryCaseRelationshipVO1.setDateofBirth(recoveryCaseRelationshipVO.getDateofBirth());
			recoveryCaseRelationshipVO1.setDateofDeath(recoveryCaseRelationshipVO.getDateofDeath());
			recoveryCaseRelationshipVO1.setSsn(recoveryCaseRelationshipVO.getSsn());
			recoveryCaseRelationshipVO1.setGender(recoveryCaseRelationshipVO.getGender());
			recoveryCaseRelationshipVO1.setRecoveryProhibited(recoveryCaseRelationshipVO.isRecoveryProhibited());
			//Added code for the defect ESPRD00904347
			if(recoveryCaseRelationshipVO.getGender()!= null && !(StringUtils.isBlank(recoveryCaseRelationshipVO.getGender()))){
				String gender[] = recoveryCaseRelationshipVO.getGender().split("-");
				recoveryCaseRelationshipVO1.setGender(
						gender[0]);				
			}
			recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryCaseRelationshipVO(recoveryCaseRelationshipVO1);
			recoveryDataBean.setCurrentRecord(rowValueInt);


			/*msqDataBean.setMsqVo(msqVo1);
			msqDataBean.setCurrentRecord(rowValueInt);
			msqDataBean.setAddMSQLineRendered(false);
			msqDataBean.setResultRenderedUpdateMSQ(false);
			msqDataBean.setEditMSQLineRendered(true);*/
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "success";
	}

	private String decimalValue(double d) {
        DecimalFormat decimal = new DecimalFormat("#0.00");
        return decimal.format(d);
	}
	

	
	/**
	 * @return Returns the recoverySearch.
	 */
	public boolean isRecoverySearch() {
		if(logger.isDebugEnabled()){
		logger.debug("TPLRecoveryControllerBean::isHippSearch:: START"); 
		}
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		//added for EDMS
		ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
		Object request = context.getRequest();
		if (request instanceof RenderRequest) {
			
			RenderRequest portletRequest = (RenderRequest) request;
			Object edmsObj = portletRequest.getPortletSession().getAttribute(
					"tplRecoveryEDMSSearchResultsList");
			if (edmsObj != null) {
				
				EnterpriseEDMSSearchResultsVO searchResultsVO = new EnterpriseEDMSSearchResultsVO();
				try {
					BeanUtils.copyProperties(searchResultsVO, edmsObj);
					context.getRequestMap().remove("EDMSSearchResultsList");

				} catch (Exception e) {
					if(logger.isDebugEnabled()){
						logger.debug("here is the some exception while copying EDMS Obj");
						logger.debug(e.getMessage(), e);
					}
				}
				if (searchResultsVO != null) {
					List edmsResults = searchResultsVO.getSearchResultsList();
					if(edmsResults!=null){
						if(logger.isDebugEnabled()){
						logger.debug("here the list edms size is ======>"+edmsResults.size());
						}
					TPLAttachmentControllerBean tplAttachmentControllerBean = getAttachmentControllerBean();
					tplAttachmentControllerBean.getAttachmentList(edmsResults);
					portletRequest.getPortletSession().removeAttribute(
							"tplRecoveryEDMSSearchResultsList");
					// saDataBean.setNewServiceAuthFlag(false);
					}
				}
			}
		}
        //added for EDMS
		FacesContext facesContext = FacesContext.getCurrentInstance();
		if(facesContext.getExternalContext() != null && facesContext.getExternalContext().getSessionMap() != null
				&& !facesContext.getExternalContext().getSessionMap().isEmpty()) {
			TPLRecoverySearchResultVO recoverySearchResultVO = 
		    	(TPLRecoverySearchResultVO)facesContext.getExternalContext().getSessionMap().get("recieveVO1");
			recoveryDataBean.setRecoverySearch(true);
			// Added for the defect ESPRD00700689 ::: Start
			if(recoverySearchResultVO != null)
		    {
				try
				{
					recoveryDataBean.setLettersLoaded(false);
		     		getRecoveryCaseDetails(recoverySearchResultVO);
		     	} 
				catch (Exception e) 
				{
		     		e.printStackTrace();
		     	}
				facesContext.getExternalContext().getSessionMap().remove("recieveVO1");
				return  true;
		    }
			String recoveryControllerBean = 
		    	(String)facesContext.getExternalContext().getSessionMap().get("recieveVO");
	     	if(recoveryControllerBean != null && recoveryControllerBean.equalsIgnoreCase("addRecovery"))
	     	{
	     		try 
				{
	     			TPLRecoveryControllerBean tplRecoveryControllerBean =new TPLRecoveryControllerBean();
	    	    	tplRecoveryControllerBean.showRecoveryDetails();
	     		} 
	     		catch (Exception e) 
				{
	     			e.printStackTrace();
	     		}
	     		facesContext.getExternalContext().getSessionMap().remove("recieveVO");
	     		return  true;
	     	}
		}
     	return  false;
	}
	/**
	 * @param recoverySearch The recoverySearch to set.
	 */
	public void setRecoverySearch(boolean recoverySearch) {}
		 
	public void changeResponseRecoveryReason(ValueChangeEvent changeEvent)
	{
		String recoveryReasonCode = (String)changeEvent.getNewValue();
		if (StringUtils.isNotEmpty(recoveryReasonCode))
		{
			if (recoveryReasonCode.equals(TPLAdministrationConstants.RECOVERY_RESPONSE_REASONCODE_S01))
			{
				getTPLRecoveryDataBean().setDisableResRecFcn(true);
				getTPLRecoveryDataBean().setDisableResRecAmt(true);
			}
			else
			{
				getTPLRecoveryDataBean().setDisableResRecFcn(false);
				getTPLRecoveryDataBean().setDisableResRecAmt(false);
			}
		}
	}
	
	private List gettingListOfRecoveryHistory()
	{
		List listOfRecoveryHistory = new ArrayList();
		List list = getTPLRecoveryDataBean().getTplRecoveryHistoryList();
		//TSU
		if(null != list && list.size()>0){
		Collections.sort(list, new Comparator(){

			public int compare(Object o1, Object o2) {
				TPLRecoveryHistoryVO historyVO1 = (TPLRecoveryHistoryVO)o1;
				TPLRecoveryHistoryVO historyVO2 = (TPLRecoveryHistoryVO)o2;
				return historyVO1.getRecoveryDate().compareTo(historyVO2.getRecoveryDate());
			}
			
		});
		}
		HashMap hashMap = new HashMap(); 
		if (null != list && list.size()>0)
		{
			TPLRecoveryHistoryVO recoveryHistoryVO = null;
			TPLRecoveryHistoryVO historyVO = null;
			int k=0;
			double recoveryAmt = 0;
			boolean flag = false; 
			for (int i=0; i<list.size(); i++)
			{
				
				recoveryHistoryVO = (TPLRecoveryHistoryVO)list.get(i);
				if (recoveryHistoryVO.getFcn()==null)
				{
					recoveryHistoryVO.setFcn("");
				}
				if (listOfRecoveryHistory.size()==0)
				{
					k=0;
				}
				else
				{
					for (int j=0; j<listOfRecoveryHistory.size(); j++)
					{
						historyVO = (TPLRecoveryHistoryVO)listOfRecoveryHistory.get(j);
						if (historyVO.getFcn()==null)
						{
							historyVO.setFcn("");
						}
						if (historyVO.getRecoveryDate().equals(recoveryHistoryVO.getRecoveryDate()) 
								&& historyVO.getFcn().equals(recoveryHistoryVO.getFcn()))
						{
							double amount = 0;
							if (flag)
							{
								String amountStr = (String)hashMap.get(recoveryHistoryVO.getRecoveryDate());
								amount = new Double(amountStr).doubleValue();
							}
							recoveryAmt = amount+recoveryAmt+recoveryHistoryVO.getRecoveryAmount();
							recoveryHistoryVO.setRecoveryAmount(recoveryAmt);
							recoveryHistoryVO.setRecoveryAmountStr(decimalValue(recoveryAmt));
							listOfRecoveryHistory.remove(listOfRecoveryHistory.size()-1);
							listOfRecoveryHistory.add(recoveryHistoryVO);
							k=1;
							flag = false;
						}
						else
						{
							k=0;
						}
					}
				}
				if (k==0)
				{
					recoveryHistoryVO.setRecoveryAmount(recoveryHistoryVO.getRecoveryAmount());
					recoveryHistoryVO.setRecoveryDate(recoveryHistoryVO.getRecoveryDate());
					recoveryHistoryVO.setRecoveryAmountStr(decimalValue(recoveryHistoryVO.getRecoveryAmount()));
					listOfRecoveryHistory.add(recoveryHistoryVO);
					hashMap.put(recoveryHistoryVO.getRecoveryDate(),recoveryHistoryVO.getRecoveryAmountStr());
					flag = true;
					recoveryAmt = 0;
				}
			}
		}
		return listOfRecoveryHistory;
	}
	
	private Object getDataBean(String dataBeanName)
    {
    	FacesContext fc = FacesContext.getCurrentInstance();
        String valueBindingStr = TPLRecoveryCaseConstants.HASHBRACE + dataBeanName + TPLRecoveryCaseConstants.CLOSEBRACE;
        Object dataBeanObj = null;
        dataBeanObj = fc.getApplication().getVariableResolver().resolveVariable(fc,dataBeanName);
        if(dataBeanObj == null)
        {
        	dataBeanObj = fc.getApplication().createValueBinding(valueBindingStr).getValue(fc);
        }
        return dataBeanObj;
    }
	
	
	 /**
     * This method is used to get the Routing Data Bean.
     * 
     * @return RoutingDataBean : RoutingDataBean object.
     */
    public static TPLRoutingDataBean getRoutingDataBean()
    {
        EnterpriseLogger logger = EnterpriseLogFactory
                .getLogger(TPLRoutingDOConvertor.class);

        logger.info("getRoutingDataBean");

        FacesContext fc = FacesContext.getCurrentInstance();
        return ((TPLRoutingDataBean) fc.getApplication().createValueBinding(
                ContactManagementConstants.BINDING_BEGIN_SEPARATOR
                        + TPLRoutingDataBean.BEAN_NAME
                        + ContactManagementConstants.BINDING_END_SEPARATOR)
                .getValue(fc));
    }
    /**
     * This method is used to perform the IPC operation from CarrierDtails
     * Portlet to Financial Entity Portlet
     * 
     * @return String
     */
    public String goToFinancialDetailsPortlet()
    {
        final FacesContext facesContext = FacesContext.getCurrentInstance();
        final Map map = facesContext.getExternalContext()
                .getRequestParameterMap();
        final Map requestScope = (Map) facesContext.getApplication()
                .createValueBinding("#{requestScope}").getValue(facesContext);
        ActionRequest request = (ActionRequest) 
		FacesContext.getCurrentInstance().getExternalContext().getRequest();
        if (map != null && !map.isEmpty())
        {
            String payeeID = map.get("payeeID").toString();
            requestScope.remove("PayeeIDParam");
            if (StringUtils.isNotBlank(payeeID)
                    && !"NULL".equalsIgnoreCase(payeeID))
            {
                //requestScope.put("PayeeIDParam", payeeID);
            	request.setAttribute("PayeeIDParam", payeeID);
            }
        }
        /*System.out.println("Payee ID from Request Scope ---> "
                + requestScope.get("PayeeIDParam"));*/
        return "";
    }
    
    /**
     * To get Claim Inquiry Details
     * 
     * @return BLANK.
     */
    public void searchClaimInquiryByTCN()
    {    	
        EnterpriseSearchResultsVO objEnterpriseSearchResultsVO = null;        
        ClaimCorrectionDelegate objClaimCorrectionDelegate = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        ExternalContext extContext = fc.getExternalContext();        
        Map map = fc.getExternalContext().getRequestParameterMap(); 
        String tcn = (String) map.get("tcn");
        if (StringUtils.isNotBlank(tcn))
        {  
        	objClaimCorrectionDelegate = new ClaimCorrectionDelegate();
            objEnterpriseSearchResultsVO = new EnterpriseSearchResultsVO();
            
            try
            {
            	objEnterpriseSearchResultsVO = objClaimCorrectionDelegate
                        .searchClaimInquiryByTCN(tcn);
            }
            catch (ClaimCorrectionSearchGetException ccs)
            {                
                ccs.printStackTrace();
            }
            navigateToDetails(objEnterpriseSearchResultsVO, extContext);
            
        }
    }
    
    
    private void navigateToDetails(
            EnterpriseSearchResultsVO objEnterpriseSearchResultsVO,
            ExternalContext extContext)
    {
        String INVOKE_DETAILS = "invokeDetails";
        String OBJ_INVOKE_DETAILS = "objInvokeDetails";
        ActionRequest request = (ActionRequest) 
		FacesContext.getCurrentInstance().getExternalContext().getRequest();
        if ((objEnterpriseSearchResultsVO == null)
                || (objEnterpriseSearchResultsVO.getRecordCount() == 0))
        {         
            String valueToSendThruIPC = TPLRecoveryCaseConstants.STR_BLANK
								            + TPLRecoveryCaseConstants.STR_BLANK
								            + TPLRecoveryCaseConstants.STR_BLANK;
            extContext.getRequestMap().put(INVOKE_DETAILS,valueToSendThruIPC);
        }
        else if (objEnterpriseSearchResultsVO.getRecordCount() == 1)
        {
            ClaimInquirySearchResultsVO claimInquirySearchResultsVO = (ClaimInquirySearchResultsVO) objEnterpriseSearchResultsVO
                    .getSearchResults().get(0);
            request.setAttribute(OBJ_INVOKE_DETAILS,
                    claimInquirySearchResultsVO);
            	/*   extContext.getRequestMap().put(OBJ_INVOKE_DETAILS,
                    claimInquirySearchResultsVO);   */
        }        
    }	 
	/**
	 * @return Returns the loadRecoveryuserPermission.
	 */
	/*public String getLoadRecoveryuserPermission() 
	{		
		link2Show();
		return loadRecoveryuserPermission;
	}
	*//**
	 * @param loadRecoveryuserPermission The loadRecoveryuserPermission to set.
	 *//*
	public void setLoadRecoveryuserPermission(String loadRecoveryuserPermission) {
		this.loadRecoveryuserPermission = loadRecoveryuserPermission;
	}*/
	
	 /**
     * author:: Venkat J
     * @return
     */
    public String doAuditKeyListOperation()
    {
    	getTPLRecoveryDataBean().setAuditLogFlag(true);
    	getRoutingDataBean().setAuditLogFlag(true);
    	TPLRecoveryDataBean  tplRecoveryDataBean = getTPLRecoveryDataBean();	
    	List routingList = getRoutingDataBean().getListOfTPLRoutingVOs();
    	try{
    		//    Main Case Details
    		List editableRecoveryDetails = new ArrayList();
    		editableRecoveryDetails.add(createAuditableFeild("Line of Business","lobCode"));
    		editableRecoveryDetails.add(createAuditableFeild("Recovery Type","recoveryTypeCode", true));
    		editableRecoveryDetails.add(createAuditableFeild("Case Status","caseStateCode", true));
    		editableRecoveryDetails.add(createAuditableFeild("Worker ID","responsibleUserID", true));
    		editableRecoveryDetails.add(createAuditableFeild("Case Claim Start Date","claimStartDate", true));
    		editableRecoveryDetails.add(createAuditableFeild("Case Claim Stop Date","claimStopDate", true));
    		editableRecoveryDetails.add(createAuditableFeild("Working Status","workingStatusCode", true));
    		editableRecoveryDetails.add(createAuditableFeild("Case Close Date","caseClosureDate", true));
    		editableRecoveryDetails.add(createAuditableFeild("Closure Reason","caseClosureReasonCode", true));
    		editableRecoveryDetails.add(createAuditableFeild("Special Needs Trust","specialNeedTrustIndicator", true));
    		editableRecoveryDetails.add(createAuditableFeild("Special Needs Trust Established Date","specialNeedTrustDate", true));
    		editableRecoveryDetails.add(createAuditableFeild("Case/Incident Type","caseTypeCode", true));
    		editableRecoveryDetails.add(createAuditableFeild("Incident Date","incidentDate", true));
    		editableRecoveryDetails.add(createAuditableFeild("Service Auth ID","authorizationId", true));
    		editableRecoveryDetails.add(createAuditableFeild("Information Source","eligibilitySourceCode", true));
    		editableRecoveryDetails.add(createAuditableFeild("Legal Status","legalStatuscode"));
    		editableRecoveryDetails.add(createAuditableFeild("Reference Number","referenceNumber", true));
    		editableRecoveryDetails.add(createAuditableFeild("Hearing Request","hearingRequestDate", true));
    		editableRecoveryDetails.add(createAuditableFeild("Hearing Held","hearingHoldDate", true));
    		editableRecoveryDetails.add(createAuditableFeild("Appointment Date","estateAppointmentDate"));
    		editableRecoveryDetails.add(createAuditableFeild("Previous Recovered Amount","previousRecoveredAmount", true));
    		editableRecoveryDetails.add(createAuditableFeild("Prior Claims Amount","previousClaimedAmount", true));
    		editableRecoveryDetails.add(createAuditableFeild("Hardship Indicator","estateHardshipInd"));
    		TPLRecoveryCaseDetailVO recoveryCaseDetailVO=tplRecoveryDataBean.getRecoveryCaseDetailVO();
    		if(recoveryCaseDetailVO.getAuditKeyList()!=null && !(recoveryCaseDetailVO.getAuditKeyList().isEmpty())){
    			AuditDataFilter.filterAuditKeys(editableRecoveryDetails,recoveryCaseDetailVO);
    		}

    		// Lien
    		List editableLienInfo = new ArrayList();
    		editableLienInfo.add(createAuditableFeild("Lien Type","estateLienTypeCode"));
    		editableLienInfo.add(createAuditableFeild("Lien County","estateLienCountyDesc", true));
    		editableLienInfo.add(createAuditableFeild("Lien Date Placed","estateLienPlacedDate", true));
    		editableLienInfo.add(createAuditableFeild("Book ","estateLienPlacedBookText", true));
    		editableLienInfo.add(createAuditableFeild("Page ","estateLienPlacedPageText", true));
    		editableLienInfo.add(createAuditableFeild("Lien Date Release ","estateLienReleaseDate", true));
    		editableLienInfo.add(createAuditableFeild("Book ","estateLienReleaseBookText", true));
    		editableLienInfo.add(createAuditableFeild("Page","estateLienReleasePageText", true));

    		TPLRecoveryCaseLienInfoVO tplLienInfoVO=(TPLRecoveryCaseLienInfoVO)tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseLienInfoVO();
    		if(tplLienInfoVO!=null && tplLienInfoVO.getAuditKeyList()!=null &&
    				!tplLienInfoVO.getAuditKeyList().isEmpty()){
    			AuditDataFilter.filterAuditKeys(editableLienInfo,tplLienInfoVO);
    			UIComponent component = TPLAdministrationHelper.findComponentInRoot("LienInfoAuditId");
    			if(component!=null){
    				AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    				auditHistoryTable.setValue(tplLienInfoVO.getAuditKeyList());			
    				auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    			}
    		}

    		// For Letters
    		//ESPRD00795036 - Commented and moved to LetterAndResponseControllerBean
    		/*LettersAndResponsesDataBean lettersAndResponsesDataBean=getLettersDataBeanFromContext();
    		 List lettersList= lettersAndResponsesDataBean.getLetterGenerationRequests();
    		 if(lettersList!=null && lettersList.size()>0){
    		 	Iterator auditKeyIt = lettersList.iterator();
	    		 	List editableLetters = new ArrayList();
	    		 	//editableLetters.add(createAuditableFeild("Notify via Alert","notifyAlertUser"));
	    		 	editableLetters.add(createAuditableFeild("Alert Based On","alertBasedOnTableName"));
	    		 	editableLetters.add(createAuditableFeild("Send Alert # of Days","sendAlertDaysCode"));
	    		 	editableLetters.add(createAuditableFeild("Explanation","explanationText"));
	    		 	while(auditKeyIt.hasNext()){
	    		 		LetterGenerationInputVO  letterGenerationInputVO = (LetterGenerationInputVO)auditKeyIt.next();
	    		 		if(letterGenerationInputVO.getAuditKeyList()!=null && !(letterGenerationInputVO.getAuditKeyList().isEmpty())){
	    		 			AuditDataFilter.filterAuditKeys(editableLetters,letterGenerationInputVO);

	    		 			UIComponent component = TPLAdministrationHelper.findComponentInRoot("LettersInfoAuditId");
	    		 			if(component!=null){
	    		 				AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
	    		 				auditHistoryTable.setValue(letterGenerationInputVO.getAuditKeyList());			
	    		 				auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
	    		 			}
	    		 		}
	    		 		String letersindex = lettersAndResponsesDataBean.getSelectedIndex();
	    		 		if(letersindex!=null && letersindex.trim().length()>0){
	    		 			lettersAndResponsesDataBean.setLetterGenerationInputVO((LetterGenerationInputVO)lettersList.get(Integer.parseInt(letersindex)));
	    		 	}
    		 	}
    		 }*/

    		// For Attachements
    		//Commented and added in TPLAttachmentControllerBean.viewAttachment()
    		/* TPLAttachmentDataBean attachmentDataBean = getTPLAttachmentDataBean();
    		 List attachmentList= attachmentDataBean.getAttachmentList();
    		 if(attachmentList!=null && attachmentList.size()>0){
    		 	Iterator auditKeyIt = attachmentList.iterator();
	    		 	List editableAttachment = new ArrayList();
	    		 	editableAttachment.add(createAuditableFeild("Description","attachmentDescription"));
	    		 	editableAttachment.add(createAuditableFeild("DateAdded","attachmentCreatedDate"));
	    		 	editableAttachment.add(createAuditableFeild("AddedBy","attachmentAddedByName"));
	    		 	editableAttachment.add(createAuditableFeild("FileName","attachmentFilename"));
	    		 	while(auditKeyIt.hasNext()){
	    		 		AttachmentsVO  attachmentVO = (AttachmentsVO)auditKeyIt.next();
	    		 		if(attachmentVO.getAuditKeyList()!=null && !(attachmentVO.getAuditKeyList().isEmpty())){
	    		 			AuditDataFilter.filterAuditKeys(editableAttachment,attachmentVO);
	    		 			System.out.println("--inside audit list is not empty---");
	    		 			UIComponent component = TPLAdministrationHelper.findComponentInRoot("AttachementsAuditId");
	    		 			if(component!=null){
	    		 				AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
	    		 				auditHistoryTable.setValue(attachmentVO.getAuditKeyList());			
	    		 				auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
	    		 				System.out.println("RecoveryAudit:"+attachmentVO.getAuditKeyList().size());
	    		 			}
	    		 		}else{
	    		 			if(logger.isDebugEnabled()){
	    		 				System.out.println("======attachmentVO====Before Filter Empty===");
	    		 			}
	    		 		}
	    		 		String attachmentindex = attachmentDataBean.getSelectedIndex();
	    		 		if(attachmentindex!=null && attachmentindex.trim().length()>0){
	    		 			attachmentDataBean.setAttachmentsVO((AttachmentsVO)attachmentList.get(Integer.parseInt(attachmentindex)));
	    		 	}
    		 	}
    		 }*/

    		// For Alerts
    		TPLAlertDataBean alertDataBean=TPLAlertDOConvertor.getTPLAlertDataBean();
    		List alertList= alertDataBean.getListOfAlertVOs();
    		if(alertList!=null && alertList.size()>0){
    			Iterator auditKeyIt = alertList.iterator();
    			List editableAlert = new ArrayList();
    			editableAlert.add(createAuditableFeild("Status","alertStatusCode"));
    			while(auditKeyIt.hasNext()){
    				TPLAlertVO  tplAlerttVO = (TPLAlertVO)auditKeyIt.next();
    				if(tplAlerttVO.getAuditKeyList()!=null && !(tplAlerttVO.getAuditKeyList().isEmpty())){
    					AuditDataFilter.filterAuditKeys(editableAlert,tplAlerttVO);
    					UIComponent component = TPLAdministrationHelper.findComponentInRoot("AlertsAuditId");
    					if(component!=null){
    						AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    						auditHistoryTable.setValue(tplAlerttVO.getAuditKeyList());			
    						auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    					}
    				}else{
    					if(logger.isDebugEnabled()){
    						logger.debug("======tplAlerttVO====Before Filter Empty===");
    					}
    				}
    				String alertindex = alertDataBean.getSelectedIndex();
    				if(alertindex!=null && alertindex.trim().length()>0){
    					alertDataBean.setAlertVO((TPLAlertVO)alertList.get(Integer.parseInt(alertindex)));
    				}
    			}
    		}
    		// For ClaimFilter
    		TPLRecoveryDataBean recoveryDataBean=getTPLRecoveryDataBean();
    		List claimFilterList = recoveryDataBean.getTplRecoveryClaimFilterList();
    		if(claimFilterList!=null && claimFilterList.size()>0){
    			Iterator auditKeyIt = claimFilterList.iterator();
    			List editableFilter = new ArrayList();
    			editableFilter.add(createAuditableFeild("Filter Type","filterTypeCode"));
    			editableFilter.add(createAuditableFeild("Begin Value","beginData", true));
    			editableFilter.add(createAuditableFeild("End Value","endData", true));
    			while(auditKeyIt.hasNext()){
    				TPLRecoveryCaseMemberClaimFilterVO recoveryCaseMemberClaimFilterVO=(TPLRecoveryCaseMemberClaimFilterVO)auditKeyIt.next();
    				if(recoveryCaseMemberClaimFilterVO.getAuditKeyList()!=null && !(recoveryCaseMemberClaimFilterVO.getAuditKeyList().isEmpty())){
    					AuditDataFilter.filterAuditKeys(editableFilter,recoveryCaseMemberClaimFilterVO);
    					UIComponent component = TPLAdministrationHelper.findComponentInRoot("ClaimFilterAuditId");
    					if(component!=null){
    						AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    						auditHistoryTable.setValue(recoveryCaseMemberClaimFilterVO.getAuditKeyList());			
    						auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    					}
    				}else{
    					if(logger.isDebugEnabled()){
    						logger.debug("======recoveryCaseMemberClaimFilterVO====Before Filter Empty===");
    					}
    				}
    				String claimFilterindex = recoveryDataBean.getSelectedClaimFilterIndex();
    				if(claimFilterindex!=null && claimFilterindex.trim().length()>0){
    					recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryCaseMemberClaimFilterVO((TPLRecoveryCaseMemberClaimFilterVO)claimFilterList.get(Integer.parseInt(claimFilterindex)));
    				}
    			}
    		}


    		// For Settlement
    		List settlementList = recoveryDataBean.getTplRecoverySettlementList();
    		if(settlementList!=null && settlementList.size()>0){
    			Iterator auditKeyIt = settlementList.iterator();
    			List editableSettlement = new ArrayList();
    			editableSettlement.add(createAuditableFeild("Settlement Date","settlementDate"));
    			editableSettlement.add(createAuditableFeild("Settlement Reason","settlementReasonCode", true));
    			editableSettlement.add(createAuditableFeild("Total Settlement Amount","totalSettlementAmount", true));
    			editableSettlement.add(createAuditableFeild("State Settlement Amount","stateSettlementAmount", true));
    			editableSettlement.add(createAuditableFeild("Interested Party Fee","attorneyFeeAmount", true));
    			editableSettlement.add(createAuditableFeild("Lien Amount","lienAmount", true));
    			editableSettlement.add(createAuditableFeild("FCN","financialControlNumber", true));
    			editableSettlement.add(createAuditableFeild("Net to Member","netToMemberAmount", true));

    			while(auditKeyIt.hasNext()){
    				TPLRecoveryCaseSettlementVO caseSettlementVO=(TPLRecoveryCaseSettlementVO)auditKeyIt.next();
    				if(caseSettlementVO.getAuditKeyList()!=null && !(caseSettlementVO.getAuditKeyList().isEmpty())){
    					AuditDataFilter.filterAuditKeys(editableSettlement,caseSettlementVO);
    					UIComponent component = TPLAdministrationHelper.findComponentInRoot("SettlementAuditId");
    					if(component!=null){
    						AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    						auditHistoryTable.setValue(caseSettlementVO.getAuditKeyList());			
    						auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    					}
    				}else{
    					if(logger.isDebugEnabled()){
    						logger.debug("======caseSettlementVO====Before Filter Empty===");
    					}
    				}
    				String settlementIndex = recoveryDataBean.getSelectedSettlementIndex();
    				if(settlementIndex!=null && settlementIndex.trim().length()>0){
    					recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoverySettlementVO((TPLRecoveryCaseSettlementVO)settlementList.get(Integer.parseInt(settlementIndex)));
    				}
    			}

    		}

    		// For Relationship
    		List relationshipList = recoveryDataBean.getTplRecoveryRelationshipList();
    		if(relationshipList!=null && relationshipList.size()>0){
    			Iterator auditKeyIt = relationshipList.iterator();
    			List editableRelationship = new ArrayList();
    			editableRelationship.add(createAuditableFeild("First Name","firstName"));
    			editableRelationship.add(createAuditableFeild("Last Name","lastName", true));
    			editableRelationship.add(createAuditableFeild("Middle Initial","middleName", true));
    			editableRelationship.add(createAuditableFeild("Gender","genderCode", true));
    			editableRelationship.add(createAuditableFeild("Date of Birth","dateOfBirth", true));
    			editableRelationship.add(createAuditableFeild("Date of Death","dateOfDeath", true));
    			editableRelationship.add(createAuditableFeild("SSN","ssnNumber", true));
    			editableRelationship.add(createAuditableFeild("Relationship","relCode"));
    			editableRelationship.add(createAuditableFeild("Recovery Prohibited","recoveryProhibitedIndicator", true));

    			while(auditKeyIt.hasNext()){
    				TPLRecoveryCaseRelationshipVO recoveryCaseRelationshipVO=(TPLRecoveryCaseRelationshipVO)auditKeyIt.next();
    				if(recoveryCaseRelationshipVO.getAuditKeyList()!=null && !(recoveryCaseRelationshipVO.getAuditKeyList().isEmpty())){
    					AuditDataFilter.filterAuditKeys(editableRelationship,recoveryCaseRelationshipVO);
    					UIComponent component = TPLAdministrationHelper.findComponentInRoot("RelationshipAuditId");
    					if(component!=null){
    						AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    						auditHistoryTable.setValue(recoveryCaseRelationshipVO.getAuditKeyList());			
    						auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    					}
    				}else{
    					if(logger.isDebugEnabled()){
    						logger.debug("======recoveryCaseRelationshipVO====Before Filter Empty===");
    					}
    				}
    				String relationshipIndex = recoveryDataBean.getSelectedSettlementIndex();
    				if(relationshipIndex!=null && relationshipIndex.trim().length()>0){
    					recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryCaseRelationshipVO((TPLRecoveryCaseRelationshipVO)relationshipList.get(Integer.parseInt(relationshipIndex)));
    				}
    			}

    		}
    		// For Assets & Liabilities
    		List assetsList = recoveryDataBean.getTplRecoveryAssetsLiabilitiesList();
    		if(assetsList!=null && assetsList.size()>0){

    			Iterator auditKeyIt = assetsList.iterator();
    			List editableAssets = new ArrayList();
    			editableAssets.add(createAuditableFeild("Type","estateTypeCode"));
    			editableAssets.add(createAuditableFeild("Sub-Code","estateAmountSubCode", true));
    			editableAssets.add(createAuditableFeild("Code","estateCode", true));
    			editableAssets.add(createAuditableFeild("Amount","estateTotalAssetAmount", true));
    			editableAssets.add(createAuditableFeild("SOLD","estateSoldInd", true));
    			editableAssets.add(createAuditableFeild("Description","estateAssetLiabilityDescription", true));
    			while(auditKeyIt.hasNext())
    			{
    				TPLRecoveryCaseAssetsAndLiabilitiesVO assetsAndLiabilitiesVO = 
    					(TPLRecoveryCaseAssetsAndLiabilitiesVO)auditKeyIt.next();
    				if(assetsAndLiabilitiesVO.getAuditKeyList()!=null && 
    						!(assetsAndLiabilitiesVO.getAuditKeyList().isEmpty()))
    				{
    					AuditDataFilter.filterAuditKeys(editableAssets,assetsAndLiabilitiesVO);  

    					UIComponent component = TPLAdministrationHelper.findComponentInRoot("AssetsAuditId");
    					if(component!=null){
    						AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    						auditHistoryTable.setValue(assetsAndLiabilitiesVO.getAuditKeyList());			
    						auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    					}
    				} else {
    					if(logger.isDebugEnabled()){
    						logger.debug("======recoveryCaseRelationshipVO====Before Filter Empty===");
    					}
    				}
    				String assetsIndex = recoveryDataBean.getSelectedAssetsAndLiabilitiesIndex();
    				if(assetsIndex!=null && assetsIndex.trim().length()>0)
    				{
    					recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryCaseAssetsAndLiabilitiesVO((TPLRecoveryCaseAssetsAndLiabilitiesVO)assetsList.get(Integer.parseInt(assetsIndex)));
    				}
    			}
    		}
    		// For Included Claims
    		/* List includedClaimsList = recoveryDataBean.getTplRecoveryIncludedclaimsList();
    		 if(includedClaimsList!=null && includedClaimsList.size()>0){
    		 	Iterator auditKeyIt = includedClaimsList.iterator();
    		 	List editableIncludedClaims = new ArrayList();
    		 	editableIncludedClaims.add(createAuditableFeild("Req Amount","claimRequestAmount"));
    		 	editableIncludedClaims.add(createAuditableFeild("Exclude Reason","claimExlusiveReasonCode"));
    		 	//for defect : ESPRD00794535 
    		 	editableIncludedClaims.add(createAuditableFeild("Exclude Ind","claimInclusiveOrExclusiveCode")); 

    		 	while(auditKeyIt.hasNext()){
    		 		TPLRecoveryCaseIncludedClaimsVO recoveryCaseIncludedClaimsVO=(TPLRecoveryCaseIncludedClaimsVO)auditKeyIt.next();
    		 		if(recoveryCaseIncludedClaimsVO.getAuditKeyList()!=null && !(recoveryCaseIncludedClaimsVO.getAuditKeyList().isEmpty())){
    		 			AuditDataFilter.filterAuditKeys(editableIncludedClaims,recoveryCaseIncludedClaimsVO);

    		 			UIComponent component = TPLAdministrationHelper.findComponentInRoot("IncludedClaimsAuditId");
    		 			if(component!=null){
    		 				AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    		 				auditHistoryTable.setValue(recoveryCaseIncludedClaimsVO.getAuditKeyList());			
    		 				auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    		 			}
    		 		}else{
    		 			if(logger.isDebugEnabled()){
    		 			logger.debug("======recoveryCaseRelationshipVO====Before Filter Empty===");
    		 			}
    		 		}
    				String includedClaimsIndex = recoveryDataBean.getSelectedIncludedClaimsIndex();
    				if(includedClaimsIndex!=null && includedClaimsIndex.trim().length()>0){
    		 			recoveryDataBean.getRecoveryCaseDetailVO().setTplRecoveryCaseAssetsAndLiabilitiesVO((TPLRecoveryCaseAssetsAndLiabilitiesVO)includedClaimsList.get(Integer.parseInt(includedClaimsIndex)));
    		 		}
    		 	}
    		 }*/
    		// For billing
    		//Comment and moved to editBillingInfo()
    		/*List billingList = recoveryDataBean.getTplRecoveryAddBillingInfoList();
    		if(billingList!=null && billingList.size()>0){
    			Iterator auditKeyIt = billingList.iterator();
    			List editableBillingInfo = new ArrayList();
    			editableBillingInfo.add(createAuditableFeild("Billing Frequency","billingFrequencyCode"));
    			editableBillingInfo.add(createAuditableFeild("Letter Type","billingLetterTypeCode", true));
    			editableBillingInfo.add(createAuditableFeild("Billing Start Date","billingStartDate", true));
    			while(auditKeyIt.hasNext()){
    				TPLRecoveryCaseBillingInformationVO billingInformationVO=(TPLRecoveryCaseBillingInformationVO)auditKeyIt.next();
    				if(billingInformationVO.getAuditKeyList()!=null && !(billingInformationVO.getAuditKeyList().isEmpty())){
    					AuditDataFilter.filterAuditKeys(editableBillingInfo,billingInformationVO);
    					UIComponent component = TPLAdministrationHelper.findComponentInRoot("BillingInfoAuditId");
    					if(component!=null){
    						AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    						auditHistoryTable.setValue(billingInformationVO.getAuditKeyList());			
    						auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    					}
    				}else{
    					if(logger.isDebugEnabled()){
    						logger.debug("======billingInformationVO====Before Filter Empty===");
    					}
    				}
    				String billingInfoIndex = recoveryDataBean.getSelectedBillingInfoIndex();
    				if(billingInfoIndex!=null && billingInfoIndex.trim().length()>0){
    					recoveryDataBean.getRecoveryCaseDetailVO().setRecoveryBillingVO((TPLRecoveryCaseBillingInformationVO)billingList.get(Integer.parseInt(billingInfoIndex)));
    				}
    			}
    		}*/

    		// Employer
    		TPLPolicyDataBean policyDataBean = getTplPolicyDataBean();
    		EmployerVO employerVO = policyDataBean.getPolicyVO().getEmployerVO();
    		List editablePolicyEmpolyer = new ArrayList();
    		editablePolicyEmpolyer.add(createAuditableFeild("Employer Name","employerName"));
    		if(employerVO.getAuditKeyList()!=null && !(employerVO.getAuditKeyList().isEmpty()))
    		{
    			AuditDataFilter.filterAuditKeys(editablePolicyEmpolyer,employerVO);
    			recoveryDataBean.getRecoveryCaseDetailVO().getAuditKeyList().addAll(employerVO.getAuditKeyList());
    		} else {
    			if(logger.isDebugEnabled()){
    				logger.debug("======employerVO====Before Filter Empty===");
    			}
    		}
    		// Employer Address	        
    		List editablePolicyEmpAddress = new ArrayList();
    		editablePolicyEmpAddress.add(createAuditableFeild("Address Type","addressUsageTypeCode"));
    		editablePolicyEmpAddress.add(createAuditableFeild("Address1","addressLine1"));
    		editablePolicyEmpAddress.add(createAuditableFeild("Address2","addressLine2", true));
    		editablePolicyEmpAddress.add(createAuditableFeild("City","cityName", true));
    		editablePolicyEmpAddress.add(createAuditableFeild("County","countyCode", true));
    		editablePolicyEmpAddress.add(createAuditableFeild("State","stateCode", true));
    		editablePolicyEmpAddress.add(createAuditableFeild("Zip5","zipCode5", true));
    		editablePolicyEmpAddress.add(createAuditableFeild("Zip4","zipCode4", true));
    		AddressVO addressVO = policyDataBean.getPolicyVO()
    								.getEmployerVO().getEmployerCommonEntityVO().getAddressVO();
    		if(addressVO.getAuditKeyList()!=null && !(addressVO.getAuditKeyList().isEmpty()))
    		{
    			AuditDataFilter.filterAuditKeys(editablePolicyEmpAddress,addressVO);
    			employerVO.getAuditKeyList().addAll(addressVO.getAuditKeyList());
    			recoveryDataBean.getRecoveryCaseDetailVO().getAuditKeyList().addAll(addressVO.getAuditKeyList());
    		} else {
    			if(logger.isDebugEnabled()){
    				logger.debug("======addressVO====Before Filter Empty===");
    			}
    		}

    		// Employer Phone
    		List editablePolicyEmpPhone = new ArrayList();
    		editablePolicyEmpPhone.add(createAuditableFeild("Phone / Ext","phoneNumber"));
    		editablePolicyEmpPhone.add(createAuditableFeild("Phone / Ext","phoneExtension"));	
    		editablePolicyEmpPhone.add(createAuditableFeild("Fax","phoneUsageTypeCode"));
    		PhoneVO phoneVO = policyDataBean.getPolicyVO()
    								.getEmployerVO().getEmployerCommonEntityVO().getPhoneVO();
    		if (phoneVO.getAuditKeyList() != null && !(phoneVO.getAuditKeyList().isEmpty())) 
    		{
    			AuditDataFilter.filterAuditKeys(editablePolicyEmpPhone,phoneVO);
    			employerVO.getAuditKeyList().addAll(phoneVO.getAuditKeyList());
    			recoveryDataBean.getRecoveryCaseDetailVO().getAuditKeyList().addAll(phoneVO.getAuditKeyList());
    		} else {
    			if(logger.isDebugEnabled()){
    				logger.debug("======phoneVO====Before Filter Empty===");
    			}
    		}

    		// Employer Email
    		List editablePolicyEmpEmail = new ArrayList();
    		editablePolicyEmpEmail.add(createAuditableFeild("Email","eaddressText"));  	        	      
    		EAddressVO eAddressVO = policyDataBean.getPolicyVO()
    									.getEmployerVO().getEmployerCommonEntityVO().getEaddressVO();
    		if (eAddressVO.getAuditKeyList() != null && !(eAddressVO.getAuditKeyList().isEmpty())) 
    		{
    			AuditDataFilter.filterAuditKeys(editablePolicyEmpEmail,eAddressVO);
    			employerVO.getAuditKeyList().addAll(eAddressVO.getAuditKeyList());
    			recoveryDataBean.getRecoveryCaseDetailVO().getAuditKeyList().addAll(eAddressVO.getAuditKeyList());
    		} else {
    			if(logger.isDebugEnabled()){
    				logger.debug("======eAddressVO====Before Filter Empty===");
    			}
    		}
    		UIComponent component = TPLAdministrationHelper.findComponentInRoot("RecoveryCaseDetailsAuditId");
    		if(component!=null){
    			AuditHistoryTable auditHistoryTable = (AuditHistoryTable)component;				
    			auditHistoryTable.setValue(recoveryDataBean.getRecoveryCaseDetailVO().getAuditKeyList());			
    			auditHistoryTable.getAuditLogControllerBean().setPlusMinusFlag(false); 
    		}

    	}catch(Exception e){
    		e.printStackTrace();
    	}
    	return "Success";
    }
    
    /**
     * author:: Venkat J
     * @param feildName
     * @param domainAttributeName
     * @return
     */
    private AuditableField createAuditableFeild(String feildName,String domainAttributeName)
    {
		AuditableField auditableField = new AuditableField();
		auditableField.setFieldName(feildName);
		auditableField.setDomainAttributeName(domainAttributeName);
		return auditableField;

	}
    
    private AuditableField createAuditableFeild(String feildName,String domainAttributeName, boolean isDuplicatePrimaryKey)
	{
		AuditableField auditableField = new AuditableField();
		auditableField.setFieldName(feildName);
		auditableField.setDomainAttributeName(domainAttributeName);
		auditableField.setDuplicatePrimaryKey(isDuplicatePrimaryKey);
		return auditableField;
	}
    
    /**
     * This operation is used to find the component in root by passing id.
     * 
     * @param id :
     *            String object.
     * @return UIComponent : UIComponent object.
     */
    public UIComponent findComponentInRoot(String id)
    {
        UIComponent component = null;
        FacesContext context = FacesContext.getCurrentInstance();

        if (context != null)
        {
            UIComponent root = context.getViewRoot();
            component = findComponent(root, id);
        }
        return component;
    }
    
    /**
     * This operation is used to find the component by passing id.
     * 
     * @param base :
     *            View root component of the jsp.
     * @param id :
     *            Id of the component from jsp.
     * @return UIComponent object.
     */
    public UIComponent findComponent(UIComponent base, String id)
    {
        // Is the "base" component itself the match we are looking for?
        if (id.equals(base.getId()))
        {
            return base;
        }

        // Search through our facets and children
        UIComponent component = null;
        UIComponent result = null;
        Iterator cmpIterator = base.getFacetsAndChildren();

        while (cmpIterator.hasNext() && (result == null))
        {
            component = (UIComponent) cmpIterator.next();
            if (id.equals(component.getId()))
            {
                result = component;
                break;
            }
            result = findComponent(component, id);
            if (result != null)
            {
                break;
            }
        }
        return result;
    }
    // method for ESPRD00472887 start
    public void cancelRecoveryCaseDetails() throws IOException
    {
    	TPLRecoveryDataBean  tplRecoveryDataBean = getTPLRecoveryDataBean();	    	
    	tplRecoveryDataBean.setClosedexcludeind(false);
        Object obj= FacesContext.getCurrentInstance().getExternalContext().getRequest(); 
        ActionRequest request = (ActionRequest)obj;
        String urlForCancel = request.getParameter("com.ibm.faces.portlet.page.view");
        Map sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();			
	    sessionMap.remove("com.ibm.faces.FACES_MESSAGES");       
        if(!(urlForCancel != null))
	     {		    	 
	    	 urlForCancel="/wps/myportal/FinancialRecoveryCase"; 
	     }
       // addNewRecoveryPage();
        clearcache();
        Object object = FacesContext.getCurrentInstance().getExternalContext().getResponse(); 
        ActionResponse response = (ActionResponse)object;
        ActionRequest actionRequest=(ActionRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
        String redirectCosumerContext=actionRequest.getParameter("redirectPortalPageContext");
        logger.debug("redirectCosumerContext="+redirectCosumerContext);
        System.out.println("redirectCosumerContext="+redirectCosumerContext);
        if(redirectCosumerContext!=null){
                response.sendRedirect(redirectCosumerContext+urlForCancel);
         }else{
                 response.sendRedirect(urlForCancel);
         }
        //response.sendRedirect(urlForCancel);
        FacesContext.getCurrentInstance().responseComplete(); 
    }
//  method for ESPRD00472887 end
	/**
	 * @return Returns the carrierIDRequired.
	 */
	public boolean isCarrierIDRequired() {
		return carrierIDRequired;
	}
	/**
	 * @param carrierIDRequired The carrierIDRequired to set.
	 */
	public void setCarrierIDRequired(boolean carrierIDRequired) {
		this.carrierIDRequired = carrierIDRequired;
	}
	
	//Infinite defect Implementation :ESPRD00480706
	/*
	 * Refresh the view force JSF to make a new component instance.
	 */
	public void refreshView() {
		FacesContext context = FacesContext.getCurrentInstance();
		ViewHandler viewHandler = context.getApplication().getViewHandler();
		UIViewRoot viewRoot = viewHandler.createView(context, context.getViewRoot().getViewId());
		context.setViewRoot(viewRoot);
	}
	/**
     * This method is used to perform the IPC operation from RecoveryDetails
     * Portlet to Financial Receipt Portlet
     * 
     * @return String
     */
	public String getFCNDetails()
    {
    	ActionRequest request = (ActionRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();    
	    Map map = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		String fcn = (String) map.get("fcn");
		request.setAttribute("FCNParam", fcn);
        return TPLAdministrationConstants.SUCCESS;
    }
	
	/**
	 * This method get LettersDataBean object.
	 * 
	 * @return LettersAndResponsesDataBean.
	 */
	public final LettersAndResponsesDataBean getLettersDataBeanFromContext() {

		FacesContext fc = FacesContext.getCurrentInstance();
		LettersAndResponsesDataBean letterTemplateDataBean = (LettersAndResponsesDataBean) fc
				.getApplication().createValueBinding(
						"#{" + GlobalLetterConstants.LETTER_RESPONSES_DATA_BEAN
								+ "}").getValue(fc);
		return letterTemplateDataBean;
	}

	private void sortRecoverypSearchData(final boolean sortOrder,
	        final String columnName, List dataList){		
		Comparator comparator = new Comparator()
	    {
	        public int compare(Object obj1, Object obj2)
	        {
	        	TPLRecoverySearchResultVO data1 = (TPLRecoverySearchResultVO) obj1;
	        	TPLRecoverySearchResultVO data2 = (TPLRecoverySearchResultVO) obj2;           
	            
	            if (columnName == null)
	            {
	                return 0;
	            }
	            if (TPLAdministrationConstants.SORT_RECOVERY_LOB
					.equals(columnName))
					{    	            	
						if (null == data1.getLob())
						{
							data1.setLob(null);
						}
						if (null == data2.getLob())
						{
							data2.setLob(null);
						}
						return sortOrder ? data1.getLob().compareTo(
						data2.getLob()) : data2.getLob()
						.compareTo(data1.getLob());
					}
	            if (TPLAdministrationConstants.SORT_RECOVERY_MEMBER_ID
	    				.equals(columnName))
	    				{        
	            		if (null == data1.getMemberID())
	    					{
	    						data1.setMemberID(null);
	    					}
	    					if (null == data2.getMemberID())
	    					{
	    						data2.setMemberID(null);
	    					}
	    					return sortOrder ? data1.getMemberID().compareTo(
	    					data2.getMemberID()) : data2.getMemberID()
	    					.compareTo(data1.getMemberID());
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_MEMBER_NAME
	    				.equals(columnName))
	    				{   	            	
	    					if (null == data1.getMemberName())
	    					{
	    						data1.setMemberName(null);
	    					}
	    					if (null == data2.getMemberName())
	    					{
	    						data2.setMemberName(null);
	    					}
	    					return sortOrder ? data1.getMemberName().compareToIgnoreCase(
	    					data2.getMemberName()) : data2.getMemberName()
	    					.compareToIgnoreCase(data1.getMemberName());
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_CASE_ID
	    				.equals(columnName))
	    				{	            	
	                	if (null == data1.getRecoveryCaseID())
	    					{
	    						data1.setRecoveryCaseID(null);
	    					}
	    					if (null == data2.getRecoveryCaseID())
	    					{
	    						data2.setRecoveryCaseID(null);
	    					}
	    					return sortOrder ? data1.getRecoveryCaseID().compareTo(
	    					data2.getRecoveryCaseID()) : data2.getRecoveryCaseID()
	    					.compareTo(data1.getRecoveryCaseID());
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_TYPE
	    				.equals(columnName))
	    				{   	            	
	    					if (null == data1.getRecoveryType())
	    					{
	    						data1.setRecoveryType(null);
	    					}
	    					if (null == data2.getRecoveryType())
	    					{
	    						data2.setRecoveryType(null);
	    					}
	    					return sortOrder ? data1.getRecoveryType().compareTo(
	    					data2.getRecoveryType()) : data2.getRecoveryType()
	    					.compareTo(data1.getRecoveryType());
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_CLAIM_STRT_DATE
	    				.equals(columnName))
	    				{    	            	
	            	DateFormat dateFormat=new SimpleDateFormat("MM/dd/yyyy");
	            	/*try {
						Date date=dateFormat.parse(data1.getCaseClaimStartDate());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}*/try {
	    					if (null == data1.getCaseClaimStartDate())
	    					{
	    						data1.setCaseClaimStartDate(null);
	    					}
	    					if (null == data2.getCaseClaimStartDate())
	    					{
	    						data2.setCaseClaimStartDate(null);
	    					}
	    					
								return sortOrder ? dateFormat.parse(data1.getCaseClaimStartDate()).compareTo(
										dateFormat.parse(data2.getCaseClaimStartDate())) : dateFormat.parse(data2.getCaseClaimStartDate()).compareTo(
												dateFormat.parse(data1.getCaseClaimStartDate())) ;
							} catch (ParseException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_CLAIM_STOP_DATE
	    				.equals(columnName))
	    				{    	    
	            	DateFormat dateFormat=new SimpleDateFormat("MM/dd/yyyy");
	            	try {
	    					if (null == data1.getCaseClaimStopDate())
	    					{
	    						data1.setCaseClaimStopDate(null);
	    					}
	    					if (null == data2.getCaseClaimStopDate())
	    					{
	    						data2.setCaseClaimStopDate(null);
	    					}
	    					
								return sortOrder ?  dateFormat.parse(data1.getCaseClaimStopDate()).compareTo(
										dateFormat.parse(data2.getCaseClaimStopDate())) : dateFormat.parse(data2.getCaseClaimStopDate()).compareTo(
												dateFormat.parse(data1.getCaseClaimStopDate()));
							} catch (ParseException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_CASE_STATUS
	    				.equals(columnName))
	    				{	            	
	    					if (null == data1.getCaseStatus())
	    					{
	    						data1.setCaseStatus(null);
	    					}
	    					if (null == data2.getCaseStatus())
	    					{
	    						data2.setCaseStatus(null);
	    					}
	    					return sortOrder ? data1.getCaseStatus().compareTo(
	    					data2.getCaseStatus()) : data2.getCaseStatus()
	    					.compareTo(data1.getCaseStatus());
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_CASE_BLLD_AMT
	    				.equals(columnName))
	    				{	            	
	    					if (null == data1.getCaseBilledAmount())
	    					{
	    						data1.setCaseBilledAmount(new Double(0));
	    					}
	    					if (null == data2.getCaseBilledAmount())
	    					{
	    						data2.setCaseBilledAmount(new Double(0));
	    					}
	    					return sortOrder ? data1.getCaseBilledAmount().compareTo(
	    					data2.getCaseBilledAmount()) : data2.getCaseBilledAmount()
	    					.compareTo(data1.getCaseBilledAmount());
	    				}
	            if (TPLAdministrationConstants.SORT_RECOVERY_CASE_RCVRD_AMT
	    				.equals(columnName))
	    				{	            	
	    					if (null == data1.getCaseRecoveredAmount())
	    					{
	    						data1.setCaseRecoveredAmount(new Double(0));
	    					}
	    					if (null == data2.getCaseRecoveredAmount())
	    					{
	    						data2.setCaseRecoveredAmount(new Double(0));
	    					}
	    					return sortOrder ? data1.getCaseRecoveredAmount().compareTo(
	    					data2.getCaseRecoveredAmount()) : data2.getCaseRecoveredAmount()
	    					.compareTo(data1.getCaseRecoveredAmount());
	    				}
	            return 0;
	        }
	    };
	    Collections.sort(dataList,comparator);
	}

	private Date getDateFromString(String dateString)
    {	 	
 	String tempDate=dateString;
 	String fullBDate="";
 	 if (tempDate.length()==8)
		{
		String mm = tempDate.substring(0,2);
		String dd = tempDate.substring(2,4);
		String yy = tempDate.substring(4,8);
		fullBDate = mm+"/"+dd+"/"+yy;
		dateString=fullBDate;				
	   }else if(tempDate.length()==10){
	   	String mm = tempDate.substring(0,2);
		String dd = tempDate.substring(3,5);
		String yy = tempDate.substring(6,10);
		fullBDate = mm+"/"+dd+"/"+yy;
		dateString=fullBDate;				
	   }
    	SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        Date date = null;
        try
        {
            date = sdf.parse(dateString);
        }
        catch (ParseException e)
        {
        	if(logger.isDebugEnabled()){
        		logger.debug(e.getMessage());
        	}
        }
        return date;
    }
	
	/**
	 * @param ae
	 *            ActionEvent
	 */
	/*public void listSortKey(ActionEvent ae) {		
		
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();		
		String SORT_NO = "sortNo", COLUMN = "column", LIST = "list";
		FacesContext facesContext = FacesContext.getCurrentInstance();
		Map map = facesContext.getExternalContext().getRequestParameterMap();
		String paramName = map.get(SORT_NO).toString();
		String column = map.get(COLUMN).toString();
		String listname = map.get(LIST).toString();
		List list = null;
		boolean[] sortFlagTemp = new boolean[] { true, true, true, true, true,
				true, true, true, true, true, true, true, true, true, true,
				true, true, true, true, true, true, true, true, true };
		try {
			if ("tplRecoveryClaimsList".equalsIgnoreCase(listname)) {
				sortFlagTemp[Integer.parseInt(paramName)] = false;
				list = tplRecoveryDataBean.getTplRecoveryMemberClaimsList();
				setMemberClaimsSortFlag(sortFlagTemp);
			}
			if(list != null){
			if ((Integer.parseInt(paramName)) % 2 == 0) {
				ACSComparator.sort(list, column, true);
			} else {
				ACSComparator.sort(list, column, false);
			}
			}	
			
		} catch (NumberFormatException e) {
			if(logger.isDebugEnabled()){
				logger.debug("NumberFormatException while calling the "
						+ "TPLRecoveryControllerBean.sortKey().... ", e);
        	}
		}
	}*/
	
	 //private String populateRecoveryValidValues;
	 public void getPopulateRecoveryValidValues(TPLRecoveryDataBean tplRecoveryDataBean) {
			ReferenceServiceDelegate referenceServiceDelegate = new ReferenceServiceDelegate();
			ReferenceDataSearchVO criteria = new ReferenceDataSearchVO();
			ReferenceDataListVO dataList = new ReferenceDataListVO();
			TPLAlertDataBean alertdatabean=new TPLAlertControllerBean().getTPLAlertDataBean();
			//TPLRecoveryDataBean tplRecoveryDataBean=getTPLRecoveryDataBean();
			tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().setCaseStatus("P");
			if(tplRecoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getCaseStatus().equalsIgnoreCase("P"))
			{
				tplRecoveryDataBean.setClaimDatesreqfield(false);
			}
			// Temporary list used in loading of drop down values.
			List tempList = new ArrayList();
			try {
				
				tempList.add(getInputCriteria( 
						ReferenceServiceDataConstants.R_LOB_CD,	FunctionalAreaConstants.REFERENCE));

				tempList.add(getInputCriteria( //2
						ReferenceServiceDataConstants.T_RCVRY_TY_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //3
						ReferenceServiceDataConstants.T_WORKG_STAT_CD, FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //4
						ReferenceServiceDataConstants.T_CASE_CLOSE_RSN_CD, FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //5 list size is 0
						ReferenceServiceDataConstants.T_CASE_TY_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //6
						ReferenceServiceDataConstants.T_INFO_SRC_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //7
						ReferenceServiceDataConstants.B_ALT_ID_TY_CD,FunctionalAreaConstants.MEMBER));
				
				tempList.add(getInputCriteria(//8
						ReferenceServiceDataConstants.G_CMN_ENTY_TY_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //9
						ReferenceServiceDataConstants.T_CASE_BLNG_FREQ_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //10
						ReferenceServiceDataConstants.T_CASE_BLNG_LTR_TY_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //11
						ReferenceServiceDataConstants.T_CASE_FLTR_TY_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //12
				  ReferenceServiceDataConstants.T_RCVRY_CLM_EXCLD_RSN_CD,FunctionalAreaConstants.TPL));
				 
				tempList.add(getInputCriteria( //13
						ReferenceServiceDataConstants.T_TORT_LEGAL_STAT_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //14
						ReferenceServiceDataConstants.T_CASE_STAT_CD, FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria(
						ReferenceServiceDataConstants.T_CASE_PAYER_EXTERNAL_ENTY_ID_TY_CD,
						FunctionalAreaConstants.TPL)); //15

				tempList.add(getInputCriteria( //16
				       ReferenceServiceDataConstants.G_CE_OR_SE_TY_CD_TPL,FunctionalAreaConstants.GENERAL));
				 
				tempList.add(getInputCriteria( //17
						ReferenceServiceDataConstants.G_US_STATE_CD, FunctionalAreaConstants.GENERAL));

				tempList.add(getInputCriteria( //18
						ReferenceServiceDataConstants.G_CNTY_CD,FunctionalAreaConstants.GENERAL));
				
				tempList.add(getInputCriteria( //18
						ReferenceServiceDataConstants.G_ALERT_TY_CD, FunctionalAreaConstants.GENERAL));
				
				tempList.add(getInputCriteria( //18
						ReferenceServiceDataConstants.G_ALERT_STAT_CD,FunctionalAreaConstants.GENERAL));

				tempList.add(getInputCriteria( //19
					    ReferenceServiceDataConstants.G_REL_CD_TPL,FunctionalAreaConstants.GENERAL));
				 
				tempList.add(getInputCriteria( //20
						ReferenceServiceDataConstants.G_GENDER_CD,FunctionalAreaConstants.GENERAL));

				tempList.add(getInputCriteria( //21
						ReferenceServiceDataConstants.T_ESTATE_AMT_TY_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //22
						ReferenceServiceDataConstants.T_LIEN_TY_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //23
						ReferenceServiceDataConstants.T_ESTATE_AMT_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //24
						ReferenceServiceDataConstants.T_ESTATE_AMT_SUB_CD,FunctionalAreaConstants.TPL));

				tempList.add(getInputCriteria( //25
						ReferenceServiceDataConstants.T_STATE_STTLMT_RSN_CD,FunctionalAreaConstants.TPL));
				tempList.add(getInputCriteria( //26
						ReferenceServiceDataConstants.T_RCVRY_METHOD_TB_CD,FunctionalAreaConstants.TPL));
				tempList.add(getInputCriteria( //27
						ReferenceServiceDataConstants.T_BLNG_RESP_RSN_CD,FunctionalAreaConstants.TPL));
				tempList.add(getInputCriteria( //28
						ReferenceServiceDataConstants.P_ALT_ID_TY_CD_TPL,FunctionalAreaConstants.PROVIDER));
				
				tempList.add(getInputCriteria( //29
						ReferenceServiceDataConstants.C_TY_CD,FunctionalAreaConstants.CLAIMS));
				
				tempList.add(getInputCriteria( //30
						ReferenceServiceDataConstants.G_ADR_USG_TY_CD,FunctionalAreaConstants.GENERAL));
						
				tempList.add(getInputCriteria( //31
						ReferenceServiceDataConstants.G_COUNTY_CD,FunctionalAreaConstants.GENERAL));
				
				tempList.add(getInputCriteria( //32
						ReferenceServiceDataConstants.G_US_STATE_CD,FunctionalAreaConstants.GENERAL));
				
				tempList.add(getInputCriteria( //33
						ReferenceServiceDataConstants.G_ENTITY_ID_TYPE_26,FunctionalAreaConstants.TPL));
				
				tempList.add(getInputCriteria( //34
						ReferenceServiceDataConstants.G_ENTITY_ID_TYPE_27,FunctionalAreaConstants.TPL));
				
				tempList.add(getInputCriteria( //35
						ReferenceServiceDataConstants.G_ENTITY_ID_TYPE_28,FunctionalAreaConstants.TPL));
				
				//GLOBAL ACTION CHANGE
				tempList.add(getInputCriteria(
						ReferenceServiceDataConstants.G_WORK_UNIT_TY_CD,FunctionalAreaConstants.CONTACT_MGMT));
				
				tempList.add(getInputCriteria(
						ReferenceServiceDataConstants.G_DEPT_WORK_UNIT_SK,FunctionalAreaConstants.GENERAL));
				tempList.add(getInputCriteria(
						ReferenceServiceDataConstants.G_EDMS_DOC_TYPE_CD,FunctionalAreaConstants.GENERAL));
				
				HashMap map = null;
				criteria.setInputList(tempList);
				dataList = referenceServiceDelegate.getReferenceData(criteria);
				long endTime = System.currentTimeMillis();
				if (dataList != null) {
					map = dataList.getResponseMap();
	                
					tplRecoveryDataBean.setLobCodeList(getValidData(map, //1
							ReferenceServiceDataConstants.R_LOB_CD,FunctionalAreaConstants.REFERENCE));
					
	                tplRecoveryDataBean.setRecoveryCodeTypeList(getValidData(map, //2
							ReferenceServiceDataConstants.T_RCVRY_TY_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setWorkingStatusCodeList(getValidData(map, //3
							ReferenceServiceDataConstants.T_WORKG_STAT_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setRecoveryClosureReasonList(getValidData(map, //4
							ReferenceServiceDataConstants.T_CASE_CLOSE_RSN_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setRecovreyCaseIncidentTypeList(getValidData(map, //5
							ReferenceServiceDataConstants.T_CASE_TY_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setInfoSourceList(getValidData(map, //6
							ReferenceServiceDataConstants.T_INFO_SRC_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setMemberIDTypeList(getValidData(map, //7
							ReferenceServiceDataConstants.B_ALT_ID_TY_CD,FunctionalAreaConstants.MEMBER));
	                tplRecoveryDataBean.setProviderIDList(getValidData(map,
							ReferenceServiceDataConstants.P_ALT_ID_TY_CD_TPL,FunctionalAreaConstants.PROVIDER));
					
	                tplRecoveryDataBean.setEmployerIDTypeList(getValidData(map,
							ReferenceServiceDataConstants.G_ENTITY_ID_TYPE_26,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setCarrierIDTypeList(getValidData(map,
							ReferenceServiceDataConstants.G_ENTITY_ID_TYPE_27,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setPolicyholderTypeList(getValidData(map,
							ReferenceServiceDataConstants.G_ENTITY_ID_TYPE_28,FunctionalAreaConstants.TPL));
					
					tplRecoveryDataBean.setEntityTypeList(getValidData(map,	//8
							ReferenceServiceDataConstants.G_CMN_ENTY_TY_CD,FunctionalAreaConstants.TPL));

	                tplRecoveryDataBean.setBillingFrequencyList(getValidData(map, //9
							ReferenceServiceDataConstants.T_CASE_BLNG_FREQ_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setLetterTypeList(getValidData(map,  //10
							ReferenceServiceDataConstants.T_CASE_BLNG_LTR_TY_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setFilterTypeList(getValidData(map, //11
							ReferenceServiceDataConstants.T_CASE_FLTR_TY_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setExcludeReasonCodeList(getValidData(map, //12
							ReferenceServiceDataConstants.T_RCVRY_CLM_EXCLD_RSN_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setLegalStatusCodeList(getValidData(map, //13
					  ReferenceServiceDataConstants.T_TORT_LEGAL_STAT_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setRecoveryCaseStatusList(getValidData(map, //14
							ReferenceServiceDataConstants.T_CASE_STAT_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setEntityIdTypeList(getValidData(map, //15
							ReferenceServiceDataConstants.T_CASE_PAYER_EXTERNAL_ENTY_ID_TY_CD,
							FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setLegalEntityTypeList(getValidData(map, //16
	                		ReferenceServiceDataConstants.G_CE_OR_SE_TY_CD_TPL,
	                		FunctionalAreaConstants.GENERAL));
					 
	                tplRecoveryDataBean.setStateList(getValidData(map, //17
							ReferenceServiceDataConstants.G_US_STATE_CD,FunctionalAreaConstants.GENERAL));
					
	                tplRecoveryDataBean.setCountyList(getValidData(map, //18
							ReferenceServiceDataConstants.G_CNTY_CD,FunctionalAreaConstants.GENERAL));
					
	                tplRecoveryDataBean.setRelationshipList(getValidData(map, //19
							ReferenceServiceDataConstants.G_REL_CD_TPL,FunctionalAreaConstants.GENERAL));
					 
	                tplRecoveryDataBean.setGenderList(getValidData(map, //20
							ReferenceServiceDataConstants.G_GENDER_CD,FunctionalAreaConstants.GENERAL));
					
	                alertdatabean.setAlertType(getValidData(map, //20
							ReferenceServiceDataConstants.G_ALERT_TY_CD,FunctionalAreaConstants.GENERAL));
					
	                alertdatabean.setAlertStatusList(getValidData(map, //20
							ReferenceServiceDataConstants.G_ALERT_STAT_CD,FunctionalAreaConstants.GENERAL));
					
	                tplRecoveryDataBean.setGenderList(getValidData(map, //20
							ReferenceServiceDataConstants.G_GENDER_CD,FunctionalAreaConstants.GENERAL));
					
	                tplRecoveryDataBean.setEstateTypeList(getValidData(map, //21
							ReferenceServiceDataConstants.T_ESTATE_AMT_TY_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setLienTypeList(getValidData(map, //22
							ReferenceServiceDataConstants.T_LIEN_TY_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setEstateAmtCodeList(getValidData(map, //23
							ReferenceServiceDataConstants.T_ESTATE_AMT_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setEstateAmtSubCodeList(getValidData(map, //24
							ReferenceServiceDataConstants.T_ESTATE_AMT_SUB_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setSettlmentReasonCodeList(getValidData(map, //25
							ReferenceServiceDataConstants.T_STATE_STTLMT_RSN_CD,
							FunctionalAreaConstants.TPL));
	                tplRecoveryDataBean.setSettlementList(tplRecoveryDataBean.getSettlmentReasonCodeList());
					
	                tplRecoveryDataBean.setRecoveryTypeList(getValidData(map, //26
							ReferenceServiceDataConstants.T_RCVRY_METHOD_TB_CD,FunctionalAreaConstants.TPL));
	                tplRecoveryDataBean.setRecoveryReasonList(getValidData(map, //27
							ReferenceServiceDataConstants.T_BLNG_RESP_RSN_CD,FunctionalAreaConstants.TPL));
					
	                tplRecoveryDataBean.setClaimsTypeList(getValidData(map, //29
							ReferenceServiceDataConstants.C_TY_CD,FunctionalAreaConstants.CLAIMS));
					
	                tplRecoveryDataBean.setPolicyAddressTypeList(getValidData(map, //30
		                    ReferenceServiceDataConstants.G_ADR_USG_TY_CD,FunctionalAreaConstants.GENERAL));
				
	                tplRecoveryDataBean.setPolCountyList(getValidData(map, //31
		                    ReferenceServiceDataConstants.G_COUNTY_CD,FunctionalAreaConstants.GENERAL));
					
	                tplRecoveryDataBean.setPolStateList(getValidData(map, //32
		                    ReferenceServiceDataConstants.G_US_STATE_CD,FunctionalAreaConstants.GENERAL));
	                //GLOBAL ACTION CHANGE
	                getRoutingDataBean().setRefListOfWorkUnitTypes(getValidData(map,
	    					ReferenceServiceDataConstants.G_WORK_UNIT_TY_CD, FunctionalAreaConstants.CONTACT_MGMT));
					
	                getTPLAttachmentDataBean().setEdmsWrkUnitLevelList(getValidData(map,
	    					ReferenceServiceDataConstants.G_DEPT_WORK_UNIT_SK, FunctionalAreaConstants.GENERAL));
	                getTPLAttachmentDataBean().setEdmsDocTypeList(getValidData(map,
	    					ReferenceServiceDataConstants.G_EDMS_DOC_TYPE_CD, FunctionalAreaConstants.GENERAL));
	               // tplRecoveryDataBean.setSystemListFlag(false);
					 getUsersListForAlert();					
				}
			} catch (SystemListNotFoundException se) {
				if(logger.isDebugEnabled()){
				logger.debug("There was an error processing the request. Please retry the transaction.");
				}
				se.printStackTrace();
			} catch (Exception ex) {
				if(logger.isDebugEnabled()){
				logger.debug("There was an error processing the request. Please retry the transaction.");
				}
				ex.printStackTrace();
			}     
		//return populateRecoveryValidValues;
	}

	/*public void setPopulateRecoveryValidValues(String populateRecoveryValidValues) {
		this.populateRecoveryValidValues = populateRecoveryValidValues;
	}*/
	//private String recoverySearchValidValues;
	public void getRecoverySearchValidValues() {
		ReferenceServiceDelegate referenceServiceDelegate = new ReferenceServiceDelegate();
		ReferenceDataSearchVO criteria = new ReferenceDataSearchVO();
		ReferenceDataListVO dataList = null; //Find Bug Fix
		TPLRecoverySearchDataBean tplRecoverySearchDataBean=getTPLRecoverySearchDataBean();
		// Temporary list used in loading of drop down values.
		List tempList = new ArrayList();
		try {
			tempList.add(getInputCriteria(
					ReferenceServiceDataConstants.T_MEM_TAB_CD,FunctionalAreaConstants.TPL));
			
			tempList.add(getInputCriteria(
					ReferenceServiceDataConstants.T_CASE_STAT_CD,FunctionalAreaConstants.TPL));
			
			tempList.add(getInputCriteria(
					ReferenceServiceDataConstants.T_RCVRY_TY_CD,FunctionalAreaConstants.TPL));

			tempList.add(getInputCriteria(
			        ReferenceServiceDataConstants.B_ALT_ID_TY_CD,FunctionalAreaConstants.MEMBER));
			 
			tempList.add(getInputCriteria(
					ReferenceServiceDataConstants.T_CARR_WKR_TAB_CD,FunctionalAreaConstants.TPL));

			HashMap map = null; //Find Bug Fix
			criteria.setInputList(tempList);

			dataList = referenceServiceDelegate.getReferenceData(criteria);
			if (dataList != null) {
				map = dataList.getResponseMap();

				tplRecoverySearchDataBean.setSearchByList(getValidData(map,
						ReferenceServiceDataConstants.T_MEM_TAB_CD,FunctionalAreaConstants.TPL));
				
				tplRecoverySearchDataBean.setRecoveryTypeList(getValidData(map,
						ReferenceServiceDataConstants.T_RCVRY_TY_CD,FunctionalAreaConstants.TPL));
				
				tplRecoverySearchDataBean.setMemberIDTypeList(getValidData(map,
						ReferenceServiceDataConstants.B_ALT_ID_TY_CD,FunctionalAreaConstants.MEMBER));
				 
				tplRecoverySearchDataBean.setCaseStatusList(getValidData(map,
						ReferenceServiceDataConstants.T_CASE_STAT_CD,FunctionalAreaConstants.TPL));
				 
				tplRecoverySearchDataBean.setWorkerList(getValidData(map,
						ReferenceServiceDataConstants.T_CARR_WKR_TAB_CD,FunctionalAreaConstants.TPL));
				//tplRecoverySearchDataBean.setSystemListFlag(false);

			}
		} catch (SystemListNotFoundException se) {
			if(logger.isDebugEnabled()){
			logger.debug("There was an error processing the request. Please retry the transaction.");
			}
			se.printStackTrace();
		} catch (Exception ex) {
			if(logger.isDebugEnabled()){
			logger.debug("There was an error processing the request. Please retry the transaction.");
			}
			ex.printStackTrace();

		} 	
		//return recoverySearchValidValues;
	}

	/*public void setRecoverySearchValidValues(String recoverySearchValidValues) {
		this.recoverySearchValidValues = recoverySearchValidValues;
	}*/	

	/*public void getUsersListForAlert() throws RemoteException
    {
    	logger.debug("Getting Users List is Started");
    	System.out.println("in USERS LIST FOR ALERT");
    
    	//TPLRecoveryCaseConstants recoverycaseconstans=new TPLRecoveryCaseConstants(); Find Bug Fix
    	TPLAlertDataBean tplAlertDataBean=new TPLAlertControllerBean().getTPLAlertDataBean();
    	TPLRecoveryDelegate recoverydelegate=new TPLRecoveryDelegate();
    	
        //CaseDelegate caseDelegate = new CaseDelegate();
        List userData = null;
        List users = null;
        int size = 0;
        AllSAUserVO allUser = null;
        String firstName = null;
        String lastName = null;
        String name = null;
        Map usersMap = null;
        Map userIDMap = null;
        List userIDList = null;
        Map userWUAndID = null;
        try 
        {
        	System.out.println("ALL USERS");
            userData = recoverydelegate.getAllUsers();
            
            if (!userData.isEmpty())
            {
            	size = userData.size();
            	System.out.println("ALL USERS SIZE"+size);
                users = new ArrayList(
                		TPLRecoveryCaseConstants.INITIAL_COLLECTION_SIZE);
                userIDList = new ArrayList(
                		TPLRecoveryCaseConstants.INITIAL_COLLECTION_SIZE);
                usersMap = new HashMap();
                userIDMap = new HashMap();
                userWUAndID = new HashMap();
                users.add(new SelectItem("", ""));
                userIDList.add(new SelectItem("", ""));
                for (int i = 0; i < size; i++)
                {
                	allUser = (AllSAUserVO) userData.get(i);
                    if (allUser.getFirstName() != null)
                    {
                        firstName = allUser.getFirstName();
                        lastName = allUser.getLastName();
                        name = firstName
                                + TPLRecoveryCaseConstants.EMPTY_STRING_SPACE
                                + lastName;
                        users.add(new SelectItem(allUser
                                .getUserWorkUnitSK().toString(), allUser
                                .getUserID()+TPLRecoveryCaseConstants.PR_HYPHEN + name));
                        userIDList.add(new SelectItem(allUser
                                .getUserID(), name));
                        usersMap.put(allUser.getUserWorkUnitSK()
                                .toString(), name);
                        userIDMap.put(allUser.getUserID(), name);
                        userWUAndID.put(allUser.getUserWorkUnitSK()
                                .toString(), allUser.getUserID());
                    }
                }
            }
            if(users == null)
            {
            	users = Collections.EMPTY_LIST;
            	userIDList = Collections.EMPTY_LIST;
            	usersMap = Collections.EMPTY_MAP;
            	userIDMap = Collections.EMPTY_MAP;
            	userWUAndID = Collections.EMPTY_MAP;
            }
            
            tplAlertDataBean.setUserList(users);
            tplAlertDataBean.setUserIDsList(userIDList);
            tplAlertDataBean.setUserMap(usersMap);
            tplAlertDataBean.setUserIDsMap(userIDMap);
            tplAlertDataBean.setUserIDAndWUMap(userWUAndID);
            
        }
        catch (ServiceAuthBusinessException e)
        {
            logger.error("Exception occured at getUsersList()" + e);
        }
        logger.debug("Getting Users List is Ended");
    }*/
	
	public void getUsersListForAlert() throws RemoteException
    {
    	TPLAlertDataBean tplAlertDataBean=new TPLAlertControllerBean().getTPLAlertDataBean();
    	TPLRecoveryDelegate recoverydelegate=new TPLRecoveryDelegate();
        List userData = null;
        List users = null;
        int size = 0;
        /*AllSAUserVO allUser = null;
        String firstName = null;
        String lastName = null;
        String name = null;
        Map usersMap = null;
        Map userIDMap = null;
        List userIDList = null;*/
        Map userWUAndID = null;
        try 
        {   
        	CMDelegate cmDelegate = new CMDelegate();
            userData = cmDelegate.getUserDetails();
            
            if (userData == null) {
            	if(logger.isDebugEnabled()){
            		logger.debug("userList is null");
            	}
          } else {
        	  users = new ArrayList(TPLRecoveryCaseConstants.INITIAL_COLLECTION_SIZE);
        	  userWUAndID = new HashMap();
                for (Iterator iter = userData.iterator(); iter.hasNext();) {
                      Object[] userDetails = (Object[]) iter.next();
                      StringBuffer userDesc = new StringBuffer(
                    		  TPLRecoveryCaseConstants.TPL_VALUE_EMPTY);

                     if (userDetails[0] != null) {
                            userDesc.append(userDetails[0]
                                        + ","
                                        + TPLRecoveryCaseConstants.EMPTY_STRING_SPACE);
                      }
                      if (userDetails[1] != null) {
                            userDesc.append(userDetails[1]
                                        + TPLRecoveryCaseConstants.PR_HYPHEN);
                      }
                      if (userDetails[2] != null) {

                       userDesc.append(userDetails[2]);
                      }
                      users.add(new SelectItem(userDetails[3].toString(),
                                  userDesc.toString()));
                      
                      userWUAndID.put(userDetails[3].toString(), userDetails[2]);
                }
          }
            
            tplAlertDataBean.setUserList(users);
            tplAlertDataBean.setUserIDAndWUMap(userWUAndID);           
            
        } catch (Exception e)
        {
        	if(logger.isDebugEnabled()){
        	logger.debug("Exception occured at getUsersList()" + e);
        	}
        }
    }
	
	private final List getValidData(Map map, String referenceDataConstant,
			String functionalArea) {
		List validList = new ArrayList(10);
		if (map != null) {
			List validValuesList = (List) map.get(functionalArea + "#"+ referenceDataConstant);
			int validValuesListSize = validValuesList.size();
			for (int i = 0; i < validValuesListSize; i++) {
				ReferenceServiceVO refVo = (ReferenceServiceVO) validValuesList.get(i);
				validList.add(new SelectItem(refVo.getValidValueCode(), refVo.getValidValueCode()
						+ "-" + refVo.getShortDescription(), refVo.getShortDescription()));
			}
		}
		return validList;
	}

	
	private final InputCriteria getInputCriteria(String referenceDataConstant,
			String functionalArea) {
		InputCriteria inputCriteria = new InputCriteria();
		inputCriteria.setFunctionalArea(functionalArea);
		inputCriteria.setElementName(referenceDataConstant);
		return inputCriteria;
	}
	

	protected TPLAttachmentControllerBean getAttachmentControllerBean()
	{
		//logger.debug("getAttachmentControllerBean()");
		FacesContext fc = FacesContext.getCurrentInstance();
		/*logger.debug("Class is "+ fc.getApplication().createValueBinding(
						"#{" + "TPLAttachmentControllerBean" + "}").getValue(fc).getClass());
        */
		TPLAttachmentControllerBean attachmentControllerBean = (TPLAttachmentControllerBean) fc
		     .getApplication().createValueBinding("#{" + "TPLAttachmentControllerBean" + "}").getValue(fc);

		return attachmentControllerBean;
	}
	
	/**
	 * Phone Number Validation - Infinite Defect Implementation - ESPRD00659898 
	 * Author - Aravind
	 */
	
	/**
     * This method validate the Primary/Secondary/FAX number.
     * 
     * @param expression :
     *            Phone numbers
     * @return boolean : true if the expression matches the pattern NNN-NNN-NNNN
     *         or NNNNNNNNNN
     */
	private static final int THREE = 3;
    public static boolean validatePrimaryPhne(String expression)
    {
        Pattern p;
        Matcher m;
        String primPhFormat1 = TPLAdministrationConstants.PRIPHNE_FORMAT1_PATTERN;
        String primPhFormat2 = TPLAdministrationConstants.PRIPHNE1_FORMAT2_PATTERN;

        if (expression.indexOf('-') == THREE)
        {
            p = Pattern.compile(primPhFormat1);
            m = p.matcher(expression);
            return m.matches();
        }
        else
        {
            p = Pattern.compile(primPhFormat2);
            m = p.matcher(expression);
            return m.matches();
        }
        
    }
    
    /**
     * This Method is used to Map to Resource Bundle.
     * 
     * @param facesContext
     *            FacesContext
     * @return ResourceBundle after mapping
     */
    public static ResourceBundle resourceBundle(FacesContext facesContext)
    {
         /*Find Bug Fix
          * The initial value of this parameter is ignored,
          *and the parameter is overwritten here. 
          *This often indicates a mistaken belief that the write to the parameter 
          *will be conveyed back to the caller. 

          */
        //facesContext = FacesContext.getCurrentInstance();
        UIViewRoot root = facesContext.getViewRoot();
        String messageBundle = facesContext.getApplication().getMessageBundle();
        Locale locale = root.getLocale();
        ResourceBundle bundle = ResourceBundle.getBundle(messageBundle, locale);

        return bundle;
    }
    
  
    private void setErrorMessage(String message,String jspId)
    {    	
        FacesContext facesContext = FacesContext.getCurrentInstance();
        facesContext.getApplication().setMessageBundle(
                TPLAdministrationConstants.TPL_CARRIER_PROPERTIES);
        ResourceBundle bundle = resourceBundle(facesContext);
        String errorMsg = bundle.getString(message);
        if (StringUtils.isBlank(jspId))
        {
            facesContext.addMessage(null, new FacesMessage(errorMsg));
        }
        else
        {
            UIComponent uiComp = findComponentInRoot(jspId);          
           
            facesContext.addMessage(uiComp.getClientId(facesContext), new FacesMessage(errorMsg));
        }
    }
	
//End - ESPRD00659898

    /*
	 * This method is used for add new Interested party Link 
	 * in  a legal tab
	 */
	
	public void addNewInterestedParty() {
		String fromPageName = TPLAdministrationConstants.SEARCH_ENTITY;
		ActionRequest request = (ActionRequest) FacesContext
				.getCurrentInstance().getExternalContext().getRequest();
		String actionName = request.getParameter(TPLAdministrationConstants.SEARCH_ENTITY_ID);
		if (null != actionName) {
			if (TPLAdministrationConstants.SEARCHENTITYID.equalsIgnoreCase(actionName)) {
				request.setAttribute(TPLAdministrationConstants.MAINTAINENTITY_ID, fromPageName);
			}
		}

	}
	public void sortKey(ActionEvent event)
	{
	  FacesContext fc = FacesContext.getCurrentInstance();
	  TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
	  String SORT_NO = "sortNo";
	  String COLUMN = "column";
	  String LIST = "list";
	  Map map = fc.getExternalContext().getRequestParameterMap();
	  String paramName = map.get(SORT_NO).toString();
	  String column = map.get(COLUMN).toString();
	  String listname = map.get(LIST).toString();
	  List list = null;
  	  /* Temprory flag holding the initially set to true for all icons. */
	  boolean[] sortFlagTemp = new boolean[] { true, true, true, true, true,
		 		true, true, true, true, true, true, true, true, true, true,
				true, true, true, true, true, true, true, true, true };

	  /* Setting the flag to false in order to render the descending/ascending icon.*/
	  try {
		  if("tplRecoveryAddBillingInfoList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryAddBillingInfoList();
			  tplRecoveryDataBean.setSortBillingFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("addbillngfocus");
		  }
		  if("tplBillingHistoryList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplBillingHistoryList();
			  tplRecoveryDataBean.setBillingHistorySortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("previousBillingHistorySetFocus");
		  }
		  if("tplRecoveryHistoryList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryHistoryList();
			  tplRecoveryDataBean.setRcvyHistorySortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("previousBillingHistorySetFocus");
		  }
		  if("tplRecoveryClaimLineItemList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryClaimLineItemShowList();
			  tplRecoveryDataBean.setClaimLineSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("clamlinefocus");
		  }
		  if("tplRecoveryClaimsList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false; 
			  tplRecoveryDataBean.setDataFirst(0);
			  list = tplRecoveryDataBean.getTplRecoveryMemberClaimsList();
			  tplRecoveryDataBean.setMemberClaimsSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("selectallfocus");
		  }
		  if("tplRecoveryOrthodontiaList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryOrthodontiaList();
			  tplRecoveryDataBean.setOrthoSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("orthodontiaSortFocus");
		  }
		  if("tplRecoveryClaimFilterList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryClaimFilterList();
			  tplRecoveryDataBean.setClaimFilterSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("clmfilterSortfocus");
		  } 
		  if ("tplRecoveryIncludedclaimsList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryIncludedclaimsList();
			  tplRecoveryDataBean.setInclClaimsSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("includeclaimsSortfocus");
		  }
		  if ("tplRecoveryPreviousResponseList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryPreviousResponseList();
			  tplRecoveryDataBean.setPreviousRespSortFlag(sortFlagTemp);
		  }
		  if("tplRecoveryCarrierInfoList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryCarrierInfoList();
			  tplRecoveryDataBean.setCarrierInfoSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("carrierInfoSortfocus");
		  }
		  if("tplRecoveryInterestedPartyInfoList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryInterestedPartyInfoList();
			  tplRecoveryDataBean.setInterestedPartySortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("intrestedpartySortFocus");
		  }
		  if("tplRecoveryBillingAddressList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryInterestedPartyAddressList();
			  tplRecoveryDataBean.setBillingAddressSortFlag(sortFlagTemp);
		  }
		  if("tplRecoverySettlementList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoverySettlementList();
			  tplRecoveryDataBean.setSettlmentInfoSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("setlemntSortfocus");
		  }
		  if("tplRecoveryAssetsLiabilitiesList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryAssetsLiabilitiesList();
			  tplRecoveryDataBean.setAssetsNLiabilitiesSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("assetliabilitiesSortfocus");
		  }
		  if("tplRecoveryRelationshipList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryRelationshipList();
			  tplRecoveryDataBean.setRelationshipSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("addRelationshipSortfocus");
		  }
		  if("tplRecoveryResponseList".equalsIgnoreCase(listname)) {
			  sortFlagTemp[Integer.parseInt(paramName)] = false;
			  list = tplRecoveryDataBean.getTplRecoveryResponseList();
			  tplRecoveryDataBean.setResponseSortFlag(sortFlagTemp);
			  tplRecoveryDataBean.setFocusThisId("responseSortFocus");
		  }
		  if(list !=null)
		  {
			  if ((Integer.parseInt(paramName)) % 2 == 0) {
				  ACSComparator.sort(list, column, true);
			  } else {
				  ACSComparator.sort(list, column, false);
			  }
		  }

	  } catch (NumberFormatException e) {
		  e.printStackTrace();
		  if(logger.isDebugEnabled()){
			  logger.debug("NumberFormatException while calling the "
					  + "TPLRecoveryControllerBean.sortKey().... ", e);
		  }
	  }
    }
	
	public String sortAttachmentsInfo(ActionEvent event)
    {
    	TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
    	tplRecoveryDataBean.setFocusThisId("attachmentfocus");
        String sortColumn = (String) event.getComponent().getAttributes().get(
                TPLAdministrationConstants.TPL_CLOUMN_NAME);
        String sortOrder = (String) event.getComponent().getAttributes().get(
                TPLAdministrationConstants.TPL_SORT_ORDER);
        
        TPLAttachmentDataBean tplAttachDataBean = getTPLAttachmentDataBean();
        tplAttachDataBean.setImageRender(event.getComponent().getId());
        sortMassChangeAttachmentsComparator(sortColumn, sortOrder,
        		tplAttachDataBean.getAttachmentList());
        
        return TPLAdministrationConstants.SUCCESS;
    }
	/**
     * This method creates a new Comparator Class and overrides the int
     * compare() to sort the Case Attachments in the Databean.
     * 
     * @param sortColumn
     *            String : name of the column to de sort.
     * @param sortOrder
     *            String : Ordering of the sort (asc / desc)
     * @param dataList
     *            List : List to be sort.
     */
    private void sortMassChangeAttachmentsComparator(final String sortColumn,
            final String sortOrder, List dataList)
    {
        Comparator comparator = new Comparator()
        {
            public int compare(Object obj1, Object obj2)
            {
                AttachmentsVO data1 = (AttachmentsVO) obj1;
                AttachmentsVO data2 = (AttachmentsVO) obj2;

                boolean ascending = false;
                if (TPLAdministrationConstants.SORT_TYPE_ASC
                        .equals(sortOrder))
                {
                    ascending = true;
                }
                else
                {
                    ascending = false;
                }
                if (sortColumn == null)
                {
                    return 0;
                }
                if (TPLAdministrationConstants.CARR_ATTACHMENTS_ATTACH_DATEADDED
                        .equals(sortColumn))
                {
                    if (null == data1.getDateAdded())
                    {
                        data1
                                .setDateAdded(TPLAdministrationConstants.EMPTY);
                    }
                    if (null == data2.getDateAdded())
                    {
                        data2
                                .setDateAdded(TPLAdministrationConstants.EMPTY);
                    }
                    return ascending ? data1.getDateAdded().compareTo(
                            data2.getDateAdded()) : data2.getDateAdded()
                            .compareTo(data1.getDateAdded());
                }
                if (TPLAdministrationConstants.CARR_ATTACHMENTS_ATTACH_ADDEDBY
                        .equals(sortColumn))
                {
                    if (null == data1.getAddedBy())
                    {
                        data1
                                .setAddedBy(TPLAdministrationConstants.EMPTY);
                    }
                    if (null == data2.getAddedBy())
                    {
                        data2
                                .setAddedBy(TPLAdministrationConstants.EMPTY);
                    }
                    return ascending ? data1.getAddedBy().trim().compareTo(
                            data2.getAddedBy().trim()) : data2.getAddedBy()
                            .trim().compareTo(data1.getAddedBy().trim());
                }
                if (TPLAdministrationConstants.CARR_ATTACHMENTS_ATTACH_FILENAME
                        .equals(sortColumn))
                {	
                    if (null == data1.getFileName())
                    {
                        data1
                                .setFileName(TPLAdministrationConstants.EMPTY);
                    }
                    if (null == data2.getFileName())
                    {
                        data2
                                .setFileName(TPLAdministrationConstants.EMPTY);
                    }
                    return ascending ? data1.getFileName().trim().compareTo(
                            data2.getFileName().trim()) : data2.getFileName()
                            .trim().compareTo(data1.getFileName().trim());
                }
                if (TPLAdministrationConstants.CARR_ATTACHMENTS_ATTACH_DESC
                        .equals(sortColumn))
                {
                    if (null == data1.getDescription())
                    {
                        data1
                                .setDescription(TPLAdministrationConstants.EMPTY);
                    }
                    if (null == data2.getDescription())
                    {
                        data2
                                .setDescription(TPLAdministrationConstants.EMPTY);
                    }
                    return ascending ? data1.getDescription().trim().compareTo(
                            data2.getDescription().trim()) : data2
                            .getDescription().trim().compareTo(
                                    data1.getDescription().trim());
                }
                return 0;
            }
        };
        Collections.sort(dataList, comparator);
    }
    public String invokePayeePayerID() 
	{
	
		getTPLRecoveryDataBean().setRecoveryInd("recoveryDetailTab:detail:addBillingInfo:updatepayeeid");
		return "";
	}
 public String invokeTCN() 
	{
		// Defect ESPRD00796540 modified
		getTPLRecoveryDataBean().setRecoveryInd("memberClaimsTab:memberClaims:claimsLineDetailPage:updatetcnValue");
		return "";										
	}
 public String invokeTCN1(){
	
		getTPLRecoveryDataBean().setRecoveryInd("includedClaimsTab:includedClaims:updatetcn1Value");
		return ""; 
 }
 public String invokeTCN2(){
	 
		getTPLRecoveryDataBean().setRecoveryInd("includedClaimsTab:includedClaims:previousResponsePage:updatetcn2Value");
		return ""; 
 }

 public String invokeFCN(){
	 
		getTPLRecoveryDataBean().setRecoveryInd("includedClaimsTab:includedClaims:previousResponsePage:TPLADMCL467");
		return ""; 
 }
 public String invokeTCN3(){
	 
		getTPLRecoveryDataBean().setRecoveryInd("includedClaimsTab:includedClaims:recoveryResponsePage:updatetcn3Value");
		return ""; 
 }
 
 public String invokeAddEntity(){	 
	 	
	 	getTPLRecoveryDataBean().setRecoveryInd("recoveryDetailTab:detail:addBillingInfo:payeeIDOutPutLink");	 
		return ""; 
}
 // Search Result
 private void setRenderingForSearchDisplay(TPLRecoverySearchDataBean recoverySearchDataBean,EnterpriseSearchResultsVO enterpriseSearchResultsVO,boolean isFromPagination)
 {
	   if(!isFromPagination)
	   {
		   recoverySearchDataBean.setCount((int) enterpriseSearchResultsVO.getRecordCount());
		   int noOfPages = recoverySearchDataBean.getCount() / 10;
		   int modNofPages = recoverySearchDataBean.getCount() % 10;
		   if (modNofPages != 0) {
			   noOfPages = noOfPages + 1;
		   }
		   recoverySearchDataBean.setFirstPage(1);
		   recoverySearchDataBean.setCurrentPage(1);
		   recoverySearchDataBean.setNumberOfPages(noOfPages);
		   recoverySearchDataBean.setStartRecord(1);
		}else{
			recoverySearchDataBean.setStartRecord(((recoverySearchDataBean.getCurrentPage()-1)*TPLAdministrationConstants.ITEMS_PER_PAGE)+1);
		}
		if (recoverySearchDataBean.getCurrentPage()<recoverySearchDataBean.getNumberOfPages()) {
			recoverySearchDataBean.setEndRecord(recoverySearchDataBean.getCurrentPage()*TPLAdministrationConstants.ITEMS_PER_PAGE);
		}else {
			recoverySearchDataBean.setEndRecord(recoverySearchDataBean.getCount());
		}		
		recoverySearchDataBean.setTplRecoverySearchResults(true);
		if(recoverySearchDataBean.getNumberOfPages()!=1)
		{
			recoverySearchDataBean.setRenderFirstPage(true);
			recoverySearchDataBean.setRenderFirstPagePlusOne(true);
			recoverySearchDataBean.setShowNext(false);
			recoverySearchDataBean.setShowPrevious(false);
			recoverySearchDataBean.setRenderFirstPagePlusTwo(false);
			if(recoverySearchDataBean.getCurrentPage() != recoverySearchDataBean.getNumberOfPages()){
				recoverySearchDataBean.setShowNext(true);
			}
			if (recoverySearchDataBean.getCurrentPage() != 1)  {
				recoverySearchDataBean.setShowPrevious(true);
			}
			if(recoverySearchDataBean.getCurrentPage() <= recoverySearchDataBean.getNumberOfPages() 
					&& (recoverySearchDataBean.getFirstPage()+2)<= recoverySearchDataBean.getNumberOfPages()){
				recoverySearchDataBean.setRenderFirstPagePlusTwo(true);
			}
		}else{
			recoverySearchDataBean.setRenderFirstPage(false);
			recoverySearchDataBean.setRenderFirstPagePlusOne(false);
			recoverySearchDataBean.setRenderFirstPagePlusTwo(false);
			recoverySearchDataBean.setShowNext(false);
			recoverySearchDataBean.setShowPrevious(false);
		}
		if(recoverySearchDataBean.getFirstPage() == recoverySearchDataBean.getCurrentPage()){
			recoverySearchDataBean.boldPageNum[0] = true;recoverySearchDataBean.boldPageNum[1] = false;recoverySearchDataBean.boldPageNum[2] = false;
		}else if(recoverySearchDataBean.getFirstPage()+1 == recoverySearchDataBean.getCurrentPage()){
			recoverySearchDataBean.boldPageNum[0] = false;recoverySearchDataBean.boldPageNum[1] = true;recoverySearchDataBean.boldPageNum[2] = false;
		}else{
			recoverySearchDataBean.boldPageNum[0] = false;recoverySearchDataBean.boldPageNum[1] = false;recoverySearchDataBean.boldPageNum[2] = true;
		}
 }
 
 public void searchPageNavigation()
 {
	  	TPLRecoverySearchDataBean recoverySearchDataBean = null;
	  	TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
	
		TPLRecoverySearchCriteriaVO recoverySearchCriteriaVO= null;
		EnterpriseSearchResultsVO enterpriseSearchResultsVO = null;
		try 
		{
				recoverySearchDataBean = getTPLRecoverySearchDataBean();
				recoverySearchCriteriaVO = recoverySearchDataBean.getTplRecoverySearchCriteriaVO();
			    if(setStartIndexForSearch(recoverySearchDataBean,recoverySearchCriteriaVO))
			    {	
			    	recoverySearchCriteriaVO.setRowsPerPage(TPLAdministrationConstants.ITEMS_PER_PAGE);
			    	enterpriseSearchResultsVO = tplRecoveryDelegate.searchRecoveryCase(recoverySearchCriteriaVO);
			    	procesSearchResultForDisplay(recoverySearchDataBean,enterpriseSearchResultsVO);
			    	setRenderingForSearchDisplay(recoverySearchDataBean,enterpriseSearchResultsVO,true);
			    }
		} catch (Exception e)
		{
			e.printStackTrace();
		}
 }
 
 private boolean setStartIndexForSearch(TPLRecoverySearchDataBean recoverySearchDataBean,TPLRecoverySearchCriteriaVO recoverySearchCriteriaVO)
 {
	    FacesContext facesContext = FacesContext.getCurrentInstance();
		Map map = facesContext.getExternalContext().getRequestParameterMap();
		String linkID = map.get("param").toString();
		// heap dump fix
		//recoverySearchDataBean.setTplCurrentPageId("hippsearch123");
		//recoverySearchDataBean.setSearchRowIndex(0);
		
		if("firstPage".equals(linkID)) {
			if(recoverySearchDataBean.getFirstPage() == recoverySearchDataBean.getCurrentPage()) {
				return false;
			}else {
				recoverySearchDataBean.setCurrentPage(recoverySearchDataBean.getFirstPage());
			}
		}else if("firstPagePlusOne".equals(linkID)){
			if((recoverySearchDataBean.getFirstPage()+1) == recoverySearchDataBean.getCurrentPage()) {
				return false;
			}else {
				recoverySearchDataBean.setCurrentPage(recoverySearchDataBean.getFirstPage()+1);
			}
		}else if("firstPagePlusTwo".equals(linkID)){
			if((recoverySearchDataBean.getFirstPage()+2) == recoverySearchDataBean.getCurrentPage()) {
				return false;
			}else {
				recoverySearchDataBean.setCurrentPage(recoverySearchDataBean.getFirstPage()+2);
			}
		}else if("showPrevious".equals(linkID)){
			recoverySearchDataBean.setCurrentPage(recoverySearchDataBean.getCurrentPage()-1);
		}else if("showNext".equals(linkID)){
			recoverySearchDataBean.setCurrentPage(recoverySearchDataBean.getCurrentPage()+1);
		}
		if (recoverySearchDataBean.getCurrentPage() == 1 ||recoverySearchDataBean.getNumberOfPages() == 2)  {
			recoverySearchDataBean.setFirstPage(1);
		}else if(recoverySearchDataBean.getCurrentPage() == recoverySearchDataBean.getNumberOfPages()){
			recoverySearchDataBean.setFirstPage(recoverySearchDataBean.getCurrentPage()-2);
		}else{
			recoverySearchDataBean.setFirstPage(recoverySearchDataBean.getCurrentPage()-1);
		}
		
		recoverySearchCriteriaVO.setStartIndex((recoverySearchDataBean.getCurrentPage()-1)*TPLAdministrationConstants.ITEMS_PER_PAGE);
		return true;
	}

 private void procesSearchResultForDisplay(TPLRecoverySearchDataBean tplRecoverySearchDataBean,EnterpriseSearchResultsVO enterpriseSearchResultsVO)
	{
		
		List searchResultList = enterpriseSearchResultsVO.getSearchResults();
		Iterator iterator = searchResultList.iterator();
		while (iterator.hasNext()) {
			TPLRecoverySearchResultVO tplRecoverySearchResultVO = (TPLRecoverySearchResultVO) iterator.next();
			if (tplRecoverySearchResultVO.getCaseStatus()!=null)
			{
				String description = TPLRecoveryConversionHelper.getSourceCodeDescription(
						getTPLRecoverySearchDataBean().getCaseStatusList(),
						tplRecoverySearchResultVO.getCaseStatus());
				tplRecoverySearchResultVO.setCaseStatus(description);
			}
			if (tplRecoverySearchResultVO.getRecoveryType()!=null)
			{
				String description = TPLRecoveryConversionHelper.getSourceCodeDescription(
						getTPLRecoverySearchDataBean().getRecoveryTypeList(),
						tplRecoverySearchResultVO.getRecoveryType());
				tplRecoverySearchResultVO.setRecoveryType(description);
			}
			if (tplRecoverySearchResultVO.getCaseBilledAmount()==null)
			{
				tplRecoverySearchResultVO.setCaseBilledAmount(new Double(0.00).doubleValue());
			}
			if (tplRecoverySearchResultVO.getCaseRecoveredAmount()==null)
			{
				tplRecoverySearchResultVO.setCaseRecoveredAmount(new Double(0.00).doubleValue());
			}
		}
		tplRecoverySearchDataBean.setSearchResultList(enterpriseSearchResultsVO.getSearchResults());
		tplRecoverySearchDataBean.setTplRecoverySearchResults(true);		
	}
 
 	public void sortRecoverySearch(ActionEvent event)
 	{
 		TPLRecoverySearchDataBean recoverySearchDataBean = getTPLRecoverySearchDataBean();
	  	TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
	
		TPLRecoverySearchCriteriaVO recoverySearchCriteriaVO= recoverySearchDataBean.getTplRecoverySearchCriteriaVO();
		EnterpriseSearchResultsVO enterpriseSearchResultsVO = null;		
		String SORT_NO = "sortNo", COLUMN = "column";
		boolean[] sortFlagTemp = new boolean[] { true, true, true, true, true,
			 		true, true, true, true, true, true, true, true, true, true,
					true, true, true, true, true, true, true, true, true };
		try 
		{
			FacesContext facesContext = FacesContext.getCurrentInstance();
			Map map = facesContext.getExternalContext().getRequestParameterMap();
			String paramName = map.get(SORT_NO).toString();
			String column = map.get(COLUMN).toString();
			// heap dump fix
			//recoverySearchDataBean.setSearchRowIndex(0);
			recoverySearchDataBean.setStartRecord(0);
			recoverySearchCriteriaVO.setSortColumn(column);
			recoverySearchCriteriaVO.setStartIndex(0);
			sortFlagTemp[Integer.parseInt(paramName)] = false;			
			recoverySearchDataBean.setSearchColumnSortFlag(sortFlagTemp);
			
			if ((Integer.parseInt(paramName)) % 2 == 0) {
				recoverySearchCriteriaVO.setAscending(true);
			} else {
				recoverySearchCriteriaVO.setAscending(false);
			}
			 enterpriseSearchResultsVO = tplRecoveryDelegate.searchRecoveryCase(recoverySearchCriteriaVO);
			 ArrayList resultList = enterpriseSearchResultsVO.getSearchResults();
			 if (resultList.size() > 1) 
			 {
				 procesSearchResultForDisplay(recoverySearchDataBean,enterpriseSearchResultsVO);
				 setRenderingForSearchDisplay(recoverySearchDataBean,enterpriseSearchResultsVO,false);
			 }
		} 
		catch (Exception e)
		{
			if(logger.isDebugEnabled()){
			logger.debug("Exception::::::::: " + e.getMessage());
			}
		}
 	}
 
 public String  invokeAddNewInterestedParty(){
	 
		getTPLRecoveryDataBean().setRecoveryInd("legalTab:legal:interestedPartyInformation:TPLADMCL254");
		return ""; 
}
 public String  invokeMemberID(){
	 
		getTPLRecoveryDataBean().setRecoveryInd("recoveryDetailTab:detail:TPLADMCL79");
		return ""; 
}


public String getRecoveryMemberDetails()
{
  FacesContext fc = FacesContext.getCurrentInstance();
  ExternalContext extContext = fc.getExternalContext();
  Map map = extContext.getRequestParameterMap();
  String memberSysId = (String) map.get("memberSysId");
 
  MemberSearchCriteriaVO criteriaVO = new MemberSearchCriteriaVO();
  criteriaVO.setMemberSysID(new Long(memberSysId));
  
  extContext.getRequestMap().put("EntityMemberDetail", criteriaVO);
  return "";
}
public String  invokeInterestedPartyID(){
	 
	getTPLRecoveryDataBean().setRecoveryInd("legalTab:legal:interestedPartyInformation:updateInterestedPartyID");
	return ""; 
}
  
	/**  Added as part of CR ESPRD00697346 implenetation.
	 * This method includes or deletes the member claims to the included claims dependibg on the Checked/unchecked vaules 
	 *  of the checkBox in the member claims datatable.
	 */
	public void manageIncludeClaims()
	{
		boolean includeflag = true;
		TPLRecoveryDataBean recoveryDataBean =  getTPLRecoveryDataBean();
		recoveryDataBean.setSelectAllClaims(false);
		List massAdjRecords = recoveryDataBean.getTplRecoveryMemberClaimsList();
		String caseID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
		if(massAdjRecords!=null && massAdjRecords.size()>0){
			List listOfIncludedClaims = recoveryDataBean.getTplRecoveryIncludedclaimsList();
			List tempIncludedClaimsList = recoveryDataBean.getTempInclClmsList();
			List newIncludedClaims = null;
			Iterator memberClaimsItr = massAdjRecords.iterator();
			while(memberClaimsItr.hasNext())
			{
				includeflag = true;
				TPLRecoveryCaseMemberClaimSelectionVO memberClaimSelectionVO = (TPLRecoveryCaseMemberClaimSelectionVO)memberClaimsItr.next();
				//ESPRD00794108
				if(tempIncludedClaimsList !=null && tempIncludedClaimsList.size()>0)
				{
					Iterator includedClaimsIterator = tempIncludedClaimsList.iterator();
					for(int i=0; i<tempIncludedClaimsList.size();i++)
					{
						TPLRecoveryCaseIncludedClaimsVO tplRcvryCaseInclClaim = (TPLRecoveryCaseIncludedClaimsVO)includedClaimsIterator.next();
						if(memberClaimSelectionVO.getTcn().equals(tplRcvryCaseInclClaim.getTcn()))
						{
							includeflag = false;
							if(!memberClaimSelectionVO.isSelectClaim())
							{
								removeClaimIncludedList(memberClaimSelectionVO,tempIncludedClaimsList);
								break;
							}
						}
					}
				}
				if(includeflag && memberClaimSelectionVO.isSelectClaim())
				{
					newIncludedClaims = new ArrayList();
					newIncludedClaims = getIncludedClaims(memberClaimSelectionVO, newIncludedClaims,caseID);
					if(newIncludedClaims!=null && newIncludedClaims.size()>0) {
					    List removedInclClmList = recoveryDataBean.getRemovedInclClmList(); 
						if(removedInclClmList!=null && removedInclClmList.size()>0) {
							Iterator removedList = removedInclClmList.iterator();
							while(removedList.hasNext()){
								TPLRecoveryCaseIncludedClaimsVO removedRcvryCaseInclClmsVO = (TPLRecoveryCaseIncludedClaimsVO)removedList.next();
								Iterator newInclClmsItr = newIncludedClaims.iterator();
								while(newInclClmsItr.hasNext()){
									TPLRecoveryCaseIncludedClaimsVO newRcvryCaseInclClmsVO = (TPLRecoveryCaseIncludedClaimsVO)newInclClmsItr.next();
									if(newRcvryCaseInclClmsVO.getTcn().equals(removedRcvryCaseInclClmsVO.getTcn())){
										removedList.remove();	
									}
								}
							}
							recoveryDataBean.setRemovedInclClmList(removedInclClmList);
						}
						Iterator newInclClmsItr = newIncludedClaims.iterator();
						while(newInclClmsItr.hasNext()){
							TPLRecoveryCaseIncludedClaimsVO newRcvryCaseInclClmsVO = (TPLRecoveryCaseIncludedClaimsVO)newInclClmsItr.next();
							if(!tempIncludedClaimsList.contains(newRcvryCaseInclClmsVO))
								tempIncludedClaimsList.add(newRcvryCaseInclClmsVO);
						}
						recoveryDataBean.getNewIncludedClmList().addAll(newIncludedClaims);
					}
				}
			}
			if((listOfIncludedClaims==null || listOfIncludedClaims.size()==0) 
					&& recoveryDataBean.getNewIncludedClmList().size()>0){
				recoveryDataBean.setTplRecoveryIncludedclaimsList(recoveryDataBean.getNewIncludedClmList());
				setRenderingForIncludeClaims(recoveryDataBean,
						recoveryDataBean.getTplRecoveryIncludedclaimsList().size(),false);
			}else{
				//String caseID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
				Long memberSysId=recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getSystemID();
				TPLRecoveryDelegate recoveryDelegate = new TPLRecoveryDelegate();
				try{ 
					TPLRecoveryCaseClaimAndResponseVO tplRcvryCaseClaimAndRespVO = 
						recoveryDelegate.getTplRecoveryCaseIncludedClaimsList(
								caseID, memberSysId, recoveryDataBean.getNewIncludedClmList(),
								recoveryDataBean.getRemovedInclClmList(),0,10,
								recoveryDataBean.getInclClmsSortColumn(),recoveryDataBean.isInclClmsSortOrder());
					
					List includedClaimsList = null;
					if(tplRcvryCaseClaimAndRespVO !=null){
						if(tplRcvryCaseClaimAndRespVO.getNewInclClmsList()!=null){
							recoveryDataBean.setNewIncludedClmList(tplRcvryCaseClaimAndRespVO.getNewInclClmsList());
						}else {
							recoveryDataBean.setNewIncludedClmList(new ArrayList());
						}
						if(!recoveryDataBean.getModifiedInclClmsList().isEmpty()){
							includedClaimsList = mergeIncludedClaims(tplRcvryCaseClaimAndRespVO);
						}else{
							includedClaimsList =  tplRcvryCaseClaimAndRespVO.getListOfRecoveryIncludedCliamsVO();
						}
						recoveryDataBean.setTplRecoveryIncludedclaimsList(includedClaimsList);
						if(includedClaimsList !=null && includedClaimsList.size()>0){
							setRenderingForIncludeClaims(recoveryDataBean,tplRcvryCaseClaimAndRespVO.getRecordCount(),false);
						}else{
							recoveryDataBean.setInclStartRecord(0);
							recoveryDataBean.setInclEndRecord(0);
						}
					}
				}catch (TPLRecoveryBusinessException e) 
				{
					e.printStackTrace();
					e.getErrorCode();
					addMessages(e.getMessage());
				}catch (Exception e)
				{
					e.printStackTrace();
					if(logger.isDebugEnabled()){
						logger.debug("Exception::::::::: " + e.getMessage());
					}
				}
			}
		}
	}
	
	public String  invokeRecoveryHistoryFCN(){
		 
		getTPLRecoveryDataBean().setRecoveryInd("recoveryDetailTab:detail:previousHistoryInfo:recoveryHistory:0:recoveryrespFCN");
		return ""; 
	}
	// Defect ESPRD00796540 added
	public String invokeRecoverySattlementFCNLink()
	{
		getTPLRecoveryDataBean().setRecoveryInd("legalTab:legal:addSettlementInfo:FCNValueslink");
		return ""; 								
	}
	
	
	
	private String validDataForSearch;

	public String getValidDataForSearch() {
		TPLRecoverySearchDataBean tplRecoverySearchDataBean = getTPLRecoverySearchDataBean();
		searchLink2Show(tplRecoverySearchDataBean);
		getRecoverySearchValidValues();
		tplRecoverySearchDataBean.setSystemListFlag(false);
		return validDataForSearch;
	}
	
	private String validData;

	public String getValidData() {
		TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		link2Show();
		getPopulateRecoveryValidValues(tplRecoveryDataBean);
		tplRecoveryDataBean.setSystemListFlag(false);
		return validData;
	}
	
	public void searchLink2Show(TPLRecoverySearchDataBean tplRecoverySearchDataBean)
	{    	
		Map links2Hide = getUserPermission();
		Set keys = links2Hide.keySet();
		Iterator keyitr = keys.iterator();
		//	FieldAccessControl fieldAccessControlImpl = new FieldAccessControl();
		while( keyitr. hasNext() )
		{
			String linkName=(String)keyitr.next();	
			String linkPermission=(String)links2Hide.get(linkName);
			if(logger.isDebugEnabled()){
				logger.debug("Inside TPLRecoveryControllerBean linkPermission"+linkPermission);
				logger.debug("Inside TPLRecoveryControllerBean linkName"+linkName);
			}
			if (linkPermission != null)
			{
				linkPermission = linkPermission.trim();	
				if( linkName.equals(TPLAdministrationConstants.UPDATE_RECOVERY_PAGE))
				{
					if(("r".equalsIgnoreCase(linkPermission)))
					{	
						getTPLRecoverySearchDataBean().setDisabletplRecovery(true);
					}
				}
			} 
			else 
			{	    		
				if( linkName.equals(TPLAdministrationConstants.UPDATE_RECOVERY_PAGE))
				{
					getTPLRecoverySearchDataBean().setDisabletplRecovery(true);
				}
			}
		}
	}
	public String getSADetails()
	{
	   FacesContext fc = FacesContext.getCurrentInstance();
	   ExternalContext extContext = fc.getExternalContext();
	   Map map = extContext.getRequestParameterMap();
	   String serviceAuthID = (String) map.get("serviceAuthID");
	   extContext.getRequestMap().put("serviceAuthID", serviceAuthID);
	   return "";
	}
	
	public String  invokeSAID(){
		getTPLRecoveryDataBean().setRecoveryInd("recoveryDetailTab:detail:TPLADMCL791");
		return ""; 
	}
	
	// Defect ESPRD00796540 added  New IPC METHOD
	public String getCarrierData(){
		ActionRequest request = (ActionRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();    
		Map map = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		String tplCarrierId = (String) map.get("carrierId");
		request.setAttribute("tplCarrierId", tplCarrierId);
		return TPLAdministrationConstants.SUCCESS;		
	} 
	
	public String  invokeCarrierID(){	
		getTPLRecoveryDataBean().setRecoveryInd("carrierTab:carrier:carrierInformation:carrIdIPCRec");
		return ""; 								
	}
	
	public String setEdmsURL()
	{
		 FacesContext fc = FacesContext.getCurrentInstance();
		 ExternalContext extContext = fc.getExternalContext();
		 Map map = extContext.getRequestParameterMap();
		 String edmsURL = (String) map.get("edmsURL");
		 getTPLRecoveryDataBean().setRecoveryInd("URLEDMS_"+edmsURL);
		 return "";	
	}
	
	public String invokeEntityIDAll()
	{		
		getTPLRecoveryDataBean().setRecoveryInd("recoveryDetailTab:detail:addBillingInfo:entityIdAll");
		return "";	
	}
	
	public String invokeEntityIDIPCAll()
	{		
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		ActionRequest request = (ActionRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
		TPLRecoveryCaseBillingInformationVO caseBillingInformationVO = recoveryDataBean.getTempRecoveryCaseBillingInformationVO();
		String entityId  = caseBillingInformationVO.getEnityID();
		try{
			TPLRecoveryDelegate  tplRecoveryDelegate = new TPLRecoveryDelegate();
			if(caseBillingInformationVO.getEntityTpye().equalsIgnoreCase("M")){			
				TPLRecoveryCaseMemberDetailsVO tplRecoveryCaseMemDetailaVO = tplRecoveryDelegate.getMember(
						entityId.toUpperCase(),caseBillingInformationVO.getEntityIDType());
				MemberSearchCriteriaVO criteriaVO = new MemberSearchCriteriaVO();
				criteriaVO.setMemberSysID(tplRecoveryCaseMemDetailaVO.getSystemID());			  
				request.setAttribute("EntityMemberDetail", criteriaVO);			 
			}
			else if(caseBillingInformationVO.getEntityTpye().equalsIgnoreCase("P"))
			{			
				ProviderInformationDelegate providerInformationDelegates = new ProviderInformationDelegate();
				Long providerSID = providerInformationDelegates.getProviderSysId(entityId, caseBillingInformationVO.getEntityIDType());
				request.setAttribute("providerSID",providerSID.toString());
			}
			else if(caseBillingInformationVO.getEntityTpye().equalsIgnoreCase("TC"))
			{		
				request.setAttribute("tplCarrierId", entityId);
			}
			else if(caseBillingInformationVO.getEntityTpye().equalsIgnoreCase("TP"))
			{			
				String policySK =tplRecoveryDelegate.getPolicyHolderSK(entityId);			
				policySK = policySK + "_Policy";
				request.setAttribute("policySK", policySK);
			}else if(caseBillingInformationVO.getEntityTpye().equalsIgnoreCase("SE")){
				request.setAttribute("maintainEntityId",entityId);
			}
		}
		catch (Exception e){
			logger.debug("Error in invokeEntityIDIPCAll"+e.getMessage());
		}
		return "";	
	}// END
	
	
	public void sortIncludeClmsDetails(ActionEvent event)
	{
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		TPLRecoveryCaseClaimAndResponseVO tplRcvryCaseClaimAndRespVO = null;
		String SORT_NO = "sortNo", COLUMN = "column";
		recoveryDataBean.setFocusThisId("includeclaimsSortfocus");
		boolean[] sortFlagTemp = new boolean[] { true, true, true, true, true,
				true, true, true, true, true, true, true, true, true, true,
				true, true, true, true, true, true, true, true, true };
		boolean sortOrder = false;
		try 
		{
			FacesContext facesContext = FacesContext.getCurrentInstance();
			Map map = facesContext.getExternalContext().getRequestParameterMap();
			String paramName = map.get(SORT_NO).toString();
			String column = map.get(COLUMN).toString();
			recoveryDataBean.setInclFirstPage(1);
			recoveryDataBean.setInclCurrentPage(1);
			
			sortFlagTemp[Integer.parseInt(paramName)] = false;			
			recoveryDataBean.setInclClaimsSortFlag(sortFlagTemp);
			if ((Integer.parseInt(paramName)) % 2 == 0) {
				sortOrder = true;
			} else {
				sortOrder = false;
			}
			String caseID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
			if(caseID!=null)
			{
				recoveryDataBean.setInclStartRecord(1);
				recoveryDataBean.setInclEndRecord(recoveryDataBean.getInclCurrentPage()*TPLAdministrationConstants.ITEMS_PER_PAGE);
				recoveryDataBean.setInclClmsSortColumn(column);
				recoveryDataBean.setInclClmsSortOrder(sortOrder);
				Long memberSysId=recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getSystemID();
				tplRcvryCaseClaimAndRespVO = tplRecoveryDelegate.getTplRecoveryCaseIncludedClaimsList(
							caseID, memberSysId, recoveryDataBean.getNewIncludedClmList()
							,recoveryDataBean.getRemovedInclClmList(),0,10,column,sortOrder);
				if(tplRcvryCaseClaimAndRespVO !=null){
					List newList = tplRcvryCaseClaimAndRespVO.getNewInclClmsList();
					if(newList!=null){
						recoveryDataBean.setNewIncludedClmList(newList);
					}
					List includedClaimsList = null;
					if(!recoveryDataBean.getModifiedInclClmsList().isEmpty()){
						includedClaimsList = mergeIncludedClaims(tplRcvryCaseClaimAndRespVO);
					}else{
						includedClaimsList =  tplRcvryCaseClaimAndRespVO.getListOfRecoveryIncludedCliamsVO();
					}
					recoveryDataBean.setTplRecoveryIncludedclaimsList(includedClaimsList);
					if(includedClaimsList !=null && includedClaimsList.size()>0){
						setRenderingForIncludeClaims(recoveryDataBean,tplRcvryCaseClaimAndRespVO.getRecordCount(),false);
					}else{
						recoveryDataBean.setInclStartRecord(0);
						recoveryDataBean.setInclEndRecord(0);
					}
				}
			}
		} 
		catch (TPLRecoveryBusinessException e) 
		{
			e.getErrorCode();
			addMessages(e.getMessage());
		}
		catch (Exception e)
		{
			if(logger.isDebugEnabled()){
				logger.debug("Exception::::::::: " + e.getMessage());
			}
		}
	}
	
	
	public void setRenderingForIncludeClaims(TPLRecoveryDataBean recoveryDataBean,
			int recordCount,boolean isFromPagination)
	{
		if(!isFromPagination)
		{	
			recoveryDataBean.setIncludeClaimsCount(recordCount);
			int noOfPages = recoveryDataBean.getIncludeClaimsCount() / 10;
			int modNofPages = recoveryDataBean.getIncludeClaimsCount() % 10;
			if (modNofPages != 0) {
				noOfPages = noOfPages + 1;
			}
			recoveryDataBean.setInclFirstPage(1);
			recoveryDataBean.setInclCurrentPage(1);
			recoveryDataBean.setNumberOfInclClmsPages(noOfPages);
			recoveryDataBean.setInclStartRecord(1);
		}else{
			recoveryDataBean.setInclStartRecord(((recoveryDataBean.getInclCurrentPage()-1)*TPLAdministrationConstants.ITEMS_PER_PAGE)+1);
		}
		if (recoveryDataBean.getInclCurrentPage()<recoveryDataBean.getNumberOfInclClmsPages()) {
			recoveryDataBean.setInclEndRecord(recoveryDataBean.getInclCurrentPage()*TPLAdministrationConstants.ITEMS_PER_PAGE);
		}else {
			recoveryDataBean.setInclEndRecord(recoveryDataBean.getIncludeClaimsCount());
		}		
		//recoveryDataBean.setTplRecoverySearchResults(true);
		if(recoveryDataBean.getNumberOfInclClmsPages()!=1)
		{
			recoveryDataBean.setRenderInclFirstPage(true);
			recoveryDataBean.setRenderInclFirstPagePlusOne(true);
			recoveryDataBean.setShowNextInclClms(false);
			recoveryDataBean.setShowPreviousInclClms(false);
			recoveryDataBean.setRenderInclFirstPagePlusTwo(false);
			if(recoveryDataBean.getInclCurrentPage() != recoveryDataBean.getNumberOfInclClmsPages()){
				recoveryDataBean.setShowNextInclClms(true);
			}
			if (recoveryDataBean.getInclCurrentPage() != 1)  {
				recoveryDataBean.setShowPreviousInclClms(true);
			}
			if(recoveryDataBean.getInclCurrentPage() <= recoveryDataBean.getNumberOfInclClmsPages() 
					&& (recoveryDataBean.getInclFirstPage()+2)<= recoveryDataBean.getNumberOfInclClmsPages()){
				recoveryDataBean.setRenderInclFirstPagePlusTwo(true);
			}
		}else{
			recoveryDataBean.setRenderInclFirstPage(false);
			recoveryDataBean.setRenderInclFirstPagePlusOne(false);
			recoveryDataBean.setRenderInclFirstPagePlusTwo(false);
			recoveryDataBean.setShowNextInclClms(false);
			recoveryDataBean.setShowPreviousInclClms(false);
		}
		if(recoveryDataBean.getInclFirstPage() == recoveryDataBean.getInclCurrentPage()){
			recoveryDataBean.boldPageNumInclude[0] = true;recoveryDataBean.boldPageNumInclude[1] = false;recoveryDataBean.boldPageNumInclude[2] = false;
		}else if(recoveryDataBean.getInclFirstPage()+1 == recoveryDataBean.getInclCurrentPage()){
			recoveryDataBean.boldPageNumInclude[0] = false;recoveryDataBean.boldPageNumInclude[1] = true;recoveryDataBean.boldPageNumInclude[2] = false;
		}else{
			recoveryDataBean.boldPageNumInclude[0] = false;recoveryDataBean.boldPageNumInclude[1] = false;recoveryDataBean.boldPageNumInclude[2] = true;
		}
	}
	 
	 public void inclClmsPageNavigation()
	 {
		 TPLRecoveryDataBean recoveryDataBean = null;
		 TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		 TPLRecoveryCaseClaimAndResponseVO tplRcvryCaseClaimAndRespVO = null;
		 try 
		 {
			 recoveryDataBean = getTPLRecoveryDataBean();
			 recoveryDataBean.setFocusThisId("includeclaimsSortfocus");
			 String caseID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
			 if(caseID!=null){
				 if(setStartIndexForInclClms(recoveryDataBean))
				 {	
					 Long memberSysId=recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseMemberDetailsVO().getSystemID();
					 tplRcvryCaseClaimAndRespVO = tplRecoveryDelegate.getTplRecoveryCaseIncludedClaimsList(
							 		caseID, memberSysId, recoveryDataBean.getNewIncludedClmList(),
							 		recoveryDataBean.getRemovedInclClmList(),
							 		recoveryDataBean.getInclStartRecord(),recoveryDataBean.getInclEndRecord(),
							 		recoveryDataBean.getInclClmsSortColumn(),recoveryDataBean.isInclClmsSortOrder());
					 if(tplRcvryCaseClaimAndRespVO !=null){
						 List newList = tplRcvryCaseClaimAndRespVO.getNewInclClmsList();
						 if(newList!=null){
							 recoveryDataBean.setNewIncludedClmList(newList);
						 }
						 List includedClaimsList = null;
						 if(!recoveryDataBean.getModifiedInclClmsList().isEmpty()){
							 includedClaimsList = mergeIncludedClaims(tplRcvryCaseClaimAndRespVO);
						 }else{
							 includedClaimsList =  tplRcvryCaseClaimAndRespVO.getListOfRecoveryIncludedCliamsVO();
						 }
						 // if(includedClaimsList!=null && recoveryDataBean.getNewIncludedClmList().size()>0)
						 recoveryDataBean.setTplRecoveryIncludedclaimsList(includedClaimsList);
						 setRenderingForIncludeClaims(recoveryDataBean, 
								 tplRcvryCaseClaimAndRespVO.getRecordCount(),true);
					 }
				 }
			 }
		 }catch (TPLRecoveryBusinessException e){
			 e.getErrorCode();
			 addMessages(e.getMessage());
		 }catch (Exception e){
			 e.printStackTrace();
		 }
	 }
	 
	 private boolean setStartIndexForInclClms(TPLRecoveryDataBean recoveryDataBean)
	 {
		    FacesContext facesContext = FacesContext.getCurrentInstance();
			Map map = facesContext.getExternalContext().getRequestParameterMap();
			String linkID = map.get("param").toString();
			
			if("firstPage".equals(linkID)) {
				if(recoveryDataBean.getInclFirstPage() == recoveryDataBean.getInclCurrentPage()) {
					return false;
				}else {
					recoveryDataBean.setInclCurrentPage(recoveryDataBean.getInclFirstPage());
				}
			}else if("firstPagePlusOne".equals(linkID)){
				if((recoveryDataBean.getInclFirstPage()+1) == recoveryDataBean.getInclCurrentPage()) {
					return false;
				}else {
					recoveryDataBean.setInclCurrentPage(recoveryDataBean.getInclFirstPage()+1);
				}
			}else if("firstPagePlusTwo".equals(linkID)){
				if((recoveryDataBean.getInclFirstPage()+2) == recoveryDataBean.getInclCurrentPage()) {
					return false;
				}else {
					recoveryDataBean.setInclCurrentPage(recoveryDataBean.getInclFirstPage()+2);
				}
			}else if("showPrevious".equals(linkID)){
				recoveryDataBean.setInclCurrentPage(recoveryDataBean.getInclCurrentPage()-1);
			}else if("showNext".equals(linkID)){
				recoveryDataBean.setInclCurrentPage(recoveryDataBean.getInclCurrentPage()+1);
			}
			if (recoveryDataBean.getInclCurrentPage() == 1 ||recoveryDataBean.getNumberOfInclClmsPages() == 2)  {
				recoveryDataBean.setInclFirstPage(1);
			}else if(recoveryDataBean.getInclCurrentPage() == recoveryDataBean.getNumberOfInclClmsPages()){
				recoveryDataBean.setInclFirstPage(recoveryDataBean.getInclCurrentPage()-2);
			}else{
				recoveryDataBean.setInclFirstPage(recoveryDataBean.getInclCurrentPage()-1);
			}
			recoveryDataBean.setInclStartRecord((recoveryDataBean.getInclCurrentPage()-1)*TPLAdministrationConstants.ITEMS_PER_PAGE);
			recoveryDataBean.setInclEndRecord(recoveryDataBean.getInclCurrentPage()*TPLAdministrationConstants.ITEMS_PER_PAGE);
			return true;
		}
	 
	 
	public List mergeIncludedClaims(TPLRecoveryCaseClaimAndResponseVO tplRcvryCaseClaimAndRespVO){
		
		List mergeList = null;
		List includeClaimsList = tplRcvryCaseClaimAndRespVO.getListOfRecoveryIncludedCliamsVO();
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		List modifiedInclClmsList = recoveryDataBean.getModifiedInclClmsList();
		if(includeClaimsList!=null && !includeClaimsList.isEmpty()){
			TPLRecoveryCaseIncludedClaimsVO recoveryCaseDetailVO;			
			TPLRecoveryCaseIncludedClaimsVO rcvryIncludedClaimsVO;
			Iterator inclClmsList = includeClaimsList.iterator();
			mergeList = new ArrayList();
			while (inclClmsList.hasNext()){
				recoveryCaseDetailVO = (TPLRecoveryCaseIncludedClaimsVO)inclClmsList.next();
				Iterator modfiedList = modifiedInclClmsList.iterator();
				while (modfiedList.hasNext()){
					rcvryIncludedClaimsVO = (TPLRecoveryCaseIncludedClaimsVO)modfiedList.next();
					if((recoveryCaseDetailVO.getTcn().equalsIgnoreCase(rcvryIncludedClaimsVO.getTcn()))
							&& (recoveryCaseDetailVO.getLi().equals(rcvryIncludedClaimsVO.getLi()))) {
						mergeList.add(rcvryIncludedClaimsVO);
					}else {
						mergeList.add(recoveryCaseDetailVO);
					}
				}
			}
		}else{
			return new ArrayList();
		}

		return mergeList;
	}
	
	//History
	public void sortRecoveryHistory(ActionEvent event)
	{
		TPLRecoveryDataBean recoveryDataBean = getTPLRecoveryDataBean();
		TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		TPLRecoveryResponseHistroyListVO rcvryRespHistroyListVO = null;
		String SORT_NO = "sortNo", COLUMN = "column";
		recoveryDataBean.setFocusThisId("previousBillingHistorySetFocus");
		boolean[] sortFlagTemp = new boolean[] { true, true, true, true, true,
				true, true, true, true, true, true, true, true, true, true,
				true, true, true, true, true, true, true, true, true };
		boolean sortOrder = false;
		try 
		{
			FacesContext facesContext = FacesContext.getCurrentInstance();
			Map map = facesContext.getExternalContext().getRequestParameterMap();
			String paramName = map.get(SORT_NO).toString();
			String column = map.get(COLUMN).toString();
			recoveryDataBean.setRcvryHistFirstPage(1);
			recoveryDataBean.setRcvryHistCurrentPage(1);
			
			sortFlagTemp[Integer.parseInt(paramName)] = false;			
			recoveryDataBean.setRcvyHistorySortFlag(sortFlagTemp);
			if ((Integer.parseInt(paramName)) % 2 == 0) {
				sortOrder = true;
			} else {
				sortOrder = false;
			}
			String caseID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
			if(caseID!=null)
			{
				recoveryDataBean.setRcvryHistStartRecord(1);
				recoveryDataBean.setRcvryHistEndRecord(recoveryDataBean.getRcvryHistCurrentPage()*TPLAdministrationConstants.ITEMS_PER_PAGE);
				recoveryDataBean.setRcvryHistSortColumn(column);
				recoveryDataBean.setRcvryHistSortOrder(sortOrder);
				rcvryRespHistroyListVO = tplRecoveryDelegate.getTPLRecoveryResponseHistory(caseID,0,10,column,sortOrder);
				List RcvryHistList = rcvryRespHistroyListVO.getTPLRecoveryResponseHistoryList();
				recoveryDataBean.setTplRecoveryHistoryList(RcvryHistList);
				if(RcvryHistList !=null && RcvryHistList.size()>0){
					setRenderingForRcvryHist(recoveryDataBean,rcvryRespHistroyListVO,false);
				}else{
					recoveryDataBean.setRcvryHistStartRecord(0);
					recoveryDataBean.setRcvryHistEndRecord(0);
				}
			}
		} 
		catch (TPLRecoveryBusinessException e) 
		{
			e.getErrorCode();
			addMessages(e.getMessage());
		}
		catch (Exception e)
		{
			if(logger.isDebugEnabled()){
				logger.debug("Exception::::::::: " + e.getMessage());
			}
		}
	}
	
	private void setRenderingForRcvryHist(TPLRecoveryDataBean recoveryDataBean,
			TPLRecoveryResponseHistroyListVO rcvryRespHistroyListVO,boolean isFromPagination)
	{
		if(!isFromPagination)
		{
			recoveryDataBean.setRcvryHistCount((int) rcvryRespHistroyListVO.getRecordCount());
			int noOfPages = recoveryDataBean.getRcvryHistCount() / 10;
			int modNofPages = recoveryDataBean.getRcvryHistCount() % 10;
			if (modNofPages != 0) {
				noOfPages = noOfPages + 1;
			}
			recoveryDataBean.setRcvryHistFirstPage(1);
			recoveryDataBean.setRcvryHistCurrentPage(1);
			recoveryDataBean.setNumberOfRcvryHistPages(noOfPages);
			recoveryDataBean.setRcvryHistStartRecord(1);
		}else{
			recoveryDataBean.setRcvryHistStartRecord(((recoveryDataBean.getRcvryHistCurrentPage()-1)*TPLAdministrationConstants.ITEMS_PER_PAGE)+1);
		}
		if (recoveryDataBean.getRcvryHistCurrentPage()<recoveryDataBean.getNumberOfRcvryHistPages()) {
			recoveryDataBean.setRcvryHistEndRecord(recoveryDataBean.getRcvryHistCurrentPage()*TPLAdministrationConstants.ITEMS_PER_PAGE);
		}else {
			recoveryDataBean.setRcvryHistEndRecord(recoveryDataBean.getRcvryHistCount());
		}		
		//recoveryDataBean.setTplRecoverySearchResults(true);
		if(recoveryDataBean.getNumberOfRcvryHistPages()!=1)
		{
			recoveryDataBean.setRenderRcvryHistFirstPage(true);
			recoveryDataBean.setRenderRcvryHistFirstPagePlusOne(true);
			recoveryDataBean.setShowNextRcvryHist(false);
			recoveryDataBean.setShowPreviousRcvryHist(false);
			recoveryDataBean.setRenderRcvryHistFirstPagePlusTwo(false);
			if(recoveryDataBean.getRcvryHistCurrentPage() != recoveryDataBean.getNumberOfRcvryHistPages()){
				recoveryDataBean.setShowNextRcvryHist(true);
			}
			if (recoveryDataBean.getRcvryHistCurrentPage() != 1)  {
				recoveryDataBean.setShowPreviousRcvryHist(true);
			}
			if(recoveryDataBean.getRcvryHistCurrentPage() <= recoveryDataBean.getNumberOfRcvryHistPages() 
					&& (recoveryDataBean.getRcvryHistFirstPage()+2)<= recoveryDataBean.getNumberOfRcvryHistPages()){
				recoveryDataBean.setRenderRcvryHistFirstPagePlusTwo(true);
			}
		}else{
			recoveryDataBean.setRenderRcvryHistFirstPage(false);
			recoveryDataBean.setRenderRcvryHistFirstPagePlusOne(false);
			recoveryDataBean.setRenderRcvryHistFirstPagePlusTwo(false);
			recoveryDataBean.setShowNextRcvryHist(false);
			recoveryDataBean.setShowPreviousRcvryHist(false);
		}
		if(recoveryDataBean.getRcvryHistFirstPage() == recoveryDataBean.getRcvryHistCurrentPage()){
			recoveryDataBean.boldPageNumRcvryHist[0] = true;recoveryDataBean.boldPageNumRcvryHist[1] = false;recoveryDataBean.boldPageNumRcvryHist[2] = false;
		}else if(recoveryDataBean.getRcvryHistFirstPage()+1 == recoveryDataBean.getRcvryHistCurrentPage()){
			recoveryDataBean.boldPageNumRcvryHist[0] = false;recoveryDataBean.boldPageNumRcvryHist[1] = true;recoveryDataBean.boldPageNumRcvryHist[2] = false;
		}else{
			recoveryDataBean.boldPageNumRcvryHist[0] = false;recoveryDataBean.boldPageNumRcvryHist[1] = false;recoveryDataBean.boldPageNumRcvryHist[2] = true;
		}
	}
	 
	 public void rcvryHistPageNavigation()
	 {
		 TPLRecoveryDataBean recoveryDataBean = null;
		 TPLRecoveryDelegate tplRecoveryDelegate = new TPLRecoveryDelegate();
		 TPLRecoveryResponseHistroyListVO rcvryRespHistroyListVO = null;
		 try 
		 {
			 recoveryDataBean = getTPLRecoveryDataBean();
			 recoveryDataBean.setFocusThisId("previousBillingHistorySetFocus");
			 String caseID = recoveryDataBean.getRecoveryCaseDetailVO().getRecoveryCaseVO().getRecoveryCaseID();
			 if(caseID!=null){
				 if(setStartIndexForRcvryHistory(recoveryDataBean))
				 {	
					 rcvryRespHistroyListVO = tplRecoveryDelegate.getTPLRecoveryResponseHistory(
							 caseID,recoveryDataBean.getRcvryHistStartRecord(),recoveryDataBean.getRcvryHistEndRecord(),
							 recoveryDataBean.getRcvryHistSortColumn(),recoveryDataBean.isRcvryHistSortOrder());
					 recoveryDataBean.setTplRecoveryHistoryList(
							 rcvryRespHistroyListVO.getTPLRecoveryResponseHistoryList());
					 setRenderingForRcvryHist(recoveryDataBean,rcvryRespHistroyListVO,true);
				 }
			 }
		 }catch (TPLRecoveryBusinessException e){
			 e.getErrorCode();
			 addMessages(e.getMessage());
		 }catch (Exception e){
			 e.printStackTrace();
		 }
	 }
	 
	 private boolean setStartIndexForRcvryHistory(TPLRecoveryDataBean recoveryDataBean)
	 {
		    FacesContext facesContext = FacesContext.getCurrentInstance();
			Map map = facesContext.getExternalContext().getRequestParameterMap();
			String linkID = map.get("param").toString();
			
			if("firstPage".equals(linkID)) {
				if(recoveryDataBean.getRcvryHistFirstPage() == recoveryDataBean.getRcvryHistCurrentPage()) {
					return false;
				}else {
					recoveryDataBean.setRcvryHistCurrentPage(recoveryDataBean.getRcvryHistFirstPage());
				}
			}else if("firstPagePlusOne".equals(linkID)){
				if((recoveryDataBean.getRcvryHistFirstPage()+1) == recoveryDataBean.getRcvryHistCurrentPage()) {
					return false;
				}else {
					recoveryDataBean.setRcvryHistCurrentPage(recoveryDataBean.getRcvryHistFirstPage()+1);
				}
			}else if("firstPagePlusTwo".equals(linkID)){
				if((recoveryDataBean.getRcvryHistFirstPage()+2) == recoveryDataBean.getRcvryHistCurrentPage()) {
					return false;
				}else {
					recoveryDataBean.setRcvryHistCurrentPage(recoveryDataBean.getRcvryHistFirstPage()+2);
				}
			}else if("showPrevious".equals(linkID)){
				recoveryDataBean.setRcvryHistCurrentPage(recoveryDataBean.getRcvryHistCurrentPage()-1);
			}else if("showNext".equals(linkID)){
				recoveryDataBean.setRcvryHistCurrentPage(recoveryDataBean.getRcvryHistCurrentPage()+1);
			}
			if (recoveryDataBean.getRcvryHistCurrentPage() == 1 ||recoveryDataBean.getNumberOfRcvryHistPages() == 2)  {
				recoveryDataBean.setRcvryHistFirstPage(1);
			}else if(recoveryDataBean.getRcvryHistCurrentPage() == recoveryDataBean.getNumberOfRcvryHistPages()){
				recoveryDataBean.setRcvryHistFirstPage(recoveryDataBean.getRcvryHistCurrentPage()-2);
			}else{
				recoveryDataBean.setRcvryHistFirstPage(recoveryDataBean.getRcvryHistCurrentPage()-1);
			}
			recoveryDataBean.setRcvryHistStartRecord((recoveryDataBean.getRcvryHistCurrentPage()-1)*TPLAdministrationConstants.ITEMS_PER_PAGE);
			recoveryDataBean.setRcvryHistEndRecord(recoveryDataBean.getRcvryHistCurrentPage()*TPLAdministrationConstants.ITEMS_PER_PAGE);
			return true;
		}
	 
	 /**
	   * @param enterpriseBaseDomain
	   * @param auditaleEnterpriseBaseVO
	   * author: Ram
	   */
	 public void createVOAuditKeysList(EnterpriseBaseDomain enterpriseBaseDomain,AuditaleEnterpriseBaseVO  auditaleEnterpriseBaseVO)
	 {
		 List fullAuditList = new ArrayList();
		 if(auditaleEnterpriseBaseVO.getAuditKeyList()!= null){
			 fullAuditList= auditaleEnterpriseBaseVO.getAuditKeyList();
		 }
		 LineItemAuditsDelegate auditDelegate;
		 try {
			 auditDelegate = new LineItemAuditsDelegate();
			 List resultList = auditDelegate.getAuditKeyList(enterpriseBaseDomain);
			 if(resultList!=null){
				 fullAuditList.addAll(resultList);
				 auditaleEnterpriseBaseVO.setAuditKeyList(fullAuditList);
			 }
		 } catch (LineItemAuditsBusinessException e) {
			 e.printStackTrace();
		 }
		 catch (Exception e) {
			 e.printStackTrace();
		 }
	 }
	
	 public TPLRecoveryCaseIncludedClaimsVO removedIncludedClaimsVO(
			 TPLRecoveryCaseMemberClaimSelectionVO  memberClaimSelectionVO,int Li,boolean excludeIndicator){
		    TPLRecoveryCaseIncludedClaimsVO tplRecoveryCaseIncludedClaimsVO = new TPLRecoveryCaseIncludedClaimsVO();
			tplRecoveryCaseIncludedClaimsVO.setTcn(memberClaimSelectionVO.getTcn());
			tplRecoveryCaseIncludedClaimsVO.setClaimType(memberClaimSelectionVO.getClaimType());
			tplRecoveryCaseIncludedClaimsVO.setClaimTypeDesc(memberClaimSelectionVO.getClaimType());
			tplRecoveryCaseIncludedClaimsVO.setSysId(memberClaimSelectionVO.getSysId());
			if (memberClaimSelectionVO.getFdos() != null)
			{
				tplRecoveryCaseIncludedClaimsVO.setFdos(dateformatYYYYMMDD.format(memberClaimSelectionVO.getFdos()));
			}
			tplRecoveryCaseIncludedClaimsVO.setLi(Li);
			if(excludeIndicator)
			{
				tplRecoveryCaseIncludedClaimsVO.setExcludeIndicator(true);
			}else{
				tplRecoveryCaseIncludedClaimsVO.setExcludeIndicator(false);
			}
			tplRecoveryCaseIncludedClaimsVO.setReimbursementAmountStr("0.00");
			tplRecoveryCaseIncludedClaimsVO.setReqAmountStr("0.00");
			tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmountStr("0.00");
			tplRecoveryCaseIncludedClaimsVO.setReimbursementAmount(0.00);
			tplRecoveryCaseIncludedClaimsVO.setReqAmount(0.00);
			tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmount(0.00);
			tplRecoveryCaseIncludedClaimsVO.setProviderChargedAmountStr("0.00");
			tplRecoveryCaseIncludedClaimsVO.setTplRecoveredAmount(0.00);
			tplRecoveryCaseIncludedClaimsVO.setReplacementReason(memberClaimSelectionVO.getReplacementReason());
			return tplRecoveryCaseIncludedClaimsVO;
	 }
	 
	 public List sortMemberClmsByTcn(List listofClaims){
		 FacesContext fc = FacesContext.getCurrentInstance();
		 TPLRecoveryDataBean tplRecoveryDataBean = getTPLRecoveryDataBean();
		 boolean[] sortFlagTemp = new boolean[] { true, true, true, true, true,
				 true, true, true, true, true, true, true }; 
		 try{
			 if(listofClaims !=null && listofClaims.size()>0) {
				 sortFlagTemp[0] = false; 
				 tplRecoveryDataBean.setDataFirst(0);
				 tplRecoveryDataBean.setMemberClaimsSortFlag(sortFlagTemp);
				 ACSComparator.sort(listofClaims, "getTcn", true);
			 }
		 } catch (NumberFormatException e) {
			 e.printStackTrace();
			 if(logger.isDebugEnabled()){
				 logger.debug("NumberFormatException while sortMemberClmsByTcn(): ", e);
			 }
		 }
		 return listofClaims;
	 }
}
