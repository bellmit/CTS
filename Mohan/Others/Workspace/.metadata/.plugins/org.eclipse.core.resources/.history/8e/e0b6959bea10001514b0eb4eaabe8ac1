package com.acs.enterprise.mmis.operations.serviceauthorization.view.rules;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import javax.faces.application.Application;
import javax.faces.component.UIViewRoot;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.acs.enterprise.common.base.common.delegate.EnterpriseBaseDelegate;
import com.acs.enterprise.common.base.view.bean.EnterpriseBaseDataBean;
import com.acs.enterprise.common.program.administration.common.delegate.ReferenceServiceDelegate;
import com.acs.enterprise.common.program.administration.common.domain.ProcedureCodeDetail;
import com.acs.enterprise.common.program.administration.common.domain.ProcedureGeneralIndicators;
import com.acs.enterprise.common.program.administration.common.domain.ProgramBaseDomain;
import com.acs.enterprise.common.program.administration.common.domain.SystemListDetail;
import com.acs.enterprise.common.program.administration.common.vo.InputCriteria;
import com.acs.enterprise.common.security.services.userprofile.EnterpriseUserProfile;
import com.acs.enterprise.mmis.operations.common.domain.EnterpriseClaimLineItem;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.delegate.ServiceAuthDelegate;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.domain.SAClaimUpdatesInfo;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.domain.SAHeaderDiagnosis;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.domain.SALineItemInfo;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.domain.SALineServiceInfo;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.domain.ServiceAuthorization;
import com.acs.enterprise.mmis.operations.serviceauthorization.common.vo.ServiceAuthProcessVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.bean.ServiceAuthControllerBean;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.bean.ServiceAuthDataBean;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.common.ServiceAuthPortletCacheHelper;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.helper.SAMaintenanceUtil;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.helper.SAValidValueHelper;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.helper.ServiceAuthBaseHelper;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.helper.ServiceAuthDataConstants;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.helper.ServiceAuthHelper;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.AmbulanceVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.BasicServicesDetailsVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.ContactInfoVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.DestinationAddrVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.DiagnosisVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.FinalSchedDestAddrVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.HealthCareDeliveryVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.HealthCareServicesReviewVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.HomeChiropracticVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.HomeHealthCareVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.HomeOxygenTherapyVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.LettersVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.LineItemDentalVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.LineItemModifierVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.LineItemToothVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.PatientEventDetailVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.PickUpLocationVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.ProviderDetailsVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.ProviderValidValuesVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.RelatedCausesVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.ServiceAuthHeaderDetailsVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.ServiceAuthLineItemsVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.ServiceAuthRenderingFlagsVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.ServicingProviderVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.SupplementalProviderVO;
import com.acs.enterprise.mmis.operations.serviceauthorization.view.vo.SupplementalServicingProviderVO;
import com.acs.enterprise.mmis.provider.common.domain.AlternateIdInfo;
import com.ibm.icu.text.SimpleDateFormat;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ SAUIRules.class, SAMaintenanceUtil.class,
		ServiceAuthProcessVO.class, ServiceAuthDelegate.class,
		ServiceAuthBaseHelper.class, ServiceAuthHelper.class,
		EnterpriseBaseDelegate.class, SAValidValueHelper.class,
		ProcedureGeneralIndicators.class, ProgramBaseDomain.class,
		ValueChangeEvent.class, ServiceAuthControllerBean.class, ServiceAuthPortletCacheHelper.class })
public class TestSAUIRules {

	@Mock
	EnterpriseBaseDelegate m_EnterpriseBaseDelegate;

	@Test
	public void testExecuteRID_SRA2001_2246_01() {
		SAUIRules sauirules = new SAUIRules();
		sauirules.executeRID_SRA2001_2246_01();
		assertNotNull(sauirules);
	}

	@Test
	public void testExecuteRID_SRA2001_1300_01_true() {
		String lastName = "lastname";
		String validLastName = "lastname";
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_SRA2001_1300_01(lastName,
				validLastName);
		assertEquals(expected, actual);
	}

	/*@Test
	public void testExecuteRID_SRA2001_1300_01_false() {
		String lastName = "lastname";
		String validLastName = "validlastname";
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1300_01(lastName,
				validLastName);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}*/

	@Test
	public void testExecuteRID_SRA2001_1301_01_true() {
		String lastName = "lastname";
		String validLastName = "lastname";
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_SRA2001_1301_01(lastName,
				validLastName);
		assertEquals(expected, actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1301_01_false() {
		String lastName = "lastname";
		String validLastName = "validlastname";
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1301_01(lastName,
				validLastName);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1302_01() {
		String lastName = "middlename";
		String validLastName = "validmiddlename";
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.middlename.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memMILabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1302_01(lastName,
				validLastName);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1303_01_true() {
		String lastName = "suffix";
		String validLastName = "suffix";
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_SRA2001_1303_01(lastName,
				validLastName);
		assertEquals(expected, actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1303_01_false() {
		String lastName = "suffix";
		String validLastName = "validsuffix";
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1303_01(lastName,
				validLastName);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1304_01_true() {
		String Name = "dob";
		String validName = "dob";
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_SRA2001_1304_01(Name, validName);
		assertEquals(expected, actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1304_01_false() {
		String Name = "dob";
		String validName = "validdob";
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1304_01(Name, validName);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1305_01_true() {
		String lastName = "10";
		int validLastName = 10;
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_SRA2001_1305_01(lastName,
				validLastName);
		assertEquals(expected, actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1305_01_false() {
		String lastName = "10";
		int validLastName = 11;
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1305_01(lastName,
				validLastName);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1306_01_true() {
		String gender = "gender";
		String validgender = "gender";
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_SRA2001_1306_01(gender,
				validgender);
		assertEquals(expected, actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1306_01_false() {
		String gender = "gender";
		String validgender = "validgender";
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1306_01(gender,
				validgender);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1307_01_true() {
		String ssn = "ssn";
		String validssn = "ssn";
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_SRA2001_1307_01(ssn, validssn);
		assertEquals(expected, actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1307_01_false() {
		String ssn = "ssn";
		String validssn = "validssn";
		boolean expected = false;
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_1307_01(ssn, validssn);
		assertEquals(expected, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_OPR0032_0001_01DateDate() throws Exception {
		String from = "12/13/2012";
		String to = "12/12/2012";
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		Date fromDate = sdf.parse(from);
		Date toDate = sdf.parse(to);
		boolean expected = true;
		boolean actual = SAUIRules.executeRID_OPR0032_0001_01(fromDate, toDate);
		assertEquals(expected, actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2355_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> list = new ArrayList<Object>();
		list.add(serviceAuthLineItemsVO);
		list.add(serviceAuthLineItemsVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(list);
		SAUIRules.executeRID_SRA2001_2355_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals(serviceAuthLineItemsVO,
				serviceAuthDataBean.getBasicServicesDetailsVO()
						.getServiceAuthLineItemsList().get(0));
	}

	@Test
	public void testExecuteRID_SRA2001_2357_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		String service = "SV1";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO.setServiceLevelList(list);
		PowerMockito.when(m_SAMaintenanceUtil.getDescFromCode(list, service))
				.thenReturn("");
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		SAUIRules.executeRID_SRA2001_2357_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals("", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getServiceLevel());
	}

	@Test
	public void testExecuteRID_SRA2001_2358_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		try{
			BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
			ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
			SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
					.mock(SAMaintenanceUtil.class);
			ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
			List<Object> list = new ArrayList<Object>();
			String service = "SV2";
			serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
			serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
			providerValidValuesVO.setServiceLevelList(list);
			PowerMockito.when(m_SAMaintenanceUtil.getDescFromCode(list, service))
					.thenReturn("");
			basicServicesDetailsVO
					.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
			SAUIRules.executeRID_SRA2001_2358_01(serviceAuthDataBean);
			assertNotNull(list);
			assertEquals("", serviceAuthDataBean.getBasicServicesDetailsVO()
					.getServiceAuthHeaderDetails().getServiceLevel());
		}catch(Exception e){
			assertNotNull(serviceAuthDataBean);
		}
	}

	@Test
	public void testExecuteRID_SRA2001_2359_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		String service = "SV3";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO.setServiceLevelList(list);
		PowerMockito.when(m_SAMaintenanceUtil.getDescFromCode(list, service))
				.thenReturn("");
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		SAUIRules.executeRID_SRA2001_2359_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals("", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getServiceLevel());
	}

	@Test
	public void testExecuteRID_SRA2001_2360_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		String service = "SV1";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO.setServiceLevelList(list);
		PowerMockito.when(m_SAMaintenanceUtil.getDescFromCode(list, service))
				.thenReturn("");
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		SAUIRules.executeRID_SRA2001_2360_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals("", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getServiceLevel());
	}

	@Test
	public void testExecuteRID_SRA2001_2361_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		String service = "SV1";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO.setServiceLevelList(list);
		PowerMockito.when(m_SAMaintenanceUtil.getDescFromCode(list, service))
				.thenReturn("");
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		SAUIRules.executeRID_SRA2001_2361_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals("", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getServiceLevel());
	}

	@Test
	public void testExecuteRID_SRA2001_2119_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
		String dateTimeInString = sdf.format(new Date());
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setEnteredDateTime(dateTimeInString);
		SAUIRules.executeRID_SRA2001_2119_01(serviceAuthDataBean);
		assertNotNull(dateTimeInString);
		assertEquals(serviceAuthHeaderDetails, serviceAuthDataBean
				.getBasicServicesDetailsVO().getServiceAuthHeaderDetails());
	}

	@Test
	public void testExecuteRID_SRA2001_2182_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		list.add(serviceAuthLineItemsVO);
		list.add(serviceAuthLineItemsVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		basicServicesDetailsVO.setServiceAuthLineItemsList(list);
		serviceAuthLineItemsVO
				.setCertificationActionCode("Approved Denied Void");
		serviceAuthHeaderDetails
				.setCertificationActionCode("Approved Denied Void");
		SAUIRules.executeRID_SRA2001_2182_01(serviceAuthDataBean);
		assertEquals("18", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getTrasactionTypeCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2183_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		list.add(serviceAuthLineItemsVO);
		list.add(serviceAuthLineItemsVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		basicServicesDetailsVO.setServiceAuthLineItemsList(list);
		serviceAuthLineItemsVO.setCertificationActionCode("A4");
		serviceAuthHeaderDetails.setCertificationActionCode("A4");
		SAUIRules.executeRID_SRA2001_2183_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals("19", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getTrasactionTypeCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2184_01() {
		PowerMockito.mockStatic(SAMaintenanceUtil.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO.setTrasactionTypeList(list);
		PowerMockito.when(SAMaintenanceUtil.getLabelFromSystemList(list, "RU"))
				.thenReturn("test");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		SAUIRules.executeRID_SRA2001_2184_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals("RU", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getTrasactionTypeCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2118_01() {
		PowerMockito.mockStatic(SAMaintenanceUtil.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO.setTrasactionPruposeList(list);
		PowerMockito.when(SAMaintenanceUtil.getLabelFromSystemList(list, "13"))
				.thenReturn("test");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		SAUIRules.executeRID_SRA2001_2118_01(serviceAuthDataBean);
		assertNotNull(list);
		assertEquals("test", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getTrasactionPurpose());
	}

	@Test
	public void testExecuteRID_OPR0048_0001_01_EnterpriseSystemException()
			throws Exception {
		ServiceAuthProcessVO serviceAuthProcessVO = new ServiceAuthProcessVO();
		String memberID = "memberID";
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthDelegate.class,
						"validateMemberID")).toReturn(serviceAuthProcessVO);
		SAUIRules.executeRID_OPR0048_0001_01(memberID);
		assertNotNull(memberID);
	}

	@Test
	public void testExecuteRID_SRA2001_1300_01_External_True() {
		String lastName = "lastname";
		String validLastName = "lastname";
		SAUIRules.executeRID_SRA2001_1300_01_External(lastName, validLastName);
		assertEquals(lastName, validLastName);
	}

	@Test
	public void testExecuteRID_SRA2001_1300_01_External_False() {
		String lastName = "lastname";
		String validLastName = "validlastname";
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_1300_01_External(lastName, validLastName);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1301_01_External_True() {
		String lastName = "firstname";
		String validLastName = "firstname";
		SAUIRules.executeRID_SRA2001_1301_01_External(lastName, validLastName);
		assertEquals(lastName, validLastName);
	}

	@Test
	public void testExecuteRID_SRA2001_1301_01_External_False() {
		String Name = "firstname";
		String validName = "firstlastname";
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_1301_01_External(Name, validName);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_1304_01_External_True() {
		String Name = "dob";
		String validName = "dob";
		SAUIRules.executeRID_SRA2001_1304_01_External(Name, validName);
		assertEquals(Name, validName);
	}

	@Test
	public void testExecuteRID_SRA2001_1304_01_External_False() {
		String Name = "dob";
		String validName = "validdob";
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.lastname.invalid",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"memLastNameLabel");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_1304_01_External(Name, validName);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2112_01_True() {
		PowerMockito.mockStatic(SAMaintenanceUtil.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		SelectItem selectitem = new SelectItem();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		List<Object> list = new ArrayList<Object>();
		list.add(selectitem);
		list.add(selectitem);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("currentStatus");
		serviceAuthDataBean.setLineItemStatusCodeNotList(list);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2112_01(serviceAuthDataBean);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2112_01_False() {
		PowerMockito.mockStatic(SAMaintenanceUtil.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		SelectItem selectItem = new SelectItem();
		List<Object> list = new ArrayList<Object>();
		list.add(selectItem);
		selectItem.setValue("currentStatus");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("currentStatus");
		serviceAuthDataBean.setLineItemStatusCodeNotList(list);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2112_01(serviceAuthDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2113_01_True() {
		PowerMockito.mockStatic(SAMaintenanceUtil.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SelectItem selectitem = new SelectItem();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		List<Object> list = new ArrayList<Object>();
		list.add(selectitem);
		list.add(selectitem);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setStatus("selectitem");
		serviceAuthDataBean.setLineItemStatusCodeNotList(list);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"err.salistatus.notpresent",
						"prv_ss_serviceauthorizationdetails.nl.PRV_SS_ServiceAuthorizationDetailsPortletResource",
						"status");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_SRA2001_2113_01(
				serviceAuthDataBean, "portletNamespace");
		assertTrue(actual);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2113_01_False() {
		PowerMockito.mockStatic(SAMaintenanceUtil.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		SelectItem selectItem = new SelectItem();
		List<Object> list = new ArrayList<Object>();
		list.add(selectItem);
		selectItem.setValue("selectitem");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setStatus("selectitem");
		serviceAuthDataBean.setLineItemStatusCodeNotList(list);
		boolean actual = SAUIRules.executeRID_SRA2001_2113_01(
				serviceAuthDataBean, "portletNamespace");
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2332_01ServicingProviderVO() {
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		servicingProviderVO.setEntityCode("");
		servicingProviderVO.setProviderID("providerID");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"error.required.entityCode",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"servicingproviderEntityCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2332_01(servicingProviderVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2333_01() {
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		servicingProviderVO.setEntityCode("");
		servicingProviderVO.setProviderID("providerID");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"error.required.entityCode",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"servicingproviderEntityCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2333_01(servicingProviderVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_OPR0005_0001_01() {
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"error.required.entityCode",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"servicingproviderEntityCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_OPR0005_0001_01("", "ProviderIDType");
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_OPR0006_0001_01() {
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"error.required.entityCode",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"servicingproviderEntityCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_OPR0006_0001_01("ProviderID", "");
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2335_01() {
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		String errorMesg = "error.taxanomy";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		servicingProviderVO.setEntityCode("servicingproviderEntityCode");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(errorMesg, bundleName,
						"servicingproviderEntityCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2335_01(servicingProviderVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2335_01_False_DD() {
		SAUIRules sauiRules = new SAUIRules();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		servicingProviderVO.setEntityCode("DD");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2335_01(servicingProviderVO);
		assertNotNull(sauiRules);
	}

	@Test
	public void testExecuteRID_SRA2001_2335_01_False_72() {
		SAUIRules sauiRules = new SAUIRules();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		servicingProviderVO.setEntityCode("72");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2335_01(servicingProviderVO);
		assertNotNull(sauiRules);
	}

	@Test
	public void testExecuteRID_SRA2001_2335_01_False_DK() {
		SAUIRules sauiRules = new SAUIRules();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		servicingProviderVO.setEntityCode("DK");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2335_01(servicingProviderVO);
		assertNotNull(sauiRules);
	}

	@Test
	public void testExecuteRID_SRA2001_2335_01_False_73() {
		SAUIRules sauiRules = new SAUIRules();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		servicingProviderVO.setEntityCode("73");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2335_01(servicingProviderVO);
		assertNotNull(sauiRules);

	}

	@Test
	public void testExecuteRID_SRA2001_2335_01_False_P3() {
		SAUIRules sauiRules = new SAUIRules();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		servicingProviderVO.setEntityCode("P3");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2335_01(servicingProviderVO);
		assertNotNull(sauiRules);
	}

	@Test
	public void testExecuteRID_SRA2001_2335_01_False_SJ() {
		SAUIRules sauiRules = new SAUIRules();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		servicingProviderVO.setEntityCode("SJ");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2335_01(servicingProviderVO);
		assertNotNull(sauiRules);

	}

	@Test
	public void testExecuteRID_SRA2001_2161_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("AAJ");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2161_01(serviceAuthDataBean, sectionName);
		assertEquals("AD", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2161_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("AAJ");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2161_01(serviceAuthDataBean, sectionName);
		assertEquals("AD", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2163_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("DD");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2163_01(serviceAuthDataBean, sectionName);
		assertEquals("AS", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2163_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("DD");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2163_01(serviceAuthDataBean, sectionName);
		assertEquals("AS", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2165_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("71");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2165_01(serviceAuthDataBean, sectionName);
		assertEquals(eventProviderDetailsVO.getProviderCode(), "AT");
	}

	@Test
	public void testExecuteRID_SRA2001_2165_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("71");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2165_01(serviceAuthDataBean, sectionName);
		assertEquals("AT", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2167_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("72");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2167_01(serviceAuthDataBean, sectionName);
		assertEquals("OP", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2167_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("72");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2167_01(serviceAuthDataBean, sectionName);
		assertEquals("OP", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2169_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("DK");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2169_01(serviceAuthDataBean, sectionName);
		assertEquals("OR", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2169_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("DK");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2169_01(serviceAuthDataBean, sectionName);
		assertEquals("OR", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2171_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("73");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2171_01(serviceAuthDataBean, sectionName);
		assertEquals("OT", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2171_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("73");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2171_01(serviceAuthDataBean, sectionName);
		assertEquals("OT", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2173_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("P3");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2173_01(serviceAuthDataBean, sectionName);
		assertEquals("PC", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2173_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("P3");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2173_01(serviceAuthDataBean, sectionName);
		assertEquals("PC", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2175_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("SJ");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2175_01(serviceAuthDataBean, sectionName);
		assertEquals("PE", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2175_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("SJ");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2175_01(serviceAuthDataBean, sectionName);
		assertEquals("PE", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2177_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setEntityCode("DN");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2177_01(serviceAuthDataBean, sectionName);
		assertEquals("RF", eventProviderDetailsVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2177_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setEntityCode("DN");
		servicingProviderVO.setTaxonomyCode("taxonomyCode");
		SAUIRules.executeRID_SRA2001_2177_01(serviceAuthDataBean, sectionName);
		assertEquals("RF", servicingProviderVO.getProviderCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2122_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		SAUIRules.executeRID_SRA2001_2122_01(serviceAuthDataBean);
		assertEquals("1P", requestingProviderDetailsVO.getEntityCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2123_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "requestingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		SAUIRules.executeRID_SRA2001_2123_01(serviceAuthDataBean, sectionName);
		assertEquals("1", requestingProviderDetailsVO.getEntityType());
	}

	@Test
	public void testExecuteRID_SRA2001_2123_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		String sectionName = "eventProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		SAUIRules.executeRID_SRA2001_2123_01(serviceAuthDataBean, sectionName);
		assertEquals("1", eventProviderDetailsVO.getEntityType());
	}

	@Test
	public void testExecuteRID_SRA2001_2123_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		String sectionName = "servicingProvider";
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		SAUIRules.executeRID_SRA2001_2123_01(serviceAuthDataBean, sectionName);
		assertEquals("1", servicingProviderVO.getEntityType());
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_RQ_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("24");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("EI");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_RQ(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_RQ_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("24");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_RQ(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_RQ_2_True() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("24");
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("EI");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_RQ(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_RQ_2_False() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("24");
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_RQ(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_EV_01_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("24");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("EI");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_EV_01_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("24");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_EV_2_True() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("24");
		eventProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("EI");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_EV_2_False() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("24");
		eventProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_SV_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("24");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("EI");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_SV_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("24");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_SV_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("24");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("EI");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2185_01_SV_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("24");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2185_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_RQ_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("34");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_RQ(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_RQ_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("34");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("providerId");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_RQ(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_RQ_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("34");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		list.add(supplementalProviderVO);
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_RQ(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_RQ_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("34");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		list.add(supplementalProviderVO);
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("providerId");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_RQ(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_EV_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("34");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_EV_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("34");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_EV_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("34");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		eventProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_EV_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("34");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		eventProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_SV_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("34");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_SV_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("34");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_SV_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("34");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2186_01_SV_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("34");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2186_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_RQ_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("TJ");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("TJ");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_RQ(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_RQ_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("TJ");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_RQ(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_RQ_2_True() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("TJ");
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("TJ");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_RQ(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_RQ_2_False() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("TJ");
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_RQ(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_EV_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("TJ");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("TJ");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_EV_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("TJ");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("provider");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_EV_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("TJ");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		eventProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("TJ");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_EV_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("TJ");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		eventProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("pro");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_SV_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("TJ");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("TJ");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_SV_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("TJ");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_SV_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("TJ");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("TJ");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2187_01_SV_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("TJ");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2187_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_RQ_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("SY");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_RQ(
				serviceAuthDataBean, level);
		assertEquals(requestingProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getRequestingProviderDetailsVO());
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_RQ_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("SY");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_RQ(
				serviceAuthDataBean, level);
		assertEquals(requestingProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getRequestingProviderDetailsVO());
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_RQ_2_True() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("SY");
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_RQ(
				serviceAuthDataBean, level);
		assertEquals(requestingProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getRequestingProviderDetailsVO());
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_RQ_2_False() {
		String level = "mainLevel";
		List<Object> list = new ArrayList<Object>();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("SY");
		requestingProviderDetailsVO.setSupplementalProviderList(list);
		list.add(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_RQ(
				serviceAuthDataBean, level);
		assertFalse(actual);
		assertEquals(requestingProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getRequestingProviderDetailsVO());
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_EV_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("SY");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
		assertEquals(eventProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getEventProviderDetailsVO());
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_EV_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("SY");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
		assertEquals(eventProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getEventProviderDetailsVO());
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_EV_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("SY");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		eventProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_EV(
				serviceAuthDataBean, level);
		assertTrue(actual);
		assertEquals(eventProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getEventProviderDetailsVO());
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_EV_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("SY");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalProviderVO);
		eventProviderDetailsVO.setSupplementalProviderList(list);
		supplementalProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_EV(
				serviceAuthDataBean, level);
		assertFalse(actual);
		assertEquals(eventProviderDetailsVO, serviceAuthDataBean
				.getBasicServicesDetailsVO().getEventProviderDetailsVO());
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_SV_1_True() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("SY");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_SV_1_False() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderIDType("SY");
		servicingProviderVO
				.setSupplementalServicingProviderVO(supplementalServicingProviderVO);
		supplementalServicingProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_SV_2_True() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("SY");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("SY");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_SV(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2188_01_SV_2_False() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderDetailsVO = new ServicingProviderVO();
		SupplementalServicingProviderVO supplementalServicingProviderVO = new SupplementalServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO
				.setServicingProviderVO(servicingProviderDetailsVO);
		servicingProviderDetailsVO.setProviderIDType("SY");
		List<Object> list = new ArrayList<Object>();
		list.add(supplementalServicingProviderVO);
		servicingProviderDetailsVO
				.setSupplementalServicingProviderLineItemList(list);
		supplementalServicingProviderVO.setProviderIDType("test");
		boolean actual = SAUIRules.executeRID_SRA2001_2188_01_SV(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2124_01_True() {
		List<Integer> supplnReqProvList = new ArrayList<Integer>();
		supplnReqProvList.add(1);
		supplnReqProvList.add(2);
		supplnReqProvList.add(3);
		supplnReqProvList.add(4);
		supplnReqProvList.add(5);
		supplnReqProvList.add(6);
		supplnReqProvList.add(7);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2124_01(supplnReqProvList);
		assertTrue(actual);
		assertEquals(7, supplnReqProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2124_01_False() {
		List<Integer> supplnReqProvList = new ArrayList<Integer>();
		supplnReqProvList.add(1);
		supplnReqProvList.add(2);
		supplnReqProvList.add(3);
		supplnReqProvList.add(4);
		supplnReqProvList.add(5);
		supplnReqProvList.add(6);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2124_01(supplnReqProvList);
		assertFalse(actual);
		assertEquals(6, supplnReqProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2148_01_True() {
		List<Integer> supplnReqProvList = new ArrayList<Integer>();
		supplnReqProvList.add(1);
		supplnReqProvList.add(2);
		supplnReqProvList.add(3);
		supplnReqProvList.add(4);
		supplnReqProvList.add(5);
		supplnReqProvList.add(6);
		supplnReqProvList.add(7);
		supplnReqProvList.add(1);
		supplnReqProvList.add(2);
		supplnReqProvList.add(3);
		supplnReqProvList.add(4);
		supplnReqProvList.add(5);
		supplnReqProvList.add(6);
		supplnReqProvList.add(7);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2148_01(supplnReqProvList);
		assertTrue(actual);
		assertEquals(14, supplnReqProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2148_01_False() {
		List<Integer> supplnReqProvList = new ArrayList<Integer>();
		supplnReqProvList.add(1);
		supplnReqProvList.add(2);
		supplnReqProvList.add(3);
		supplnReqProvList.add(4);
		supplnReqProvList.add(5);
		supplnReqProvList.add(6);
		supplnReqProvList.add(7);
		supplnReqProvList.add(1);
		supplnReqProvList.add(2);
		supplnReqProvList.add(3);
		supplnReqProvList.add(4);
		supplnReqProvList.add(5);
		supplnReqProvList.add(6);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2148_01(supplnReqProvList);
		assertFalse(actual);
		assertEquals(13, supplnReqProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2329_01_1() {
		String sectionName = "eventProvider";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);

		SAUIRules.executeRID_SRA2001_2329_01(serviceAuthDataBean, sectionName);
		assertEquals("SJ", eventProviderDetailsVO.getEntityCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2329_01_2() {
		String sectionName = "servicingProvider";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);

		SAUIRules.executeRID_SRA2001_2329_01(serviceAuthDataBean, sectionName);
		assertEquals("SJ", servicingProviderVO.getEntityCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2330_01_True() {
		String entityCode = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2330_01(entityCode);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2330_01_False() {
		String entityCode = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2330_01(entityCode);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2331_01_True() {
		String entityCode = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2331_01(entityCode);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2331_01_False() {
		String entityCode = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2331_01(entityCode);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2337_01_True() {
		String provId = "";
		String provIdType = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2337_01(provId,
				provIdType);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2337_01_False() {
		String provId = "test";
		String provIdType = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2337_01(provId,
				provIdType);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2338_01_True() {
		String provId = "test";
		String provIdType = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2338_01(provId,
				provIdType);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2338_01_False() {
		String provId = "";
		String provIdType = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2338_01(provId,
				provIdType);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2334_01_True() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		eventProviderDetailsVO.setEntityCode("entitycode");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2334_01(serviceAuthDataBean);

		assertTrue(actual);
		assertEquals("entitycode", eventProviderDetailsVO.getEntityCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2334_01_False() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		eventProviderDetailsVO.setEntityCode("AAJ");

		boolean actual = SAUIRules
				.executeRID_SRA2001_2334_01(serviceAuthDataBean);
		assertFalse(actual);
		assertEquals("taxonomyCode", eventProviderDetailsVO.getTaxonomyCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2310_01_True() {
		String provId = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2310_01(provId);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2310_01_False() {
		String provId = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2310_01(provId);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2311_01_True() {
		String provId = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2311_01(provId);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2311_01_False() {
		String provId = "test";
		boolean actual = SAUIRules.executeRID_SRA2001_2311_01(provId);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2314_01_True_1() {
		String provIdType = "0B";
		String licenseState = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2314_01(provIdType,
				licenseState);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2314_01_True_2() {
		String provIdType = "OB";
		String licenseState = "";
		boolean actual = SAUIRules.executeRID_SRA2001_2314_01(provIdType,
				licenseState);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2314_01_False() {
		String provIdType = "";
		String licenseState = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2314_01(provIdType,
				licenseState);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2149_01_True() {
		List<Integer> supplnEventProvList = new ArrayList<Integer>();
		supplnEventProvList.add(1);
		supplnEventProvList.add(2);
		supplnEventProvList.add(3);
		supplnEventProvList.add(4);
		supplnEventProvList.add(5);
		supplnEventProvList.add(6);
		supplnEventProvList.add(7);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2149_01(supplnEventProvList);
		assertTrue(actual);
		assertEquals(7, supplnEventProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2149_01_False() {
		List<Integer> supplnEventProvList = new ArrayList<Integer>();
		supplnEventProvList.add(1);
		supplnEventProvList.add(2);
		supplnEventProvList.add(3);
		supplnEventProvList.add(4);
		supplnEventProvList.add(5);
		supplnEventProvList.add(6);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2149_01(supplnEventProvList);
		assertFalse(actual);
		assertEquals(6, supplnEventProvList.size());
	}

	@Test
	public void testExecuteRID_OPR0013_0001_01_True() {
		String facilityType = "";
		String facilityTypeQualifier = "";

		boolean actual = SAUIRules.executeRID_OPR0013_0001_01(facilityType,
				facilityTypeQualifier);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_OPR0013_0001_01_False() {
		String facilityType = "test1";
		String facilityTypeQualifier = "";

		boolean actual = SAUIRules.executeRID_OPR0013_0001_01(facilityType,
				facilityTypeQualifier);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_OPR0012_0001_01_True() {
		String facilityType = "";
		String facilityTypeQualifier = "";

		boolean actual = SAUIRules.executeRID_OPR0012_0001_01(facilityType,
				facilityTypeQualifier);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_OPR0012_0001_01_False() {
		String facilityType = "";
		String facilityTypeQualifier = "test1";

		boolean actual = SAUIRules.executeRID_OPR0012_0001_01(facilityType,
				facilityTypeQualifier);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_OPR0071_0001_01_True() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		List<Integer> diagnosisList = new ArrayList<Integer>();
		diagnosisList.add(1);
		diagnosisList.add(2);
		diagnosisList.add(3);
		diagnosisList.add(4);
		diagnosisList.add(5);
		diagnosisList.add(6);
		diagnosisList.add(7);
		diagnosisList.add(8);
		diagnosisList.add(9);
		diagnosisList.add(10);
		diagnosisList.add(11);

		boolean actual = SAUIRules.executeRID_OPR0071_0001_01(diagnosisList,
				serviceAuthDataBean);
		assertTrue(actual);
		assertEquals(11, diagnosisList.size());
	}

	@Test
	public void testExecuteRID_OPR0071_0001_01_False() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		String errorMsg = "err.opr.sra.diagnosiscode.max";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		List<Integer> diagnosisList = new ArrayList<Integer>();
		diagnosisList.add(1);
		diagnosisList.add(2);
		diagnosisList.add(3);
		diagnosisList.add(4);
		diagnosisList.add(5);
		diagnosisList.add(6);
		diagnosisList.add(7);
		diagnosisList.add(8);
		diagnosisList.add(9);
		diagnosisList.add(10);
		diagnosisList.add(11);
		diagnosisList.add(12);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(errorMsg, bundleName,
						"diagnosisCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);

		boolean actual = SAUIRules.executeRID_OPR0071_0001_01(diagnosisList,
				serviceAuthDataBean);
		assertFalse(actual);
		assertEquals(12, diagnosisList.size());
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2216_01_True() {
		ContactInfoVO contactVO = new ContactInfoVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		String htmlElementIdPrefix = "test";
		String thirdString = "testemail";
		String errorMsg = "error.three.contactfields.required";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("email");
		PowerMockito.doNothing().when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(errorMsg, bundleName, thirdString);
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		boolean actual = SAUIRules.executeRID_SRA2001_2216_01(contactVO,
				htmlElementIdPrefix);
		assertTrue(actual);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2216_01_False() {
		ContactInfoVO contactVO = new ContactInfoVO();
		String htmlElementIdPrefix = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2216_01(contactVO,
				htmlElementIdPrefix);
		assertFalse(actual);

	}

	@Test
	public void testExecuteRID_SRA2001_2219_01_True() {
		ContactInfoVO contactVO = new ContactInfoVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		String htmlElementIdPrefix = "test";
		String thirdString = "testphone";
		String errorMsg = "error.phoneno.required";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		contactVO.setPhone("");
		contactVO.setExtension("extension");
		PowerMockito.doNothing().when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(errorMsg, bundleName, thirdString);
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		boolean actual = SAUIRules.executeRID_SRA2001_2219_01(contactVO,
				htmlElementIdPrefix);
		assertTrue(actual);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2219_01_False() {
		ContactInfoVO contactVO = new ContactInfoVO();
		String htmlElementIdPrefix = "test";
		contactVO.setPhone("phone");
		contactVO.setExtension("");

		boolean actual = SAUIRules.executeRID_SRA2001_2219_01(contactVO,
				htmlElementIdPrefix);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2312_01() {
		SupplementalServicingProviderVO suppVO = new SupplementalServicingProviderVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		String errorMsg = "error.supp.providerid.required";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		String htmlElementIdPrefix = "test";
		String thirdString = "testproviderID";
		suppVO.setProviderID("");
		PowerMockito.doNothing().when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(errorMsg, bundleName, thirdString);
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2312_01(suppVO, htmlElementIdPrefix);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2313_01() {
		SupplementalServicingProviderVO suppVO = new SupplementalServicingProviderVO();
		try{
			SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
					.mock(SAMaintenanceUtil.class);
			FacesContext m_FacesContext = ContextMocker.mockFacesContext();
			UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
			Application m_Application = PowerMockito.mock(Application.class);
			Locale m_Locale = PowerMockito.mock(Locale.class);
			String errorMsg = "error.supp.providerid.type.required";
			String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
			String htmlElementIdPrefix = "test";
			String thirdString = "testproviderIDType";
			suppVO.setProviderID("");
			PowerMockito.doNothing().when(m_SAMaintenanceUtil)
					.setFieldCustomErrMessage(errorMsg, bundleName, thirdString);
			PowerMockito.when(m_FacesContext.getViewRoot())
					.thenReturn(m_UIViewRoot);
			PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
			PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
					m_Application);
			PowerMockito
					.doNothing()
					.when(m_Application)
					.setMessageBundle(
							"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

			SAUIRules.executeRID_SRA2001_2313_01(suppVO, htmlElementIdPrefix);
			Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
			Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
			Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
			Mockito.verify(m_Application);
		}catch(Exception e){
			assertFalse(false);
		}
	}

	@Test
	public void testExecuteRID_SRA2001_2315_01_1() {
		SupplementalServicingProviderVO suppVO = new SupplementalServicingProviderVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		String errorMsg = "error.supp.licensestate.required";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		suppVO.setProviderID("providerID");
		suppVO.setProviderIDType("0B");
		suppVO.setLicenseState("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(errorMsg, bundleName,
						"servProvSupplnLicenseState");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2315_01(suppVO);
//		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
//		Mockito.verify(m_FacesContext, Mockito.times(2)).getViewRoot();
//		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
//		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2315_01_2() {
		SupplementalServicingProviderVO suppVO = new SupplementalServicingProviderVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		String errorMsg = "error.supp.licensestate.required";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		suppVO.setProviderID("providerID");
		suppVO.setProviderIDType("OB");
		suppVO.setLicenseState("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(errorMsg, bundleName,
						"servProvSupplnLicenseState");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2315_01(suppVO);
//		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
//		Mockito.verify(m_FacesContext, Mockito.times(2)).getViewRoot();
//		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
//		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_OPR0049_0001_01() throws Exception, Exception {
		String errorMsg1 = "err.opr.sra.renderingnotfound";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		servicingProviderVO.setProviderID("providerID");
		servicingProviderVO.setProviderIDType("XX");
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthDelegate.class,
						"getProviderExistFlag")).toReturn(false);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(errorMsg1, bundleName,
						"servicingproviderProvId");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_OPR0049_0001_01(serviceAuthDataBean);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2108_01_DM() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		serviceAuthHeaderDetails.setAuthType("DM");
		List<Object> saCategoryCodeListForDME = new ArrayList<Object>();
		List<Object> lineItemServiceCodeTypeListNonIP = new ArrayList<Object>();
		serviceAuthDataBean
				.setSaCategoryCodeListForDME(saCategoryCodeListForDME);
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		serviceAuthDataBean
				.setLineItemServiceCodeTypeListNonIP(lineItemServiceCodeTypeListNonIP);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);

		SAUIRules.executeRID_SRA2001_2108_01(serviceAuthDataBean);
		assertEquals("0", serviceAuthLineItemsVO.getServiceTypeCode());
		assertEquals(false, renderingFlagsVO.isFromservicecodeflag());
		assertEquals(false, renderingFlagsVO.isFrommodifiersflag());
	}

	@Test
	public void testExecuteRID_SRA2001_2108_01_DE() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		serviceAuthHeaderDetails.setAuthType("DE");
		List<Object> saCategoryCodeListForDME = new ArrayList<Object>();
		List<Object> lineItemServiceCodeTypeListNonIP = new ArrayList<Object>();
		serviceAuthDataBean
				.setSaCategoryCodeListForDME(saCategoryCodeListForDME);
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		serviceAuthDataBean
				.setLineItemServiceCodeTypeListNonIP(lineItemServiceCodeTypeListNonIP);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);

		SAUIRules.executeRID_SRA2001_2108_01(serviceAuthDataBean);
		assertEquals("0", serviceAuthLineItemsVO.getServiceTypeCode());
		assertEquals(false, renderingFlagsVO.isFromservicecodeflag());
		assertEquals(false, renderingFlagsVO.isFrommodifiersflag());
	}

	@Test
	public void testExecuteRID_SRA2001_2108_01_MD() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		serviceAuthHeaderDetails.setAuthType("MD");
		List<Object> saCategoryCodeListForDME = new ArrayList<Object>();
		List<Object> lineItemServiceCodeTypeListNonIP = new ArrayList<Object>();
		serviceAuthDataBean
				.setSaCategoryCodeListForDME(saCategoryCodeListForDME);
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		serviceAuthDataBean
				.setLineItemServiceCodeTypeListNonIP(lineItemServiceCodeTypeListNonIP);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);

		SAUIRules.executeRID_SRA2001_2108_01(serviceAuthDataBean);
		assertEquals("0", serviceAuthLineItemsVO.getServiceTypeCode());
		assertEquals(false, renderingFlagsVO.isFromservicecodeflag());
		assertEquals(false, renderingFlagsVO.isFrommodifiersflag());
	}

	@Test
	public void testExecuteRID_SRA2001_2108_01_HC() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		serviceAuthHeaderDetails.setAuthType("HC");
		List<Object> saCategoryCodeListForDME = new ArrayList<Object>();
		List<Object> lineItemServiceCodeTypeListNonIP = new ArrayList<Object>();
		serviceAuthDataBean
				.setSaCategoryCodeListForDME(saCategoryCodeListForDME);
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		serviceAuthDataBean
				.setLineItemServiceCodeTypeListNonIP(lineItemServiceCodeTypeListNonIP);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);

		SAUIRules.executeRID_SRA2001_2108_01(serviceAuthDataBean);
		assertEquals("0", serviceAuthLineItemsVO.getServiceTypeCode());
		assertEquals(false, renderingFlagsVO.isFromservicecodeflag());
		assertEquals(false, renderingFlagsVO.isFrommodifiersflag());
	}

	@Test
	public void testExecuteRID_SRA2001_2108_01_IP() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		serviceAuthHeaderDetails.setAuthType("IP");
		List<Object> saCategoryCodeListForDME = new ArrayList<Object>();
		List<Object> lineItemServiceCodeTypeListNonIP = new ArrayList<Object>();
		serviceAuthDataBean
				.setSaCategoryCodeListForDME(saCategoryCodeListForDME);
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		serviceAuthDataBean
				.setLineItemServiceCodeTypeListNonIP(lineItemServiceCodeTypeListNonIP);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);

		SAUIRules.executeRID_SRA2001_2108_01(serviceAuthDataBean);
		assertEquals("3", serviceAuthLineItemsVO.getServiceTypeCode());
		assertEquals(false, renderingFlagsVO.isFromservicecodeflag());
		assertEquals(false, renderingFlagsVO.isFrommodifiersflag());
	}

	@Test
	public void testExecuteRID_SRA2001_2104_01_valueA() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		String selectedValue = "A";
		List<Object> reasonCodeListForApproved = new ArrayList<Object>();
		serviceAuthDataBean
				.setReasonCodeListForApproved(reasonCodeListForApproved);

		SAUIRules
				.executeRID_SRA2001_2104_01(selectedValue, serviceAuthDataBean);
		assertEquals(serviceAuthDataBean.getLineItemReasonCodeList(),
				reasonCodeListForApproved);
	}

	@Test
	public void testExecuteRID_SRA2001_2104_01_valueD() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		String selectedValue = "D";
		List<Object> reasonCodeListForDenied = new ArrayList<Object>();
		serviceAuthDataBean.setReasonCodeListForDenied(reasonCodeListForDenied);

		SAUIRules
				.executeRID_SRA2001_2104_01(selectedValue, serviceAuthDataBean);
		assertEquals(reasonCodeListForDenied,
				serviceAuthDataBean.getLineItemReasonCodeList());
	}

	@Test
	public void testExecuteRID_SRA2001_2104_01_valueP() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		String selectedValue = "P";
		List<Object> reasonCodeListForPended = new ArrayList<Object>();
		serviceAuthDataBean.setReasonCodeListForPended(reasonCodeListForPended);

		SAUIRules
				.executeRID_SRA2001_2104_01(selectedValue, serviceAuthDataBean);
		assertEquals(reasonCodeListForPended,
				serviceAuthDataBean.getLineItemReasonCodeList());
	}

	@Test
	public void testExecuteRID_SRA2001_2104_01_valueV() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		String selectedValue = "V";
		List<Object> reasonCodeListForVoided = new ArrayList<Object>();
		serviceAuthDataBean.setReasonCodeListForVoided(reasonCodeListForVoided);

		SAUIRules
				.executeRID_SRA2001_2104_01(selectedValue, serviceAuthDataBean);
		assertEquals(reasonCodeListForVoided,
				serviceAuthDataBean.getLineItemReasonCodeList());
	}

	@Test
	public void testExecuteRID_SRA2001_2321_01ServiceAuthDataBean() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setRequestedUnits("requestedUnits");
		serviceAuthLineItemsVO.setUnitsOfMeasure("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"unitsof-measure-required",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"unitOfMeasure");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2321_01(serviceAuthDataBean);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2204_01_True() {
		List<Integer> supplnServProvList = new ArrayList<Integer>();
		supplnServProvList.add(1);
		supplnServProvList.add(2);
		supplnServProvList.add(3);
		supplnServProvList.add(4);
		supplnServProvList.add(5);
		supplnServProvList.add(6);
		supplnServProvList.add(7);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2204_01(supplnServProvList);
		assertTrue(actual);
		Assert.assertEquals(7, supplnServProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2204_01_False() {
		List<Integer> supplnServProvList = new ArrayList<Integer>();
		supplnServProvList.add(1);
		supplnServProvList.add(2);
		supplnServProvList.add(3);
		supplnServProvList.add(4);
		supplnServProvList.add(5);
		supplnServProvList.add(6);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2204_01(supplnServProvList);
		assertFalse(actual);
		Assert.assertEquals(6, supplnServProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2129_01_True() {
		List<Integer> servProvList = new ArrayList<Integer>();
		servProvList.add(1);
		servProvList.add(2);
		servProvList.add(3);
		servProvList.add(4);
		servProvList.add(5);
		servProvList.add(1);
		servProvList.add(2);
		servProvList.add(3);
		servProvList.add(4);
		servProvList.add(5);

		boolean actual = SAUIRules.executeRID_SRA2001_2129_01(servProvList);
		assertTrue(actual);
		Assert.assertEquals(10, servProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2129_01_False() {
		List<Integer> servProvList = new ArrayList<Integer>();
		servProvList.add(1);
		servProvList.add(2);
		servProvList.add(3);
		servProvList.add(4);
		servProvList.add(5);
		servProvList.add(1);
		servProvList.add(2);
		servProvList.add(3);

		boolean actual = SAUIRules.executeRID_SRA2001_2129_01(servProvList);
		assertFalse(actual);
		Assert.assertEquals(8, servProvList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2214_01_True() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("email");

		boolean actual = SAUIRules.executeRID_SRA2001_2214_01(contactVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2214_01_False() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("");

		boolean actual = SAUIRules.executeRID_SRA2001_2214_01(contactVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2217_01_True() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("extension");

		boolean actual = SAUIRules.executeRID_SRA2001_2217_01(contactVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2217_01_False() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("");

		boolean actual = SAUIRules.executeRID_SRA2001_2217_01(contactVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2215_01_True() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("email");

		boolean actual = SAUIRules.executeRID_SRA2001_2215_01(contactVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2215_01_False() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("");

		boolean actual = SAUIRules.executeRID_SRA2001_2215_01(contactVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2218_01_True() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("extension");

		boolean actual = SAUIRules.executeRID_SRA2001_2218_01(contactVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2218_01_False() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("");

		boolean actual = SAUIRules.executeRID_SRA2001_2218_01(contactVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2202_01_True() {
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO suppVO = new SupplementalServicingProviderVO();
		servicingProviderVO.setProviderIDType("XX");
		suppVO.setProviderIDType("ZH");

		boolean actual = SAUIRules.executeRID_SRA2001_2202_01(
				servicingProviderVO, suppVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2202_01_False() {
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		SupplementalServicingProviderVO suppVO = new SupplementalServicingProviderVO();
		servicingProviderVO.setProviderIDType("XX");
		suppVO.setProviderIDType("");

		boolean actual = SAUIRules.executeRID_SRA2001_2202_01(
				servicingProviderVO, suppVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2342_01_False() throws Exception,
			Exception {
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		servicingProviderVO.setProviderID("providerID");
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		List<Object> list = new ArrayList<Object>();
		list.add("1");
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthDelegate.class,
						"getProviderSysList")).toReturn(list);
		requestingProviderDetailsVO.setProviderID("providerID");
		requestingProviderDetailsVO.setProviderIDType("providerIDType");
		servicingProviderVO.setProviderIDType("providerIDType");

		boolean actual = SAUIRules
				.executeRID_SRA2001_2342_01(basicServicesDetailsVO);
		assertFalse(actual);
		Assert.assertEquals("submitterID",
				serviceAuthHeaderDetails.getSubmitterID());
		Assert.assertEquals("providerID", servicingProviderVO.getProviderID());
	}

	@Test
	public void testExecuteRID_SRA2001_2342_01_True() throws Exception,
			Exception {
		String errorMsg = "error.required.provid.city.zip";
		String bundleName = "opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource";
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServicingProviderVO(servicingProviderVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		servicingProviderVO.setProviderID("providerID");
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderID("providerID");
		requestingProviderDetailsVO.setProviderIDType("providerID");
		servicingProviderVO.setProviderIDType("providerID");
		List<Integer> list = new ArrayList<Integer>();
		list.add(1);
		list.add(2);
		list.add(3);
		servicingProviderVO.setCity("");
		servicingProviderVO.setZip("");
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthDelegate.class,
						"getProviderSysList")).toReturn(list);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(errorMsg, bundleName,
						"servicingproviderProvId");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		boolean actual = SAUIRules
				.executeRID_SRA2001_2342_01(basicServicesDetailsVO);
		assertTrue(actual);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2196_01_1() throws Exception {
		ServicingProviderVO spVO = new ServicingProviderVO();
		SupplementalServicingProviderVO servicingMedicaidIDProviderVO = new SupplementalServicingProviderVO();
		servicingMedicaidIDProviderVO.setProviderID("test");

		spVO.setServicingMedicaidIDProviderVO(servicingMedicaidIDProviderVO);
		PowerMockito.whenNew(EnterpriseBaseDelegate.class).withAnyArguments()
				.thenReturn(m_EnterpriseBaseDelegate);
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderExistFlag("test",
						ServiceAuthDataConstants.MEDICAID_MMIS_CODE))
				.thenReturn(true);

		SAUIRules.executeRID_SRA2001_2196_01(spVO);
		Mockito.verify(m_ServiceAuthDelegate);

	}

	@Test
	public void testExecuteRID_SRA2001_2196_01_2() throws Exception {
		ServicingProviderVO spVO = new ServicingProviderVO();
		SupplementalServicingProviderVO servicingMedicaidIDProviderVO = new SupplementalServicingProviderVO();
		servicingMedicaidIDProviderVO.setProviderID("test");

		spVO.setServicingMedicaidIDProviderVO(servicingMedicaidIDProviderVO);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito.mockStatic(EnterpriseBaseDelegate.class);
		PowerMockito.whenNew(EnterpriseBaseDelegate.class).withAnyArguments()
				.thenReturn(m_EnterpriseBaseDelegate);
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);

		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderExistFlag("test",
						ServiceAuthDataConstants.MEDICAID_MMIS_CODE))
				.thenReturn(false);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"unitsof-measure-required",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"unitOfMeasure");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2196_01(spVO);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderExistFlag("test",
						ServiceAuthDataConstants.MEDICAID_MMIS_CODE);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2344_01_False() throws Exception {
		BasicServicesDetailsVO basicVO = new BasicServicesDetailsVO();
		ServicingProviderVO spVO = new ServicingProviderVO();
		SupplementalServicingProviderVO servicingMedicaidIDProviderVO = new SupplementalServicingProviderVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		List<Object> suppServProvIdList = new ArrayList<Object>();
		suppServProvIdList.add(1);
		suppServProvIdList.add(1);
		spVO.setServicingMedicaidIDProviderVO(servicingMedicaidIDProviderVO);
		servicingMedicaidIDProviderVO.setProviderID("providerId");
		basicVO.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderSysList("providerId", "W",
						"submitterID", false)).thenReturn(suppServProvIdList);
		spVO.setCity("");
		spVO.setZip("");

		boolean actual = SAUIRules.executeRID_SRA2001_2344_01(basicVO, spVO);
		assertFalse(actual);
		Assert.assertEquals(2, suppServProvIdList.size());
		Assert.assertEquals("providerId",
				servicingMedicaidIDProviderVO.getProviderID());
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_1() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("");
		contactVO.setFax("");
		contactVO.setEmail("email");

		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_2() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("");
		contactVO.setFax("fax");
		contactVO.setEmail("");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_3() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("");
		contactVO.setFax("fax");
		contactVO.setEmail("email");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_4() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_5() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("email");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_6() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("email");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_7() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("");
		contactVO.setFax("fax");
		contactVO.setEmail("");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_8() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("");
		contactVO.setFax("fax");
		contactVO.setEmail("email");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_9() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("");
		contactVO.setFax("");
		contactVO.setEmail("email");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_10() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("");
		contactVO.setFax("");
		contactVO.setEmail("");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_11() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("");
		contactVO.setEmail("email");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_12() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("");
		contactVO.setEmail("");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2220_01_13() {
		ContactInfoVO contactVO = new ContactInfoVO();
		contactVO.setPhone("");
		contactVO.setExtension("");
		contactVO.setFax("");
		contactVO.setEmail("");
		SAUIRules.executeRID_SRA2001_2220_01(contactVO);
		assertNotNull(contactVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2323_01_1() {
		String requestCategory = "requestCategory";
		String sectionName = "externalLineHealthCare";

		SAUIRules.executeRID_SRA2001_2323_01(requestCategory, sectionName);
		assertNotNull(requestCategory);
	}

	@Test
	public void testExecuteRID_SRA2001_2323_01_2() {
		String requestCategory = "requestCategory";
		String sectionName = "providerHealth";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.sa.provhealthcare.reqcategory.validvalue",
						"prv_ss_serviceauthorizationdetails.nl.PRV_SS_ServiceAuthorizationDetailsPortletResource",
						"externalHealthRequestCategory");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2323_01(requestCategory, sectionName);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2324_01_certificationType() {
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		healthCareServicesReviewVO.setCertificationType("certificationType");
		healthCareServicesReviewVO.setRequestCategory("");

		SAUIRules.executeRID_SRA2001_2324_01(healthCareServicesReviewVO);
		assertNotNull(healthCareServicesReviewVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2324_01_serviceType() {
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		healthCareServicesReviewVO.setServiceType("serviceType");
		healthCareServicesReviewVO.setRequestCategory("");

		SAUIRules.executeRID_SRA2001_2324_01(healthCareServicesReviewVO);
		assertNotNull(healthCareServicesReviewVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2324_01_facilityType() {
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		healthCareServicesReviewVO.setFacilityType("facilityType");
		healthCareServicesReviewVO.setRequestCategory("");

		SAUIRules.executeRID_SRA2001_2324_01(healthCareServicesReviewVO);
		assertNotNull(healthCareServicesReviewVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2324_01_facilitytypequalifier() {
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		healthCareServicesReviewVO
				.setFacilitytypequalifier("facilitytypequalifier");
		healthCareServicesReviewVO.setRequestCategory("");

		SAUIRules.executeRID_SRA2001_2324_01(healthCareServicesReviewVO);
		assertNotNull(healthCareServicesReviewVO);
	}

	@Test
	public void testExecuteRID_SRA2001_2367_01_1() {
		String certificationType = "certificationType";
		String sectionName = "externalLineHealthCare";
		SAUIRules.executeRID_SRA2001_2367_01(certificationType, sectionName);
		assertNotNull(certificationType);
	}

	@Test
	public void testExecuteRID_SRA2001_2367_01() {
		String certificationType = "certificationType";
		String sectionName = "providerHealth";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.sa.provhealthcare.cert.type.validvalue",
						"prv_ss_serviceauthorizationdetails.nl.PRV_SS_ServiceAuthorizationDetailsPortletResource",
						"externalHealthCertificationType");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2367_01(certificationType, sectionName);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2319_01_True() {
		String patientTraceNumber = "";
		String patientEventAssigningEntity = "patinetEventAssigningEntity";

		boolean actual = SAUIRules.executeRID_SRA2001_2319_01(
				patientTraceNumber, patientEventAssigningEntity);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2319_01_False() {
		String patientTraceNumber = "";
		String patientEventAssigningEntity = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2319_01(
				patientTraceNumber, patientEventAssigningEntity);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2320_01_True() {
		String patientTraceNumber = "patientTraceNumber";
		String patientEventAssigningEntity = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2320_01(
				patientTraceNumber, patientEventAssigningEntity);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2320_01_False() {
		String patientTraceNumber = "";
		String patientEventAssigningEntity = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2320_01(
				patientTraceNumber, patientEventAssigningEntity);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2390_01_True() {
		String serviceTraceNumber = "";
		String serviceEventAssigningEntity = "test";

		boolean actual = SAUIRules.executeRID_SRA2001_2390_01(
				serviceTraceNumber, serviceEventAssigningEntity);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2390_01_False() {
		String serviceTraceNumber = "";
		String serviceEventAssigningEntity = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2390_01(
				serviceTraceNumber, serviceEventAssigningEntity);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2391_01_True() {
		String serviceTraceNumber = "test";
		String serviceEventAssigningEntity = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2391_01(
				serviceTraceNumber, serviceEventAssigningEntity);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2391_01_False() {
		String serviceTraceNumber = "";
		String serviceEventAssigningEntity = "";

		boolean actual = SAUIRules.executeRID_SRA2001_2391_01(
				serviceTraceNumber, serviceEventAssigningEntity);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2179_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setRequestCategory("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2179_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2179_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setRequestCategory("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2179_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(0, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2179_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setRequestCategory("test");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2179_01(serviceAuthDataBean);
		assertFalse(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2180_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setCertificationType("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2180_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2180_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setCertificationType("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2180_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(0, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2180_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setCertificationType("test");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2180_01(serviceAuthDataBean);
		assertFalse(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2126_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setServiceType("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2126_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2126_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setServiceType("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2126_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(0, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2126_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setServiceType("test");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2126_01(serviceAuthDataBean);
		assertFalse(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2127_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setFacilityType("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2127_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2127_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setFacilityType("");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2127_01(serviceAuthDataBean);
		assertTrue(actual);
		Assert.assertEquals(0, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2127_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setFacilityType("test");
		serviceAuthLineItemsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);

		boolean actual = SAUIRules
				.executeRID_SRA2001_2127_01(serviceAuthDataBean);
		assertFalse(actual);
		Assert.assertEquals(1, lineItemList.size());
	}

	@Test
	public void testExecuteRID_SRA2001_2325_01_1() {
		String facilityType = "";
		String facilityTypeQualifier = "test1";
		String portletNamespace = "test2";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		serviceAuthDataBean.setSaInternalScreen(true);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"messageKey",
						"bundleName",
						"test2:detailsForm:newServiceAuthorization:basicSAInfo:LineItems:healthCareServiceLocInfo:facilityType");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2325_01(facilityType,
				facilityTypeQualifier, portletNamespace, serviceAuthDataBean);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2325_01_2() {
		String facilityType = "";
		String facilityTypeQualifier = "test1";
		String portletNamespace = "";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		serviceAuthDataBean.setSaInternalScreen(false);
		serviceAuthDataBean.setSaExternalScreen(true);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"messageKey",
						"bundleName",
						"test2:detailsForm:newServiceAuthorization:basicSAInfo:LineItems:healthCareServiceLocInfo:facilityType");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2325_01(facilityType,
				facilityTypeQualifier, portletNamespace, serviceAuthDataBean);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2326_01() {
		String facilityType = "test1";
		String facilityTypeQualifier = "";
		String portletNamespace = "test2";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.when(m_ServiceAuthDataBean.isSaExternalScreen())
				.thenReturn(true);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"messageKey",
						"bundleName",
						"test2:detailsForm:newServiceAuthorization:basicSAInfo:LineItems:healthCareServiceLocInfo:facilityType");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2326_01(facilityType,
				facilityTypeQualifier, portletNamespace, serviceAuthDataBean);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_SRA2001_2327_01_LI() {
		String serviceQuantity = "";
		String serviceQuantityType = "test";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"unitsof-measure-required",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"unitOfMeasure");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2327_01_LI(serviceQuantity,
				serviceQuantityType);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);

	}

	@Test
	public void testExecuteRID_SRA2001_2328_01_LI() {
		String serviceQuantity = "test";
		String serviceQuantityType = "";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"unitsof-measure-required",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"unitOfMeasure");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");

		SAUIRules.executeRID_SRA2001_2328_01_LI(serviceQuantity,
				serviceQuantityType);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_Application);
	}

	@Test
	public void testExecuteRID_OPR0070_0001_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		RelatedCausesVO relatedCausesVO = new RelatedCausesVO();
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		renderingFlagsVO.setAuthAccidentOrEmployement("yes");
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		relatedCausesVO.setOnerelatedcause("");
		SAUIRules.executeRID_OPR0070_0001_01(serviceAuthDataBean);

		assertNotNull(serviceAuthDataBean);
		assertEquals("", relatedCausesVO.getOnerelatedcause());
	}

	@Test
	public void testExecuteOPR0014_0001_01_BlankAccitime() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		RelatedCausesVO relatedCausesVO = new RelatedCausesVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		relatedCausesVO.setOnerelatedcause("test");
		relatedCausesVO.setAccidate("date");
		relatedCausesVO.setAccitime("");
		SAUIRules.executeOPR0014_0001_01(serviceAuthDataBean);

		assertNotNull(serviceAuthDataBean);
		assertEquals("test", relatedCausesVO.getOnerelatedcause());
	}

	@Test
	public void testExecuteOPR0014_0001_01_NullAccitime() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		RelatedCausesVO relatedCausesVO = new RelatedCausesVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		relatedCausesVO.setOnerelatedcause("test");
		relatedCausesVO.setAccidate("date");
		relatedCausesVO.setAccitime(null);
		SAUIRules.executeOPR0014_0001_01(serviceAuthDataBean);

		assertNotNull(serviceAuthDataBean);
		assertEquals("test", relatedCausesVO.getOnerelatedcause());
	}

	@Test
	public void testExecuteOPR0014_0001_01_BlankAccidate() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		RelatedCausesVO relatedCausesVO = new RelatedCausesVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		relatedCausesVO.setOnerelatedcause("test");
		relatedCausesVO.setAccidate("");
		relatedCausesVO.setAccitime("time");
		SAUIRules.executeOPR0014_0001_01(serviceAuthDataBean);

		assertNotNull(serviceAuthDataBean);
		assertEquals("test", relatedCausesVO.getOnerelatedcause());
	}

	@Test(expected = NullPointerException.class)
	public void testExecuteOPR0014_0001_01_NullAccidate() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		RelatedCausesVO relatedCausesVO = new RelatedCausesVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		relatedCausesVO.setOnerelatedcause("test");
		relatedCausesVO.setAccidate(null);
		relatedCausesVO.setAccitime("time");
		SAUIRules.executeOPR0014_0001_01(serviceAuthDataBean);

		assertNotNull(serviceAuthDataBean);
		assertEquals("test", relatedCausesVO.getOnerelatedcause());
	}

	@Test
	public void testExecuteOPR0016_0001_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		RelatedCausesVO relatedCausesVO = new RelatedCausesVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		relatedCausesVO.setEstimateddob("12/12/2012");
		relatedCausesVO.setLastmenstrualperiod("");
		SAUIRules.executeOPR0016_0001_01(serviceAuthDataBean);

		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteOPR0017_0001_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		RelatedCausesVO relatedCausesVO = new RelatedCausesVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setRelatedCausesVO(relatedCausesVO);
		relatedCausesVO.setEstimateddob("");
		relatedCausesVO.setLastmenstrualperiod("12/12/2012");
		SAUIRules.executeOPR0017_0001_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2327_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		HealthCareDeliveryVO healthCareDeliveryVO = new HealthCareDeliveryVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setHealthCareDeliveryVO(healthCareDeliveryVO);
		healthCareDeliveryVO.setPatientservicequantype("test");
		healthCareDeliveryVO.setPatientservicequantlabel("");
		SAUIRules.executeRID_SRA2001_2327_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2328_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		HealthCareDeliveryVO healthCareDeliveryVO = new HealthCareDeliveryVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setHealthCareDeliveryVO(healthCareDeliveryVO);
		healthCareDeliveryVO.setPatientservicequantype("");
		healthCareDeliveryVO.setPatientservicequantlabel("test");
		SAUIRules.executeRID_SRA2001_2328_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2364_01ServiceAuthDataBean_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		HealthCareDeliveryVO healthCareDeliveryVO = new HealthCareDeliveryVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setHealthCareDeliveryVO(healthCareDeliveryVO);
		healthCareDeliveryVO
				.setPatientservicefreqcount("patientservicefreqcount");
		healthCareDeliveryVO.setPatientfreqperiod("");
		healthCareDeliveryVO
				.setPatientservicequantlabel("patientservicequantlabel");
		healthCareDeliveryVO.setPatientservicequantype("");
		SAUIRules.executeRID_SRA2001_2364_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2364_01ServiceAuthDataBean_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		HealthCareDeliveryVO healthCareDeliveryVO = new HealthCareDeliveryVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setHealthCareDeliveryVO(healthCareDeliveryVO);
		healthCareDeliveryVO
				.setPatientservicefreqcount("patientservicefreqcount");
		healthCareDeliveryVO.setPatientfreqperiod("");
		healthCareDeliveryVO.setPatientservicequantlabel("");
		healthCareDeliveryVO.setPatientservicequantype("test");
		SAUIRules.executeRID_SRA2001_2364_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2364_01StringString() {
		String serviceFreCount = "test";
		String serviceFrePeriod = "";
	// executeRID_SRA2001_2364_01(serviceFreCount, serviceFrePeriod);
		assertNotNull(serviceFreCount); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_0058_01_False_1() {
		ServiceAuthHeaderDetailsVO saHeaderDetailsVO = new ServiceAuthHeaderDetailsVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		saHeaderDetailsVO.setCurrentStatus("V");
		saHeaderDetailsVO.setReasonCode("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"error.reasoncoderequired",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"reasonCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules
				.executeRID_SRA2001_0058_01(saHeaderDetailsVO);
		assertEquals(false, actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();

	}

	@Test
	public void testExecuteRID_SRA2001_0058_01_False_2() {
		ServiceAuthHeaderDetailsVO saHeaderDetailsVO = new ServiceAuthHeaderDetailsVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		saHeaderDetailsVO.setCurrentStatus("D");
		saHeaderDetailsVO.setReasonCode("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"error.reasoncoderequired",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"reasonCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules
				.executeRID_SRA2001_0058_01(saHeaderDetailsVO);
		assertFalse(actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
	}

	@Test
	public void testExecuteRID_SRA2001_2263_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition("patientfirstcondition");
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_02() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition("patienttwocondition");
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_03() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition("patienthreecondition");
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_04() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition("patientfourcondition");
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_05() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition("patientfivecondition");
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_06() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode("patientransportcode");
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_07() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode("patientransportreasoncode");
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_SRA2001_2263_08() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO
				.setPatientroundtripurposedescription("patientroundtripurposedescription");
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_09() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO
				.setPatientstretcherpurposedescription("patientstretcherpurposedescription");
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_10() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance("patientransportdistance");
		ambulanceVO.setPatientWeight(null);
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_11() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply(null);
		ambulanceVO.setPatientfirstcondition(null);
		ambulanceVO.setPatienttwocondition(null);
		ambulanceVO.setPatienthreecondition(null);
		ambulanceVO.setPatientfourcondition(null);
		ambulanceVO.setPatientfivecondition(null);
		ambulanceVO.setPatientransportcode(null);
		ambulanceVO.setPatientransportreasoncode(null);
		ambulanceVO.setPatientroundtripurposedescription(null);
		ambulanceVO.setPatientstretcherpurposedescription(null);
		ambulanceVO.setPatientransportdistance(null);
		ambulanceVO.setPatientWeight("patientWeight");
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2263_12() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientcondcodeapply("Patientcondcodeapply");
		SAUIRules.executeRID_SRA2001_2263_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
	}

	@Test
	public void testExecuteRID_SRA2001_2264_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientfirstcondition("");
		SAUIRules.executeRID_SRA2001_2264_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2265_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientransportcode("");
		SAUIRules.executeRID_SRA2001_2265_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2266_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		AmbulanceVO ambulanceVO = new AmbulanceVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setAmbulanceVO(ambulanceVO);
		ambulanceVO.setPatientransportcode("X");
		ambulanceVO.setPatientroundtripurposedescription("");
		SAUIRules.executeRID_SRA2001_2266_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2294_01_True() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		PickUpLocationVO pickUpLocationVO = new PickUpLocationVO();
		patientEventDetailVO.setPickUpLocationVO(pickUpLocationVO);
		pickUpLocationVO.setPatientcity("test1");
		pickUpLocationVO.setPatientstate("test2");
		pickUpLocationVO.setPatientzipcode("test3");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2294_01(serviceAuthDataBean);
		assertTrue(actual);

	}

	@Test
	public void testExecuteRID_SRA2001_2294_01_False_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		PickUpLocationVO pickUpLocationVO = new PickUpLocationVO();
		patientEventDetailVO.setPickUpLocationVO(pickUpLocationVO);
		pickUpLocationVO.setPatientcity("");
		pickUpLocationVO.setPatientstate("");
		pickUpLocationVO.setPatientzipcode("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2294_01(serviceAuthDataBean);
		assertFalse(actual);

	}

	@Test
	public void testExecuteRID_SRA2001_2294_01_False_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		PickUpLocationVO pickUpLocationVO = new PickUpLocationVO();
		patientEventDetailVO.setPickUpLocationVO(pickUpLocationVO);
		pickUpLocationVO.setPatientcity("test");
		pickUpLocationVO.setPatientstate("");
		pickUpLocationVO.setPatientzipcode("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2294_01(serviceAuthDataBean);
		assertFalse(actual);

	}

	@Test
	public void testExecuteRID_SRA2001_2294_01_False_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		PickUpLocationVO pickUpLocationVO = new PickUpLocationVO();
		patientEventDetailVO.setPickUpLocationVO(pickUpLocationVO);
		pickUpLocationVO.setPatientcity("");
		pickUpLocationVO.setPatientstate("test");
		pickUpLocationVO.setPatientzipcode("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2294_01(serviceAuthDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2295_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		SAUIRules.executeRID_SRA2001_2295_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2297_01_True() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO mainStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setMainStop(mainStop);
		mainStop.setMspatientcity("test1");
		mainStop.setMspatientstate("test2");
		mainStop.setPatientFinZipCode1("test3");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2297_01(serviceAuthDataBean);
		assertTrue(true);
	}

	@Test
	public void testExecuteRID_SRA2001_2297_01_False_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO mainStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setMainStop(mainStop);
		mainStop.setMspatientcity("");
		mainStop.setMspatientstate("");
		mainStop.setPatientFinZipCode1("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2297_01(serviceAuthDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2297_01_False_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO mainStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setMainStop(mainStop);
		mainStop.setMspatientcity("test");
		mainStop.setMspatientstate("");
		mainStop.setPatientFinZipCode1("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2297_01(serviceAuthDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2297_01_False_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO mainStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setMainStop(mainStop);
		mainStop.setMspatientcity("");
		mainStop.setMspatientstate("test");
		mainStop.setPatientFinZipCode1("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2297_01(serviceAuthDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2298_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO mainStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setMainStop(mainStop);
		mainStop.setMspatientcity("");
		mainStop.setMspatientstate("");
		mainStop.setPatientFinZipCode1("");
		SAUIRules.executeRID_SRA2001_2298_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2299_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO firstStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setFirstStop(firstStop);
		firstStop.setFspatientlnamerorg("test1");
		firstStop.setFspatientaddrlineone("");
		firstStop.setFspatientaddrlinetwo("test3");
		firstStop.setPatientFirStopZipCode1("test4");
		firstStop.setFspatientstate("test5");
		firstStop.setFspatientcity("test6");
		SAUIRules.executeRID_SRA2001_2299_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2300_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO firstStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setFirstStop(firstStop);
		firstStop.setFspatientlnamerorg("test1");
		firstStop.setFspatientaddrlineone("test2");
		firstStop.setFspatientaddrlinetwo("test3");
		firstStop.setPatientFirStopZipCode1("");
		firstStop.setFspatientstate("");
		firstStop.setFspatientcity("");
		SAUIRules.executeRID_SRA2001_2300_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2301_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO firstStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setFirstStop(firstStop);
		firstStop.setFspatientlnamerorg("test1");
		firstStop.setFspatientaddrlineone("test2");
		firstStop.setFspatientaddrlinetwo("test3");
		firstStop.setPatientFirStopZipCode1("");
		firstStop.setFspatientstate("");
		firstStop.setFspatientcity("");
		SAUIRules.executeRID_SRA2001_2301_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2302_01_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO secondStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setSecondStop(secondStop);
		secondStop.setSspatientlnamerorg("test1");
		secondStop.setSspatientaddrlineone("");
		secondStop.setSspatientaddrlinetwo("");
		secondStop.setPatientSecStopZip1("");
		secondStop.setSspatientstate("");
		secondStop.setSspatientcity("");
		SAUIRules.executeRID_SRA2001_2302_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2302_01_02() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO secondStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setSecondStop(secondStop);
		secondStop.setSspatientlnamerorg("");
		secondStop.setSspatientaddrlineone("");
		secondStop.setSspatientaddrlinetwo("test3");
		secondStop.setPatientSecStopZip1("");
		secondStop.setSspatientstate("");
		secondStop.setSspatientcity("");
		SAUIRules.executeRID_SRA2001_2302_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2302_01_03() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO secondStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setSecondStop(secondStop);
		secondStop.setSspatientlnamerorg("");
		secondStop.setSspatientaddrlineone("");
		secondStop.setSspatientaddrlinetwo("");
		secondStop.setPatientSecStopZip1("test4");
		secondStop.setSspatientstate("");
		secondStop.setSspatientcity("");
		SAUIRules.executeRID_SRA2001_2302_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2302_01_04() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO secondStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setSecondStop(secondStop);
		secondStop.setSspatientlnamerorg("");
		secondStop.setSspatientaddrlineone("");
		secondStop.setSspatientaddrlinetwo("");
		secondStop.setPatientSecStopZip1("");
		secondStop.setSspatientstate("test5");
		secondStop.setSspatientcity("");
		SAUIRules.executeRID_SRA2001_2302_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2302_01_05() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO secondStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setSecondStop(secondStop);
		secondStop.setSspatientlnamerorg("");
		secondStop.setSspatientaddrlineone("");
		secondStop.setSspatientaddrlinetwo("");
		secondStop.setPatientSecStopZip1("");
		secondStop.setSspatientstate("");
		secondStop.setSspatientcity("test6");
		SAUIRules.executeRID_SRA2001_2302_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2303_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO secondStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setSecondStop(secondStop);
		secondStop.setSspatientlnamerorg("test1");
		secondStop.setSspatientaddrlineone("");
		secondStop.setSspatientaddrlinetwo("test3");
		secondStop.setPatientSecStopZip1("");
		secondStop.setSspatientstate("");
		secondStop.setSspatientcity("");
		SAUIRules.executeRID_SRA2001_2303_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2304_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO secondStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setSecondStop(secondStop);
		secondStop.setSspatientlnamerorg("test1");
		secondStop.setSspatientaddrlineone("");
		secondStop.setSspatientaddrlinetwo("test3");
		secondStop.setPatientSecStopZip1("");
		secondStop.setSspatientstate("");
		secondStop.setSspatientcity("");
		SAUIRules.executeRID_SRA2001_2304_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2305_01_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO thirdStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setThirdStop(thirdStop);
		thirdStop.setTspatientlnamerorg("test1");
		thirdStop.setTspatientaddrlineone("");
		thirdStop.setTspatientaddrlinetwo("");
		thirdStop.setPatientThirdStopZipCode1("");
		thirdStop.setTspatientstate("");
		thirdStop.setTspatientcity("");
		SAUIRules.executeRID_SRA2001_2305_01(serviceAuthDataBean);
		assertNotNull(sauirules); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2305_01_02() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO thirdStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setThirdStop(thirdStop);
		thirdStop.setTspatientlnamerorg("");
		thirdStop.setTspatientaddrlineone("");
		thirdStop.setTspatientaddrlinetwo("test3");
		thirdStop.setPatientThirdStopZipCode1("");
		thirdStop.setTspatientstate("");
		thirdStop.setTspatientcity("");
		SAUIRules.executeRID_SRA2001_2305_01(serviceAuthDataBean);
		assertNotNull(sauirules); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2305_01_03() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO thirdStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setThirdStop(thirdStop);
		thirdStop.setTspatientlnamerorg("");
		thirdStop.setTspatientaddrlineone("");
		thirdStop.setTspatientaddrlinetwo("");
		thirdStop.setPatientThirdStopZipCode1("test4");
		thirdStop.setTspatientstate("");
		thirdStop.setTspatientcity("");
		SAUIRules.executeRID_SRA2001_2305_01(serviceAuthDataBean);
		assertNotNull(sauirules); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2305_01_04() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO thirdStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setThirdStop(thirdStop);
		thirdStop.setTspatientlnamerorg("");
		thirdStop.setTspatientaddrlineone("");
		thirdStop.setTspatientaddrlinetwo("");
		thirdStop.setPatientThirdStopZipCode1("");
		thirdStop.setTspatientstate("test5");
		thirdStop.setTspatientcity("");
		SAUIRules.executeRID_SRA2001_2305_01(serviceAuthDataBean);
		assertNotNull(sauirules); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2305_01_05() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO thirdStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setThirdStop(thirdStop);
		thirdStop.setTspatientlnamerorg("");
		thirdStop.setTspatientaddrlineone("");
		thirdStop.setTspatientaddrlinetwo("");
		thirdStop.setPatientThirdStopZipCode1("");
		thirdStop.setTspatientstate("");
		thirdStop.setTspatientcity("test6");
		SAUIRules.executeRID_SRA2001_2305_01(serviceAuthDataBean);
		assertNotNull(sauirules); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2306_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO thirdStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setThirdStop(thirdStop);
		thirdStop.setTspatientlnamerorg("test1");
		thirdStop.setTspatientaddrlineone("test2");
		thirdStop.setTspatientaddrlinetwo("test3");
		thirdStop.setPatientThirdStopZipCode1("");
		thirdStop.setTspatientstate("");
		thirdStop.setTspatientcity("");
		SAUIRules.executeRID_SRA2001_2306_01(serviceAuthDataBean);
		assertNotNull(sauirules); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2307_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		FinalSchedDestAddrVO finalSchedDestAddrVO = new FinalSchedDestAddrVO();
		DestinationAddrVO thirdStop = new DestinationAddrVO();
		serviceAuthDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setFinalSchedDestAddrVO(finalSchedDestAddrVO);
		finalSchedDestAddrVO.setThirdStop(thirdStop);
		thirdStop.setTspatientlnamerorg("test1");
		thirdStop.setTspatientaddrlineone("test2");
		thirdStop.setTspatientaddrlinetwo("test3");
		thirdStop.setPatientThirdStopZipCode1("");
		thirdStop.setTspatientstate("");
		thirdStop.setTspatientcity("");
		SAUIRules.executeRID_SRA2001_2307_01(serviceAuthDataBean);
		assertNotNull(sauirules); // nothing can be asserted or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2356_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setServiceLevel("serviceLevel");
		serviceAuthLineItemsVO.setServiceLevelCode("serviceLevelCode");
		SAUIRules.executeRID_SRA2001_2356_01(serviceAuthDataBean);
		assertEquals(serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getServiceLevelCode(),
				serviceAuthDataBean.getBasicServicesDetailsVO()
						.getServiceAuthHeaderDetails().getServiceLevelCode());

	}

	@Test
	public void testExecuteRID_OPR0059_0001_01() throws Exception {
		ReferenceServiceDelegate referenceServiceDelegate = null;
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		SAValidValueHelper m_SAValidValueHelper = PowerMockito
				.mock(SAValidValueHelper.class);
		InputCriteria inputCriteria = new InputCriteria();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		ProviderValidValuesVO m_ProviderValidValuesVO = PowerMockito
				.mock(ProviderValidValuesVO.class);
		String serviceCategoryCode = "test";
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.mockStatic(ServiceAuthPortletCacheHelper.class);
		ServiceAuthPortletCacheHelper m_ServiceAuthPortletCacheHelper = PowerMockito
				.mock(ServiceAuthPortletCacheHelper.class);
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(m_ServiceAuthDataBean);
		PowerMockito.whenNew(ProviderValidValuesVO.class).withAnyArguments()
				.thenReturn(m_ProviderValidValuesVO);
		PowerMockito.when(m_SAValidValueHelper.getInputCriteria("", ""))
				.thenReturn(inputCriteria);
		List<Object> inputCriteriaList = new ArrayList<Object>();
		inputCriteriaList.add(providerValidValuesVO);
		Map<Object, Object> map = new HashMap<Object, Object>();
		map.put(1, 1);
		PowerMockito.when(
				m_ServiceAuthPortletCacheHelper.getServiceAuthDataFromCache(
						"VVC", inputCriteriaList)).thenReturn(map);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		PowerMockito.when(
				m_SAValidValueHelper.getValidDataForProviderExternal(map,
						"A_LI_SCM_SCC_DD", "ServiceAuthorisation")).thenReturn(
				inputCriteriaList);
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthPortletCacheHelper.class,
						"getServiceAuthDataFromCache", String.class, List.class)).toReturn(new HashMap());
		SAUIRules.executeRID_OPR0059_0001_01(referenceServiceDelegate,
				serviceCategoryCode);

	}

	@Test
	public void testExecuteRID_OPR0060_0001_01() throws Exception {
		ReferenceServiceDelegate referenceServiceDelegate = null;
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		SAValidValueHelper m_SAValidValueHelper = PowerMockito
				.mock(SAValidValueHelper.class);
		InputCriteria inputCriteria = new InputCriteria();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		ProviderValidValuesVO m_ProviderValidValuesVO = PowerMockito
				.mock(ProviderValidValuesVO.class);
		String serviceCategoryCode = "test";
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthPortletCacheHelper m_ServiceAuthPortletCacheHelper = PowerMockito
				.mock(ServiceAuthPortletCacheHelper.class);
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(m_ServiceAuthDataBean);
		PowerMockito.whenNew(ProviderValidValuesVO.class).withAnyArguments()
				.thenReturn(m_ProviderValidValuesVO);
		PowerMockito.when(m_SAValidValueHelper.getInputCriteria("", ""))
				.thenReturn(inputCriteria);
		List<Object> inputCriteriaList = new ArrayList<Object>();
		inputCriteriaList.add(providerValidValuesVO);
		Map<Object, Object> map = new HashMap<Object, Object>();
		map.put(1, 1);
		PowerMockito.when(
				m_ServiceAuthPortletCacheHelper.getServiceAuthDataFromCache(
						"VVC", inputCriteriaList)).thenReturn(map);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		PowerMockito.when(
				m_SAValidValueHelper.getValidDataForProviderExternal(map,
						"A_LI_SCM_SCC_DD", "ServiceAuthorisation")).thenReturn(
				inputCriteriaList);
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthPortletCacheHelper.class,
						"getServiceAuthDataFromCache")).toReturn(new HashMap());
		SAUIRules.executeRID_OPR0060_0001_01(referenceServiceDelegate,
				serviceCategoryCode);
		Mockito.verify(m_SAValidValueHelper);
	}

	@Test
	public void testExecuteRID_OPR0061_0001_01() throws Exception {
		ReferenceServiceDelegate referenceServiceDelegate = null;
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		SAValidValueHelper m_SAValidValueHelper = PowerMockito
				.mock(SAValidValueHelper.class);
		InputCriteria inputCriteria = new InputCriteria();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		ProviderValidValuesVO m_ProviderValidValuesVO = PowerMockito
				.mock(ProviderValidValuesVO.class);
		String serviceCategoryCode = "test";
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthPortletCacheHelper m_ServiceAuthPortletCacheHelper = PowerMockito
				.mock(ServiceAuthPortletCacheHelper.class);
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(m_ServiceAuthDataBean);
		PowerMockito.whenNew(ProviderValidValuesVO.class).withAnyArguments()
				.thenReturn(m_ProviderValidValuesVO);
		PowerMockito.when(m_SAValidValueHelper.getInputCriteria("", ""))
				.thenReturn(inputCriteria);
		List<Object> inputCriteriaList = new ArrayList<Object>();
		inputCriteriaList.add(providerValidValuesVO);
		Map<Object, Object> map = new HashMap<Object, Object>();
		map.put(1, 1);
		PowerMockito.when(
				m_ServiceAuthPortletCacheHelper.getServiceAuthDataFromCache(
						"VVC", inputCriteriaList)).thenReturn(map);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		PowerMockito.when(
				m_SAValidValueHelper.getValidDataForProviderExternal(map,
						"A_LI_SCM_SCC_DD", "ServiceAuthorisation")).thenReturn(
				inputCriteriaList);
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthPortletCacheHelper.class,
						"getServiceAuthDataFromCache")).toReturn(new HashMap());
		SAUIRules.executeRID_OPR0061_0001_01(referenceServiceDelegate,
				serviceCategoryCode);
		Mockito.verify(m_SAValidValueHelper);
	}

	@Test
	public void testExecuteRID_OPR0062_0001_01() throws Exception {
		ReferenceServiceDelegate referenceServiceDelegate = null;
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		SAValidValueHelper m_SAValidValueHelper = PowerMockito
				.mock(SAValidValueHelper.class);
		InputCriteria inputCriteria = new InputCriteria();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		ProviderValidValuesVO m_ProviderValidValuesVO = PowerMockito
				.mock(ProviderValidValuesVO.class);
		String serviceCategoryCode = "test";
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthPortletCacheHelper m_ServiceAuthPortletCacheHelper = PowerMockito
				.mock(ServiceAuthPortletCacheHelper.class);
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(m_ServiceAuthDataBean);
		PowerMockito.whenNew(ProviderValidValuesVO.class).withAnyArguments()
				.thenReturn(m_ProviderValidValuesVO);
		PowerMockito.when(m_SAValidValueHelper.getInputCriteria("", ""))
				.thenReturn(inputCriteria);
		List<Object> inputCriteriaList = new ArrayList<Object>();
		inputCriteriaList.add(providerValidValuesVO);
		Map<Object, Object> map = new HashMap<Object, Object>();
		map.put(1, 1);
		PowerMockito.when(
				m_ServiceAuthPortletCacheHelper.getServiceAuthDataFromCache(
						"VVC", inputCriteriaList)).thenReturn(map);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		PowerMockito.when(
				m_SAValidValueHelper.getValidDataForProviderExternal(map,
						"A_LI_SCM_SCC_DD", "ServiceAuthorisation")).thenReturn(
				inputCriteriaList);
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthPortletCacheHelper.class,
						"getServiceAuthDataFromCache")).toReturn(new HashMap());
		SAUIRules.executeRID_OPR0062_0001_01(referenceServiceDelegate,
				serviceCategoryCode);
		Mockito.verify(m_SAValidValueHelper);
	}

	@Test
	public void testExecuteRID_SRA2001_2152_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		String bundleName = "test1";
		String portletNamespace = "test2";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		serviceAuthLineItemsVO.setRequestedBeginDate("12/12/2012");
		serviceAuthLineItemsVO.setRequestedEndDate("12/15/2012");
		healthCareServicesReviewVO.setRequestedBeginDate("12/14/2012");
		healthCareServicesReviewVO.setRequestedEndDate("12/13/2012");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"error.libegindate.mustfall.requestedbeginDate",
						bundleName,
						"test2:serviceInfo:newServiceAuthorization:basicSAInfoExt:provLineItemsMainPageIncl:requestedBeginDate");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2152_01(serviceAuthDataBean, bundleName,
				portletNamespace);
		Mockito.verify(m_FacesContext, Mockito.times(2)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(2)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(2)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2374_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		String bundleName = "test1";
		String portletNamespace = "test2";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		serviceAuthLineItemsVO.setRequestedBeginDate("");
		healthCareServicesReviewVO.setRequestedBeginDate("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"error.libegindate.mustfall.requestedbeginDate",
						bundleName,
						"test2:serviceInfo:newServiceAuthorization:basicSAInfoExt:provLineItemsMainPageIncl:requestedBeginDate");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2374_01(serviceAuthDataBean, bundleName,
				portletNamespace);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2375_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		String bundleName = "test1";
		String portletNamespace = "test2";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		serviceAuthLineItemsVO.setRequestedEndDate("");
		healthCareServicesReviewVO.setRequestedBeginDate("test");
		healthCareServicesReviewVO.setRequestedEndDate("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"error.libegindate.mustfall.requestedbeginDate",
						bundleName,
						"test2:serviceInfo:newServiceAuthorization:basicSAInfoExt:provLineItemsMainPageIncl:requestedBeginDate");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2375_01(serviceAuthDataBean, bundleName,
				portletNamespace);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2375_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		String bundleName = "test1";
		String portletNamespace = "test2";
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		serviceAuthLineItemsVO.setRequestedEndDate("test");
		healthCareServicesReviewVO.setRequestedBeginDate("");
		healthCareServicesReviewVO.setRequestedEndDate("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage(
						"error.libegindate.mustfall.requestedbeginDate",
						bundleName,
						"test2:serviceInfo:newServiceAuthorization:basicSAInfoExt:provLineItemsMainPageIncl:requestedBeginDate");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2375_01(serviceAuthDataBean, bundleName,
				portletNamespace);
		// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0032_0001_01ServiceAuthLineItemsVOString() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		SAUIRules
				.executeRID_OPR0032_0001_01(serviceAuthLineItemsVO, bundleName);
		assertNotNull(sauirules);
	}

	@Test
	public void testExecuteRID_OPR0050_0001_01_1() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedAmount("-1");
		providerLineItemsVO.setRequestedUnits("1000");
		SAUIRules.executeRID_OPR0050_0001_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules); // nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0050_0001_01_2() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedAmount("0");
		providerLineItemsVO.setRequestedUnits("1000");
		SAUIRules.executeRID_OPR0050_0001_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules);// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0050_0001_01_3() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedAmount("-1");
		providerLineItemsVO.setRequestedUnits("test");
		SAUIRules.executeRID_OPR0050_0001_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules);// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0050_0001_01_4() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedAmount("0");
		providerLineItemsVO.setRequestedUnits("");
		SAUIRules.executeRID_OPR0050_0001_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules);// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0051_0001_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedAmount("100");
		providerLineItemsVO.setRequestedUnits("-100");
		SAUIRules.executeRID_OPR0051_0001_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules);// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0042_0001_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedAmount("");
		providerLineItemsVO.setRequestedUnits("");
		SAUIRules.executeRID_OPR0042_0001_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules);// nothing can be asserted or mocked
	}

	@Test
	public void testValidationForRequestedUnits_True() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedAmount("100");
		providerLineItemsVO.setRequestedUnits("-100");
		boolean actual = SAUIRules
				.validationForRequestedUnits(providerLineItemsVO);
		assertTrue(actual);
	}

	@Test
	public void testValidationForRequestedUnits_1() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedAmount("0");
		providerLineItemsVO.setRequestedUnits("-1");
		boolean actual = SAUIRules
				.validationForRequestedUnits(providerLineItemsVO);
		assertTrue(actual);
	}

	@Test
	public void testValidationForRequestedUnits_2() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedAmount("test");
		providerLineItemsVO.setRequestedUnits("-1");
		boolean actual = SAUIRules
				.validationForRequestedUnits(providerLineItemsVO);
		assertTrue(actual);
	}

	@Test
	public void testValidationForRequestedUnits_3() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedAmount("");
		providerLineItemsVO.setRequestedUnits("-1");
		boolean actual = SAUIRules
				.validationForRequestedUnits(providerLineItemsVO);
		assertTrue(actual);
	}

	@Test(expected = NumberFormatException.class)
	public void testValidationForRequestedUnits_NumberFormatException() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedAmount("test1");
		providerLineItemsVO.setRequestedUnits("test2");
		SAUIRules.validationForRequestedUnits(providerLineItemsVO);
	}

	@Test
	public void testValidationForRequestedUnits_False() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedAmount("100");
		providerLineItemsVO.setRequestedUnits("100");
		boolean actual = SAUIRules
				.validationForRequestedUnits(providerLineItemsVO);
		assertFalse(actual);
	}

	@Test
	public void testValidationForDentalRequestedUnits_False() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedUnits("100");
		boolean actual = SAUIRules
				.validationForDentalRequestedUnits(providerLineItemsVO);
		assertFalse(actual);
	}

	@Test
	public void testValidationForDentalRequestedUnits_True() {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		providerLineItemsVO.setRequestedUnits("test");
		boolean actual = SAUIRules
				.validationForDentalRequestedUnits(providerLineItemsVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2322_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedUnits("test");
		SAUIRules.executeRID_SRA2001_2322_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules);// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_SRA2001_2321_01ServiceAuthLineItemsVOString_1() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedUnits("10");
		providerLineItemsVO.setUnitOfMeasure("");
		SAUIRules.executeRID_SRA2001_2321_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules);
	}

	@Test
	public void testExecuteRID_SRA2001_2321_01ServiceAuthLineItemsVOString_2() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		String bundleName = "test1";
		providerLineItemsVO.setRequestedUnits("test");
		providerLineItemsVO.setUnitOfMeasure("");
		SAUIRules.executeRID_SRA2001_2321_01(providerLineItemsVO, bundleName);
		assertNotNull(sauirules); // nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0052_0001_01() {
		SAUIRules sauirules = new SAUIRules();
		SAUIRules.executeRID_OPR0052_0001_01();
		assertNotNull(sauirules);// nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_SRA2001_2365_01_True() throws Exception {
		String bundleName = "";
		SALineItemInfo saLineItemInfo = new SALineItemInfo();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthDelegate m_serviceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_serviceAuthDelegate);
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		m_ServiceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setRevenueCode("revenueCode");
		PowerMockito.when(m_ServiceAuthDataBean.getBasicServicesDetailsVO())
				.thenReturn(basicServicesDetailsVO);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(m_ServiceAuthDataBean);
		PowerMockito.when(
				m_serviceAuthDelegate.isRevenueCodePresent("revenueCode",
						saLineItemInfo)).thenReturn(true);
		SAUIRules.executeRID_SRA2001_2365_01(bundleName, saLineItemInfo);
		Mockito.verify(m_ServiceAuthDataBean, Mockito.times(2))
				.getBasicServicesDetailsVO();
		Mockito.verify(m_serviceAuthDelegate, Mockito.times(1))
				.isRevenueCodePresent("revenueCode", saLineItemInfo);
	}

	@Test
	public void testExecuteRID_SRA2001_2365_01_False() throws Exception {
		String bundleName = "";
		SALineItemInfo saLineItemInfo = new SALineItemInfo();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthDelegate m_serviceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_serviceAuthDelegate);
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		m_ServiceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setRevenueCode("revenueCode");
		PowerMockito.when(m_ServiceAuthDataBean.getBasicServicesDetailsVO())
				.thenReturn(basicServicesDetailsVO);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(m_ServiceAuthDataBean);
		PowerMockito.when(
				m_serviceAuthDelegate.isRevenueCodePresent("revenueCode",
						saLineItemInfo)).thenReturn(false);
		SAUIRules.executeRID_SRA2001_2365_01(bundleName, saLineItemInfo);
		Mockito.verify(m_ServiceAuthDataBean, Mockito.times(2))
				.getBasicServicesDetailsVO();
		Mockito.verify(m_serviceAuthDelegate, Mockito.times(1))
				.isRevenueCodePresent("revenueCode", saLineItemInfo);

	}

	@Test
	public void testExecuteRID_SRA2001_2373_01() throws Exception {
		ServiceAuthLineItemsVO providerLineItemsVO = new ServiceAuthLineItemsVO();
		ProcedureCodeDetail procedureCodeDetail = new ProcedureCodeDetail();
		ProcedureGeneralIndicators procedureGeneralIndicators = new ProcedureGeneralIndicators();
		PowerMockito.mockStatic(EnterpriseBaseDelegate.class);
		PowerMockito.mockStatic(ServiceAuthDelegate.class);
		PowerMockito.mockStatic(ProcedureCodeDetail.class);
		PowerMockito.mockStatic(ProgramBaseDomain.class);
		String bundleName = "";
		providerLineItemsVO.setServiceCodeFrom("procedureCode");
		ServiceAuthDelegate m_serviceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_serviceAuthDelegate);
		ServiceAuthDelegate serviceAuthDelegate = new ServiceAuthDelegate();
		PowerMockito.when(
				serviceAuthDelegate.getProcedureCodeDetail("procedureCode"))
				.thenReturn(procedureCodeDetail);
		procedureCodeDetail
				.setProcedureGeneralIndicators(procedureGeneralIndicators);
		procedureGeneralIndicators.setPartialUnitsAllowableIndicator(false);
		providerLineItemsVO.setRequestedUnits("10.10");
		SAUIRules.executeRID_SRA2001_2373_01(providerLineItemsVO, bundleName);
		Mockito.verify(serviceAuthDelegate, Mockito.times(1))
				.getProcedureCodeDetail("procedureCode");

	}

	@Test
	public void testExecuteRID_SRA2001_2373_01_Internal() throws Exception {
		ProcedureCodeDetail procedureCodeDetail = new ProcedureCodeDetail();
		ProcedureCodeDetail m_ProcedureCodeDetail = PowerMockito
				.mock(ProcedureCodeDetail.class);
		String serviceCode = "procedureCode";
		ServiceAuthDelegate m_serviceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_serviceAuthDelegate);
		PowerMockito.when(
				m_serviceAuthDelegate.getProcedureCodeDetail("procedureCode"))
				.thenReturn(m_ProcedureCodeDetail);
		procedureCodeDetail = SAUIRules
				.executeRID_SRA2001_2373_01_Internal(serviceCode);
		assertNotNull(procedureCodeDetail);
		Mockito.verify(m_serviceAuthDelegate, Mockito.times(1))
				.getProcedureCodeDetail("procedureCode");

	}

	@Test
	public void testValidateServiceCodes() throws Exception {
		String serviceCode = "test1";
		String serviceCodeTo = "test2";
		String typeCode = "test3";
		SALineItemInfo saLineItemInfo = new SALineItemInfo();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(m_ServiceAuthDataBean);
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthDelegate.class,
						"validateServiceCodeWithServiceCodeType")).toReturn(
				true);
		SAUIRules.validateServiceCodes(serviceCode, serviceCodeTo, typeCode,
				saLineItemInfo);

	}

	@Test
	public void testExecuteRID_SRA2001_2369_01() {
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		SAUIRules.executeRID_SRA2001_2369_01(dataBean);
		assertEquals(true, dataBean.getServiceCodeFrom());
		assertEquals(true, dataBean.getModifiers());
		assertEquals(true, dataBean.getServiceCodeTo());
		assertEquals(true, dataBean.getUnitsOfMeasure());
		assertEquals(true, dataBean.getServiceDescription());

	}

	@Test
	public void testExecuteRID_SRA2001_2370_01() {
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		SAUIRules.executeRID_SRA2001_2370_01(dataBean);
		assertEquals(true, dataBean.getServiceCodeFrom());
		assertEquals(true, dataBean.getModifiers());
		assertEquals(true, dataBean.getServiceCodeTo());
		assertEquals(true, dataBean.getUnitsOfMeasure());
		assertEquals(true, dataBean.getServiceDescription());
	}

	@Test
	public void testExecuteRID_SRA2001_2371_01() {
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		SAUIRules.executeRID_SRA2001_2371_01(dataBean);
		assertEquals(true, dataBean.getServiceCodeFrom());
		assertEquals(true, dataBean.getModifiers());
		assertEquals(true, dataBean.getServiceCodeTo());
		assertEquals(true, dataBean.getServiceDescription());

	}

	@Test
	public void testExecuteRID_SRA2001_2372_01() {
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		SAUIRules.executeRID_SRA2001_2372_01(dataBean);
		assertEquals(true, dataBean.getServiceCategoryCode());
		assertEquals(true, dataBean.getServiceCodeModifier());
		assertEquals(true, dataBean.getUnitsOfMeasure());

	}

	@Test
	public void testExecuteRID_OPR0045_0001_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		String bundleName = "test";
		SAUIRules.executeRID_OPR0045_0001_01(dataBean, bundleName);
		assertNotNull(sauirules); // nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_OPR0026_0001_01() {
		SAUIRules sauirules = new SAUIRules();
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		String bundleName = "test";
		SAUIRules.executeRID_OPR0026_0001_01(dataBean, bundleName);
		assertNotNull(sauirules); // nothing can be asserted or mocked
	}

	@Test
	public void testExecuteRID_SRA2001_2100_01() throws Exception {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.mockStatic(ValueChangeEvent.class);
		ValueChangeEvent m_ValueChangeEvent = PowerMockito
				.mock(ValueChangeEvent.class);
		PowerMockito.whenNew(ValueChangeEvent.class).withAnyArguments()
				.thenReturn(m_ValueChangeEvent);
		PowerMockito.when(m_ValueChangeEvent.getNewValue()).thenReturn("A");
		List<Object> hdrReasonCodeListForApproved = new ArrayList<Object>();
		PowerMockito.doNothing().when(m_ServiceAuthDataBean)
				.setHeaderReasonCodeList(hdrReasonCodeListForApproved);
		PowerMockito.when(
				m_ServiceAuthDataBean.getHdrReasonCodeListForApproved())
				.thenReturn(hdrReasonCodeListForApproved);
		SAUIRules.executeRID_SRA2001_2100_01(saDataBean, m_ValueChangeEvent);
		assertEquals(saDataBean.getHdrReasonCodeListForApproved(),
				saDataBean.getHeaderReasonCodeList());
		Mockito.verify(m_ValueChangeEvent, Mockito.times(2)).getNewValue();

	}

	@Test
	public void testExecuteRID_SRA2001_2101_01() throws Exception {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.mockStatic(ValueChangeEvent.class);
		ValueChangeEvent m_ValueChangeEvent = PowerMockito
				.mock(ValueChangeEvent.class);
		PowerMockito.whenNew(ValueChangeEvent.class).withAnyArguments()
				.thenReturn(m_ValueChangeEvent);
		PowerMockito.when(m_ValueChangeEvent.getNewValue()).thenReturn("D");
		List<Object> hdrReasonCodeListForApproved = new ArrayList<Object>();
		PowerMockito.doNothing().when(m_ServiceAuthDataBean)
				.setHeaderReasonCodeList(hdrReasonCodeListForApproved);
		PowerMockito.when(
				m_ServiceAuthDataBean.getHdrReasonCodeListForApproved())
				.thenReturn(hdrReasonCodeListForApproved);
		SAUIRules.executeRID_SRA2001_2101_01(saDataBean, m_ValueChangeEvent);
		assertEquals(saDataBean.getHdrReasonCodeListForApproved(),
				saDataBean.getHeaderReasonCodeList());
		Mockito.verify(m_ValueChangeEvent, Mockito.times(2)).getNewValue();

	}

	@Test
	public void testExecuteRID_SRA2001_2102_01() throws Exception {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.mockStatic(ValueChangeEvent.class);
		ValueChangeEvent m_ValueChangeEvent = PowerMockito
				.mock(ValueChangeEvent.class);
		PowerMockito.whenNew(ValueChangeEvent.class).withAnyArguments()
				.thenReturn(m_ValueChangeEvent);
		PowerMockito.when(m_ValueChangeEvent.getNewValue()).thenReturn("V");
		List<Object> hdrReasonCodeListForApproved = new ArrayList<Object>();
		PowerMockito.doNothing().when(m_ServiceAuthDataBean)
				.setHeaderReasonCodeList(hdrReasonCodeListForApproved);
		PowerMockito.when(
				m_ServiceAuthDataBean.getHdrReasonCodeListForApproved())
				.thenReturn(hdrReasonCodeListForApproved);
		SAUIRules.executeRID_SRA2001_2102_01(saDataBean, m_ValueChangeEvent);
		assertEquals(saDataBean.getHdrReasonCodeListForApproved(),
				saDataBean.getHeaderReasonCodeList());
		Mockito.verify(m_ValueChangeEvent, Mockito.times(2)).getNewValue();

	}

	@Test
	public void testExecuteRID_SRA2001_2103_01() throws Exception {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		ServiceAuthDataBean m_ServiceAuthDataBean = PowerMockito
				.mock(ServiceAuthDataBean.class);
		PowerMockito.mockStatic(ValueChangeEvent.class);
		ValueChangeEvent m_ValueChangeEvent = PowerMockito
				.mock(ValueChangeEvent.class);
		PowerMockito.whenNew(ValueChangeEvent.class).withAnyArguments()
				.thenReturn(m_ValueChangeEvent);
		PowerMockito.when(m_ValueChangeEvent.getNewValue()).thenReturn("P");
		List<Object> hdrReasonCodeListForApproved = new ArrayList<Object>();
		PowerMockito.doNothing().when(m_ServiceAuthDataBean)
				.setHeaderReasonCodeList(hdrReasonCodeListForApproved);
		PowerMockito.when(
				m_ServiceAuthDataBean.getHdrReasonCodeListForApproved())
				.thenReturn(hdrReasonCodeListForApproved);
		SAUIRules.executeRID_SRA2001_2103_01(saDataBean, m_ValueChangeEvent);
		assertEquals(saDataBean.getHdrReasonCodeListForApproved(),
				saDataBean.getHeaderReasonCodeList());
		Mockito.verify(m_ValueChangeEvent, Mockito.times(2)).getNewValue();

	}

	@Test
	public void testExecuteRID_SRA2001_2157_01() {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		DiagnosisVO diagnosisVO = new DiagnosisVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		List<Object> headerDiagnosisList = new ArrayList<Object>();
		headerDiagnosisList.add(diagnosisVO);
		saDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setHeaderDiagnosisList(headerDiagnosisList);
		diagnosisVO.setDiagnosisCodeType("diagnosis");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.prognosisCodeMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"prognosisCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2157_01(saDataBean);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2158_01() {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		PatientEventDetailVO patientEventDetailVO = new PatientEventDetailVO();
		HomeHealthCareVO homeHealthCareVO = new HomeHealthCareVO();
		HealthCareServicesReviewVO healthCareServicesReviewVO = new HealthCareServicesReviewVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		saDataBean.setPatientEventDetailVO(patientEventDetailVO);
		patientEventDetailVO.setHomeHealthCareVO(homeHealthCareVO);
		homeHealthCareVO.setCertificationTypeCode("test1");
		saDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setHealthCareServicesReviewVO(healthCareServicesReviewVO);
		healthCareServicesReviewVO.setCertificationType("test2");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2158_01(saDataBean);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2362_01() {
		HomeHealthCareVO homeHealthCareVo = new HomeHealthCareVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeHealthCareVo.setAuthProcedureCode("");
		homeHealthCareVo.setProcedureCode("procedureCode");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2362_01(homeHealthCareVo);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2363_01() {
		HomeHealthCareVO homeHealthCareVo = new HomeHealthCareVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeHealthCareVo.setAuthProcedureCode("procedureCode");
		homeHealthCareVo.setProcedureCode("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2363_01(homeHealthCareVo);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2275_01() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setEquipmentTypeCode2("");
		homeOxygenTherapyVO.setOxygenEquipCode("oxygenEquipCode");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2275_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2278_01_1() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setEquipmentTypeCode1("D");
		homeOxygenTherapyVO.setEquipmentTypeCode2("D");
		homeOxygenTherapyVO.setOxygenEquipCode("D");
		homeOxygenTherapyVO.setPortableOxygenFlowRt("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2278_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2278_01_2() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setEquipmentTypeCode1("E");
		homeOxygenTherapyVO.setEquipmentTypeCode2("D");
		homeOxygenTherapyVO.setOxygenEquipCode("D");
		homeOxygenTherapyVO.setPortableOxygenFlowRt("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2278_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2278_01_3() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setEquipmentTypeCode1("A");
		homeOxygenTherapyVO.setEquipmentTypeCode2("D");
		homeOxygenTherapyVO.setOxygenEquipCode("D");
		homeOxygenTherapyVO.setPortableOxygenFlowRt("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2278_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2278_01_4() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setEquipmentTypeCode1("A");
		homeOxygenTherapyVO.setEquipmentTypeCode2("E");
		homeOxygenTherapyVO.setOxygenEquipCode("D");
		homeOxygenTherapyVO.setPortableOxygenFlowRt("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2278_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2278_01_5() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setEquipmentTypeCode1("A");
		homeOxygenTherapyVO.setEquipmentTypeCode2("B");
		homeOxygenTherapyVO.setOxygenEquipCode("D");
		homeOxygenTherapyVO.setPortableOxygenFlowRt("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2278_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2278_01_6() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setEquipmentTypeCode1("A");
		homeOxygenTherapyVO.setEquipmentTypeCode2("B");
		homeOxygenTherapyVO.setOxygenEquipCode("E");
		homeOxygenTherapyVO.setPortableOxygenFlowRt("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2278_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_OPR0023_0001_01() {
		HomeChiropracticVO homeChiropracticVO = new HomeChiropracticVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeChiropracticVO.setTreatmentSeriesNo("");
		homeChiropracticVO.setTreatmentSeriesCount("treatmentSeriesCount");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_OPR0023_0001_01(homeChiropracticVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2276_01() {
		HomeOxygenTherapyVO homeOxygenTherapyVO = new HomeOxygenTherapyVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeOxygenTherapyVO.setArterialBloodGasQty("");
		homeOxygenTherapyVO.setOxygenSaturationQty("");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_SRA2001_2276_01(homeOxygenTherapyVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_OPR0024_0001_01() {
		HomeChiropracticVO homeChiropracticVO = new HomeChiropracticVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		homeChiropracticVO.setTreatmentSeriesCount("");
		homeChiropracticVO.setTreatmentSeriesNo("treatmentSeriesNo");
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"err.opr.oxyCertiMatch",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"certificationTypeCode");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		SAUIRules.executeRID_OPR0024_0001_01(homeChiropracticVO);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();

	}

	@Test
	public void testExecuteRID_SRA2001_2191_01_True() {
		List<Object> toothInfoList = new ArrayList<Object>();
		toothInfoList.add(1);
		toothInfoList.add(2);
		toothInfoList.add(3);
		toothInfoList.add(4);
		toothInfoList.add(5);
		toothInfoList.add(6);
		toothInfoList.add(7);
		toothInfoList.add(8);
		toothInfoList.add(9);
		toothInfoList.add(10);
		toothInfoList.add(1);
		toothInfoList.add(2);
		toothInfoList.add(3);
		toothInfoList.add(4);
		toothInfoList.add(5);
		toothInfoList.add(6);
		toothInfoList.add(7);
		toothInfoList.add(8);
		toothInfoList.add(9);
		toothInfoList.add(10);
		toothInfoList.add(1);
		toothInfoList.add(2);
		toothInfoList.add(3);
		toothInfoList.add(4);
		toothInfoList.add(5);
		toothInfoList.add(6);
		toothInfoList.add(7);
		toothInfoList.add(8);
		toothInfoList.add(9);
		toothInfoList.add(10);
		toothInfoList.add(1);
		toothInfoList.add(2);
		boolean actual = SAUIRules.executeRID_SRA2001_2191_01(toothInfoList);
		assertTrue(actual);

	}

	@Test
	public void testExecuteRID_SRA2001_2191_01_False() {
		List<Object> toothInfoList = new ArrayList<Object>();
		toothInfoList.add(1);
		toothInfoList.add(2);
		toothInfoList.add(3);
		toothInfoList.add(4);
		toothInfoList.add(5);
		toothInfoList.add(6);
		toothInfoList.add(7);
		toothInfoList.add(8);
		toothInfoList.add(9);
		toothInfoList.add(10);
		toothInfoList.add(1);
		toothInfoList.add(2);
		toothInfoList.add(3);
		toothInfoList.add(4);
		toothInfoList.add(5);
		toothInfoList.add(6);
		toothInfoList.add(7);
		toothInfoList.add(8);
		toothInfoList.add(9);
		toothInfoList.add(10);
		toothInfoList.add(1);
		toothInfoList.add(2);
		toothInfoList.add(3);
		toothInfoList.add(4);
		toothInfoList.add(5);
		toothInfoList.add(6);
		toothInfoList.add(7);
		toothInfoList.add(8);
		toothInfoList.add(9);
		toothInfoList.add(10);
		boolean actual = SAUIRules.executeRID_SRA2001_2191_01(toothInfoList);
		assertFalse(actual);
	}

	// ------------------------------------------------------------------------------------------------------------------------
	// -----------------------------------------------------------------------------------------------------------------
	@Test
	public void testExecuteRID_SRA2001_2368_01_1() {
		LineItemDentalVO lineItemDentalVO = new LineItemDentalVO();
		lineItemDentalVO.setOralCavity1("");
		lineItemDentalVO.setOralCavity2("oralCavity2");
		lineItemDentalVO.setOralCavity3("oralCavity3");
		lineItemDentalVO.setOralCavity4("oralCavity4");
		lineItemDentalVO.setOralCavity5("oralCavity5");
		boolean actual = SAUIRules.executeRID_SRA2001_2368_01(lineItemDentalVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2368_01_2() {
		LineItemDentalVO lineItemDentalVO = new LineItemDentalVO();
		lineItemDentalVO.setOralCavity1("oralCavity1");
		lineItemDentalVO.setOralCavity2("");
		lineItemDentalVO.setOralCavity3("oralCavity3");
		lineItemDentalVO.setOralCavity4("oralCavity4");
		lineItemDentalVO.setOralCavity5("oralCavity5");
		boolean actual = SAUIRules.executeRID_SRA2001_2368_01(lineItemDentalVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2368_01_3() {
		LineItemDentalVO lineItemDentalVO = new LineItemDentalVO();
		lineItemDentalVO.setOralCavity1("oralCavity1");
		lineItemDentalVO.setOralCavity2("oralCavity2");
		lineItemDentalVO.setOralCavity3("");
		lineItemDentalVO.setOralCavity4("oralCavity4");
		lineItemDentalVO.setOralCavity5("oralCavity5");
		boolean actual = SAUIRules.executeRID_SRA2001_2368_01(lineItemDentalVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2368_01_4() {
		LineItemDentalVO lineItemDentalVO = new LineItemDentalVO();
		lineItemDentalVO.setOralCavity1("oralCavity1");
		lineItemDentalVO.setOralCavity2("oralCavity2");
		lineItemDentalVO.setOralCavity3("oralCavity3");
		lineItemDentalVO.setOralCavity4("");
		lineItemDentalVO.setOralCavity5("oralCavity5");
		boolean actual = SAUIRules.executeRID_SRA2001_2368_01(lineItemDentalVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2368_01_5() {
		LineItemDentalVO lineItemDentalVO = new LineItemDentalVO();
		lineItemDentalVO.setOralCavity1("");
		lineItemDentalVO.setOralCavity2("");
		lineItemDentalVO.setOralCavity3("");
		lineItemDentalVO.setOralCavity4("");
		lineItemDentalVO.setOralCavity5("");
		boolean actual = SAUIRules.executeRID_SRA2001_2368_01(lineItemDentalVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2349_01_01() {
		LineItemToothVO lineItemToothVO = new LineItemToothVO();
		lineItemToothVO.setToothSurface1("");
		lineItemToothVO.setToothSurface2("toothSurface2");
		lineItemToothVO.setToothSurface3("toothSurface3");
		lineItemToothVO.setToothSurface4("toothSurface4");
		lineItemToothVO.setToothSurface5("toothSurface5");
		boolean actual = SAUIRules.executeRID_SRA2001_2349_01(lineItemToothVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2349_01_02() {
		LineItemToothVO lineItemToothVO = new LineItemToothVO();
		lineItemToothVO.setToothSurface1("toothSurface1");
		lineItemToothVO.setToothSurface2("");
		lineItemToothVO.setToothSurface3("toothSurface3");
		lineItemToothVO.setToothSurface4("toothSurface4");
		lineItemToothVO.setToothSurface5("toothSurface5");
		boolean actual = SAUIRules.executeRID_SRA2001_2349_01(lineItemToothVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2349_01_03() {
		LineItemToothVO lineItemToothVO = new LineItemToothVO();
		lineItemToothVO.setToothSurface1("toothSurface1");
		lineItemToothVO.setToothSurface2("toothSurface2");
		lineItemToothVO.setToothSurface3("");
		lineItemToothVO.setToothSurface4("toothSurface4");
		lineItemToothVO.setToothSurface5("toothSurface5");
		boolean actual = SAUIRules.executeRID_SRA2001_2349_01(lineItemToothVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2349_01_04() {
		LineItemToothVO lineItemToothVO = new LineItemToothVO();
		lineItemToothVO.setToothSurface1("toothSurface1");
		lineItemToothVO.setToothSurface2("toothSurface2");
		lineItemToothVO.setToothSurface3("toothSurface3");
		lineItemToothVO.setToothSurface4("");
		lineItemToothVO.setToothSurface5("toothSurface5");
		boolean actual = SAUIRules.executeRID_SRA2001_2349_01(lineItemToothVO);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2349_01_05() {
		LineItemToothVO lineItemToothVO = new LineItemToothVO();
		lineItemToothVO.setToothSurface1("");
		lineItemToothVO.setToothSurface2("");
		lineItemToothVO.setToothSurface3("");
		lineItemToothVO.setToothSurface4("");
		lineItemToothVO.setToothSurface5("");
		boolean actual = SAUIRules.executeRID_SRA2001_2349_01(lineItemToothVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2348_01_True() {
		String toothNum = "";
		boolean actual = SAUIRules.executeRID_SRA2001_2348_01(toothNum);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2348_01_False() {
		String toothNum = "test";
		boolean actual = SAUIRules.executeRID_SRA2001_2348_01(toothNum);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2336_01_True() {
		String providerCode = "";
		String taxonomyCode = "test";
		boolean actual = SAUIRules.executeRID_SRA2001_2336_01(providerCode,
				taxonomyCode);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2336_01_False() {
		String providerCode = "test";
		String taxonomyCode = "";
		boolean actual = SAUIRules.executeRID_SRA2001_2336_01(providerCode,
				taxonomyCode);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_OPR0053_0001_01_True() throws Exception {
		SAHeaderDiagnosis saHeaderDiagnosis = new SAHeaderDiagnosis();
		ServiceAuthorization serviceAuth = new ServiceAuthorization();
		ServiceAuthProcessVO processVO = new ServiceAuthProcessVO();
		String htmlElementIdPrefix = "";
		String from = "12/13/2012";
		String to = "12/12/2012";
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		Date beginDate = sdf.parse(from);
		Date requestedBeginDate = sdf.parse(to);
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.validateSADiagnosisCodes(
						saHeaderDiagnosis, serviceAuth)).thenReturn(processVO);
		processVO.setDiagnosisCodeValidFlag(true);
		boolean actual = SAUIRules.executeRID_OPR0053_0001_01(
				saHeaderDiagnosis, htmlElementIdPrefix, beginDate,
				requestedBeginDate);
		assertTrue(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.validateSADiagnosisCodes(saHeaderDiagnosis, serviceAuth);
	}

	@Test
	public void testExecuteRID_OPR0053_0001_01_False() throws Exception {
		SAHeaderDiagnosis saHeaderDiagnosis = new SAHeaderDiagnosis();
		ServiceAuthorization serviceAuth = new ServiceAuthorization();
		ServiceAuthProcessVO processVO = new ServiceAuthProcessVO();
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		String htmlElementIdPrefix = "";
		String from = "12/13/2012";
		String to = "12/12/2012";
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		Date beginDate = sdf.parse(from);
		Date requestedBeginDate = sdf.parse(to);
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.validateSADiagnosisCodes(
						saHeaderDiagnosis, serviceAuth)).thenReturn(processVO);
		processVO.setDiagnosisCodeValidFlag(false);
		PowerMockito.doNothing().when(m_SAMaintenanceUtil)
				.setFieldCustomErrMessage("messageKey", "bundleName", "jspId");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules.executeRID_OPR0053_0001_01(
				saHeaderDiagnosis, htmlElementIdPrefix, beginDate,
				requestedBeginDate);
		assertFalse(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.validateSADiagnosisCodes(saHeaderDiagnosis, serviceAuth);
		Mockito.verify(m_FacesContext, Mockito.times(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();

	}

	@Test
	public void testExecuteRID_SRA2001_1966_01() {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		saDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("V");
		SAUIRules.executeRID_SRA2001_1966_01(saDataBean);
		assertNotNull(saDataBean);
		assertEquals(true, saDataBean.isInquiryShowReadonly());
	}

	@Test
	public void testExecuteRID_SRA2001_1966_01_LI_True() {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		saDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		List<Object> reasonCodeListForVoided = new ArrayList<Object>();
		serviceAuthHeaderDetails.setCurrentStatus("V");
		serviceAuthHeaderDetails.setReasonCode("test");
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		saDataBean.setReasonCodeListForVoided(reasonCodeListForVoided);
		boolean actual = SAUIRules.executeRID_SRA2001_1966_01_LI(saDataBean);
		assertTrue(actual);
		assertEquals("V", saDataBean.getBasicServicesDetailsVO()
				.getServiceAuthLineItemsVO().getStatus());
		assertEquals("test", saDataBean.getBasicServicesDetailsVO()
				.getServiceAuthLineItemsVO().getStatusChangeReason());
	}

	@Test
	public void testExecuteRID_SRA2001_1966_01_LI_False() {
		ServiceAuthDataBean saDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		saDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		List<Object> reasonCodeListForVoided = new ArrayList<Object>();
		serviceAuthHeaderDetails.setCurrentStatus("");
		serviceAuthHeaderDetails.setReasonCode("test");
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		saDataBean.setReasonCodeListForVoided(reasonCodeListForVoided);
		boolean actual = SAUIRules.executeRID_SRA2001_1966_01_LI(saDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2131_01_1() {
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		EnterpriseUserProfile enterpriseUserProfile = new EnterpriseUserProfile();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		enterpriseUserProfile.setOrganizationId("test");
		dataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		SAUIRules.executeRID_SRA2001_2131_01(dataBean, enterpriseUserProfile);
		assertNotNull(dataBean);
		assertEquals("test", dataBean.getBasicServicesDetailsVO()
				.getRequestingProviderDetailsVO().getProviderID());
	}

	@Test
	public void testExecuteRID_SRA2001_2131_01_2() {
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		EnterpriseUserProfile enterpriseUserProfile = new EnterpriseUserProfile();
		enterpriseUserProfile.setOrganizationId("");
		SAUIRules.executeRID_SRA2001_2131_01(dataBean, enterpriseUserProfile);
		assertNotNull(dataBean);
		assertEquals(null, dataBean.getBasicServicesDetailsVO()
				.getRequestingProviderDetailsVO().getProviderID());
	}

	@Test
	public void testExecuteRID_SRA2001_2132_01() throws Exception {
		ServiceAuthDataBean dataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		AlternateIdInfo alternateIdInfo = new AlternateIdInfo();
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		AlternateIdInfo m_AlternateIdInfo = PowerMockito
				.mock(AlternateIdInfo.class);
		dataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderID("test");
		PowerMockito.when(
				m_ServiceAuthDelegate.getBillingProviderDetails("test"))
				.thenReturn(m_AlternateIdInfo);
		alternateIdInfo.setAlternateID("alternateID");
		alternateIdInfo.setTypeCode("XX");
		SAUIRules.executeRID_SRA2001_2132_01(dataBean);
		assertNotNull(dataBean);
		assertEquals(null, dataBean.getBasicServicesDetailsVO()
				.getRequestingProviderDetailsVO().getProviderID());
		assertEquals(null, dataBean.getBasicServicesDetailsVO()
				.getRequestingProviderDetailsVO().getProviderIDType());
	}

	@Test
	public void testExecuteRID_SRA2001_2340_01_1() throws Exception {
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		requestingProviderDetailsVO.setProviderID("providerID");
		List<Object> provIdList = new ArrayList<Object>();
		provIdList.add(1);
		provIdList.add(2);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderSysList("providerID", "W",
						"submitterID", true)).thenReturn(provIdList);
		requestingProviderDetailsVO.setState("");
		requestingProviderDetailsVO.setCity("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2340_01(requestingProviderDetailsVO);
		assertTrue(actual);

	}

	@Test
	public void testExecuteRID_SRA2001_2340_01_2() throws Exception {
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		requestingProviderDetailsVO.setProviderID("providerID");
		List<Object> provIdList = new ArrayList<Object>();
		provIdList.add(1);
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderSysList("providerID", "W",
						"submitterID", true)).thenReturn(provIdList);
		requestingProviderDetailsVO.setState("");
		requestingProviderDetailsVO.setCity("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2340_01(requestingProviderDetailsVO);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1962_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("D");
		SAUIRules.executeRID_SRA2001_1962_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(true,
				serviceAuthDataBean.isRequestingProviderSectionProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1962_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("V");
		SAUIRules.executeRID_SRA2001_1962_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(true,
				serviceAuthDataBean.isRequestingProviderSectionProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1962_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("A");
		SAUIRules.executeRID_SRA2001_1962_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(true,
				serviceAuthDataBean.isRequestingProviderSectionProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1962_01_4() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("B");
		SAUIRules.executeRID_SRA2001_1962_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(false,
				serviceAuthDataBean.isRequestingProviderSectionProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1963_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("A");
		SAUIRules.executeRID_SRA2001_1963_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(true,
				serviceAuthDataBean.isEventProviderSectionProtected());
		assertEquals(false,
				serviceAuthDataBean.isLiEventProviderSectionProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1963_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("D");
		SAUIRules.executeRID_SRA2001_1963_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(true,
				serviceAuthDataBean.isEventProviderSectionProtected());
		assertEquals(true,
				serviceAuthDataBean.isLiEventProviderSectionProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1963_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("V");
		SAUIRules.executeRID_SRA2001_1963_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(true,
				serviceAuthDataBean.isEventProviderSectionProtected());
		assertEquals(true,
				serviceAuthDataBean.isLiEventProviderSectionProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1963_01_4() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("B");
		SAUIRules.executeRID_SRA2001_1963_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(false,
				serviceAuthDataBean.isEventProviderSectionProtected());
		assertEquals(false,
				serviceAuthDataBean.isLiEventProviderSectionProtected());
	}

	@Test
	public void testExecute_RID_SRA2001_1958_01_RID_SRA2001_1150_01_RID_SRA2001_1110_01_1()
			throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		PowerMockito.mockStatic(ServiceAuthControllerBean.class);
		ServiceAuthControllerBean m_ServiceAuthControllerBean = PowerMockito
				.mock(ServiceAuthControllerBean.class);
		PowerMockito.whenNew(ServiceAuthControllerBean.class)
				.withAnyArguments().thenReturn(m_ServiceAuthControllerBean);
		LettersVO letter = new LettersVO();
		List<Object> supUserList = new ArrayList<Object>();
		supUserList.add("loggedInUserID");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setLetter(letter);
		letter.setText("text");
		PowerMockito.doNothing().when(m_ServiceAuthControllerBean)
				.setLoggedinUserID(serviceAuthDataBean);
		serviceAuthDataBean.setAppravalList(supUserList);
		serviceAuthDataBean.setLoggedInUserID("loggedInUserID");
		SAUIRules
				.execute_RID_SRA2001_1958_01_RID_SRA2001_1150_01_RID_SRA2001_1110_01(serviceAuthDataBean);
		assertEquals(false, serviceAuthDataBean.isDisableApprovedTextField());
		Mockito.verify(m_ServiceAuthControllerBean);
	}

	@Test
	public void testExecute_RID_SRA2001_1958_01_RID_SRA2001_1150_01_RID_SRA2001_1110_01_2()
			throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		PowerMockito.mockStatic(ServiceAuthControllerBean.class);
		ServiceAuthControllerBean m_ServiceAuthControllerBean = PowerMockito
				.mock(ServiceAuthControllerBean.class);
		PowerMockito.whenNew(ServiceAuthControllerBean.class)
				.withAnyArguments().thenReturn(m_ServiceAuthControllerBean);
		LettersVO letter = new LettersVO();
		List<Object> supUserList = new ArrayList<Object>();
		supUserList.add("loggedInUserID");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setLetter(letter);
		letter.setText("");
		PowerMockito.doNothing().when(m_ServiceAuthControllerBean)
				.setLoggedinUserID(serviceAuthDataBean);
		serviceAuthDataBean.setAppravalList(supUserList);
		serviceAuthDataBean.setLoggedInUserID("loggedInUserID");
		SAUIRules
				.execute_RID_SRA2001_1958_01_RID_SRA2001_1150_01_RID_SRA2001_1110_01(serviceAuthDataBean);
		assertEquals(false, serviceAuthDataBean.isDisableApprovedTextField());
		Mockito.verify(m_ServiceAuthControllerBean);
	}

	@Test
	public void testExecuteRID_SRA2001_2194_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		SAUIRules.executeRID_SRA2001_2194_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(false, serviceAuthDataBean.getRenderingFlagsVO()
				.isRenderSameReqEventProvQuestion());
	}

	@Test
	public void testExecuteRID_SRA2001_2192_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVOCopy = new SupplementalProviderVO();
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		renderingFlagsVO.setHdrReqEventSameAnswer("yes");
		List<Object> supplementalProviderList = new ArrayList<Object>();
		supplementalProviderList.add(supplementalProviderVOCopy);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO
				.setSupplementalProviderList(supplementalProviderList);
		requestingProviderDetailsVO.setProviderIDType("providerIDType");
		supplementalProviderVOCopy.setProviderIDType("ZH");
		SAUIRules.executeRID_SRA2001_2192_01(serviceAuthDataBean);
		SupplementalProviderVO p = (SupplementalProviderVO) serviceAuthDataBean
				.getBasicServicesDetailsVO().getRequestingProviderDetailsVO()
				.getSupplementalProviderList().get(0);
		assertNotNull(serviceAuthDataBean);
		assertEquals(1, serviceAuthDataBean.getBasicServicesDetailsVO()
				.getRequestingProviderDetailsVO().getSupplementalProviderList()
				.size());
		assertEquals("ZH", p.getProviderIDType());
	}

	@Test
	public void testExecuteRID_SRA2001_2387_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthRenderingFlagsVO renderingFlagsVO = new ServiceAuthRenderingFlagsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVOCopy = new SupplementalProviderVO();
		serviceAuthDataBean.setRenderingFlagsVO(renderingFlagsVO);
		renderingFlagsVO.setHdrReqEventSameAnswer("yes");
		List<Object> supplementalProviderList = new ArrayList<Object>();
		supplementalProviderList.add(supplementalProviderVOCopy);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO
				.setSupplementalProviderList(supplementalProviderList);
		requestingProviderDetailsVO.setProviderIDType("providerIDType");
		supplementalProviderVOCopy.setProviderIDType("1D");
		SAUIRules.executeRID_SRA2001_2387_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		SupplementalProviderVO p = (SupplementalProviderVO) serviceAuthDataBean
				.getBasicServicesDetailsVO().getRequestingProviderDetailsVO()
				.getSupplementalProviderList().get(0);
		assertNotNull(serviceAuthDataBean);
		assertEquals(1, serviceAuthDataBean.getBasicServicesDetailsVO()
				.getRequestingProviderDetailsVO().getSupplementalProviderList()
				.size());
		assertEquals("1D", p.getProviderIDType());
	}

	@Test
	public void testExecuteRID_SRA2001_2193_01() {
		ProviderDetailsVO eventProviderVO = new ProviderDetailsVO();
		SAUIRules.executeRID_SRA2001_2193_01(eventProviderVO);
		assertNotNull(eventProviderVO);
		assertEquals("SJ", eventProviderVO.getEntityCode());
	}

	@Test
	public void testExecuteRID_SRA2001_2346_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ContactInfoVO contactVO = new ContactInfoVO();
		List<Object> eventProviderList = new ArrayList<Object>();
		eventProviderList.add(1);
		contactVO.setName("name");
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("email");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(eventProviderList);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setSupplementalProviderList(eventProviderList);
		eventProviderDetailsVO.setAddressLine1("addressLine1");
		eventProviderDetailsVO.setAddressLine2("addressLine2");
		eventProviderDetailsVO.setCity("city");
		;
		eventProviderDetailsVO.setState("state");
		eventProviderDetailsVO.setZip("zip");
		eventProviderDetailsVO.setCountry("country");
		eventProviderDetailsVO.setLastName("lastName");
		eventProviderDetailsVO.setFirstName("firstName");
		eventProviderDetailsVO.setMiddleInitial("middleInitial");
		eventProviderDetailsVO.setSuffix("suffix");
		eventProviderDetailsVO.setProviderID("providerID");
		eventProviderDetailsVO.setProviderIDType("providerIDType");
		eventProviderDetailsVO.setEntityCode("entityCode");
		eventProviderDetailsVO.setEntityType("entityType");
		eventProviderDetailsVO.setProviderCode("providerCode");
		eventProviderDetailsVO.setTaxonomyCode("taxonomyCode");
		eventProviderDetailsVO.setProviderCodeDesc("providerCodeDesc");
		SAUIRules.executeRID_SRA2001_2346_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(0, serviceAuthDataBean.getBasicServicesDetailsVO()
				.getEventProviderDetailsList().size());
	}

	@Test
	public void testExecuteRID_SRA2001_2346_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ContactInfoVO contactVO = new ContactInfoVO();
		List<Object> eventProviderList = new ArrayList<Object>();
		eventProviderList.add(1);
		contactVO.setName("name");
		contactVO.setPhone("phone");
		contactVO.setExtension("extension");
		contactVO.setFax("fax");
		contactVO.setEmail("email");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(eventProviderList);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setSupplementalProviderList(eventProviderList);
		eventProviderDetailsVO.setAddressLine1("addressLine1");
		eventProviderDetailsVO.setAddressLine2("addressLine2");
		eventProviderDetailsVO.setCity("city");
		;
		eventProviderDetailsVO.setState("state");
		eventProviderDetailsVO.setZip4("zip4");
		eventProviderDetailsVO.setCountrySubdiv("countrySubdiv");
		SAUIRules.executeRID_SRA2001_2346_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(0, serviceAuthDataBean.getBasicServicesDetailsVO()
				.getEventProviderDetailsList().size());

	}

	@Test
	public void testExecuteRID_SRA2001_2346_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ContactInfoVO contactVO = new ContactInfoVO();
		List<Object> eventProviderList = new ArrayList<Object>();
		eventProviderList.add(1);
		contactVO.setName("");
		contactVO.setPhone("");
		contactVO.setExtension("");
		contactVO.setFax("");
		contactVO.setEmail("");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(eventProviderList);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setSupplementalProviderList(eventProviderList);
		eventProviderDetailsVO.setAddressLine1("");
		eventProviderDetailsVO.setAddressLine2("");
		eventProviderDetailsVO.setCity("");
		;
		eventProviderDetailsVO.setState("");
		eventProviderDetailsVO.setZip("");
		eventProviderDetailsVO.setCountry("");
		eventProviderDetailsVO.setLastName("");
		eventProviderDetailsVO.setFirstName("");
		eventProviderDetailsVO.setMiddleInitial("");
		eventProviderDetailsVO.setSuffix("");
		eventProviderDetailsVO.setProviderID("");
		eventProviderDetailsVO.setProviderIDType("");
		eventProviderDetailsVO.setEntityCode("");
		eventProviderDetailsVO.setEntityType("");
		eventProviderDetailsVO.setProviderCode("");
		eventProviderDetailsVO.setTaxonomyCode("");
		eventProviderDetailsVO.setProviderCodeDesc("");
		SAUIRules.executeRID_SRA2001_2346_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(0, serviceAuthDataBean.getBasicServicesDetailsVO()
				.getEventProviderDetailsList().size());

	}

	@Test
	public void testExecuteRID_SRA2001_2160_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		List<Object> eventProviderList = new ArrayList<Object>();
		eventProviderList.add(eventProviderDetailsVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(eventProviderList);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"unitsof-measure-required",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"unitOfMeasure");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2160_01(serviceAuthDataBean);
		assertTrue(actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2197_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		List<Object> eventProviderList = new ArrayList<Object>();
		eventProviderList.add(eventProviderDetailsVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(eventProviderList);
		SAMaintenanceUtil m_SAMaintenanceUtil = PowerMockito
				.mock(SAMaintenanceUtil.class);
		FacesContext m_FacesContext = ContextMocker.mockFacesContext();
		UIViewRoot m_UIViewRoot = PowerMockito.mock(UIViewRoot.class);
		Application m_Application = PowerMockito.mock(Application.class);
		Locale m_Locale = PowerMockito.mock(Locale.class);
		PowerMockito
				.doNothing()
				.when(m_SAMaintenanceUtil)
				.setFieldAndHeadErrMessage(
						"unitsof-measure-required",
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource",
						"unitOfMeasure");
		PowerMockito.when(m_FacesContext.getViewRoot())
				.thenReturn(m_UIViewRoot);
		PowerMockito.when(m_UIViewRoot.getLocale()).thenReturn(m_Locale);
		PowerMockito.when(m_FacesContext.getApplication()).thenReturn(
				m_Application);
		PowerMockito
				.doNothing()
				.when(m_Application)
				.setMessageBundle(
						"opr_in_serviceauthorizationdetails.nl.OPR_IN_ServiceAuthorizationDetailsPortletResource");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2197_01(serviceAuthDataBean);
		assertTrue(actual);
		Mockito.verify(m_FacesContext, Mockito.atLeast(1)).getViewRoot();
		Mockito.verify(m_UIViewRoot, Mockito.times(1)).getLocale();
		Mockito.verify(m_FacesContext, Mockito.times(1)).getApplication();
	}

	@Test
	public void testExecuteRID_SRA2001_2198_01_1() {
		String level = "supplnLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("XX");
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("ZH");
		boolean actual = SAUIRules.executeRID_SRA2001_2198_01(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2198_01_2() {
		String level = "mainLevel";
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		List<Object> supplnList = new ArrayList<Object>();
		supplnList.add(supplementalProviderVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("XX");
		eventProviderDetailsVO.setSupplementalProviderList(supplnList);
		supplementalProviderVO.setProviderIDType("ZH");
		boolean actual = SAUIRules.executeRID_SRA2001_2198_01(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2339_01_1() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("providerId");
		eventProviderDetailsVO.setProviderID("providerIdType");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderExistFlag("providerId",
						"providerIdType")).thenReturn(true);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2339_01(serviceAuthDataBean);
		assertTrue(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderExistFlag("providerIdType", "providerId");
	}

	@Test
	public void testExecuteRID_SRA2001_2339_01_2() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsVO(eventProviderDetailsVO);
		eventProviderDetailsVO.setProviderIDType("providerId");
		eventProviderDetailsVO.setProviderID("providerIdType");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderExistFlag("providerId",
						"providerIdType")).thenReturn(false);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2339_01(serviceAuthDataBean);
		assertTrue(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderExistFlag("providerIdType", "providerId");

	}

	@Test
	public void testExecuteRID_SRA2001_2341_01_1() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		;
		List<Object> provIdList = new ArrayList<Object>();
		provIdList.add(1);
		provIdList.add(2);
		eventProviderDetailsVO.setProviderID("providerId");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("providerIdtype");
		requestingProviderDetailsVO.setProviderID("providerId");
		eventProviderDetailsVO.setProviderIDType("providerIdtype");
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderSysList("providerId", "W",
						"submitterID", true)).thenReturn(provIdList);
		eventProviderDetailsVO.setCity("");
		eventProviderDetailsVO.setState("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2341_01(eventProviderDetailsVO);
		assertTrue(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderSysList("providerId", "W", "submitterID", true);

	}

	@Test
	public void testExecuteRID_SRA2001_2341_01_2() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		List<Object> provIdList = new ArrayList<Object>();
		provIdList.add(1);
		provIdList.add(2);
		eventProviderDetailsVO.setProviderIDType("providerId");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderSysList("providerId", "W",
						"submitterID", true)).thenReturn(provIdList);
		eventProviderDetailsVO.setCity("");
		eventProviderDetailsVO.setState("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2341_01(eventProviderDetailsVO);
		assertFalse(actual);

	}

	@Test
	public void testExecuteRID_SRA2001_2341_01_3() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		List<Object> provIdList = new ArrayList<Object>();
		eventProviderDetailsVO.setProviderID("providerId");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("providerIdtype");
		requestingProviderDetailsVO.setProviderID("providerId");
		eventProviderDetailsVO.setProviderIDType("providerIdtype");
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderSysList("providerId", "W",
						"submitterID", true)).thenReturn(provIdList);
		eventProviderDetailsVO.setCity("");
		eventProviderDetailsVO.setState("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2341_01(eventProviderDetailsVO);
		assertFalse(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderSysList("providerId", "W", "submitterID", true);

	}

	@Test
	public void testExecuteRID_SRA2001_2343_01() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		List<Object> provIdList = new ArrayList<Object>();
		provIdList.add(1);
		provIdList.add(2);
		eventProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderID("providerId");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setSubmitterID("submitterID");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderSysList("providerId", "W",
						"submitterID", true)).thenReturn(provIdList);
		eventProviderDetailsVO.setCity("");
		eventProviderDetailsVO.setZip("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2343_01(eventProviderDetailsVO);
		assertFalse(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderSysList("providerId", "W", "submitterID", false);

	}

	@Test
	public void testExecuteRID_SRA2001_2195_01_1() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		SystemListDetail sysListDetailDO = new SystemListDetail();
		Set<SystemListDetail> hipaaToMmisPrimaryMappingSet = null;
		String supplnEventProviderId = "";
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO
				.setHipaaToMmisPrimaryMappingSet(hipaaToMmisPrimaryMappingSet);
		sysListDetailDO.setEndingValue("endingValue");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderExistFlag("providerId",
						"providerIdType")).thenReturn(true);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2195_01(supplnEventProviderId);
		assertTrue(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderExistFlag("", null);

	}

	@Test
	public void testExecuteRID_SRA2001_2195_01_2() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		SystemListDetail sysListDetailDO = new SystemListDetail();
		Set<SystemListDetail> hipaaToMmisPrimaryMappingSet = null;
		String supplnEventProviderId = "";
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO
				.setHipaaToMmisPrimaryMappingSet(hipaaToMmisPrimaryMappingSet);
		PowerMockito.stub(
				PowerMockito.method(SAUIRules.class, "returnMappingValue"))
				.toReturn(sysListDetailDO);
		sysListDetailDO.setEndingValue("endingValue");
		sysListDetailDO.setStartingValue("test");
		ServiceAuthDelegate m_ServiceAuthDelegate = PowerMockito
				.mock(ServiceAuthDelegate.class);
		PowerMockito.whenNew(ServiceAuthDelegate.class).withAnyArguments()
				.thenReturn(m_ServiceAuthDelegate);
		PowerMockito.when(
				m_ServiceAuthDelegate.getProviderExistFlag("providerId",
						"providerIdType")).thenReturn(false);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2195_01(supplnEventProviderId);
		assertTrue(actual);
		Mockito.verify(m_ServiceAuthDelegate, Mockito.times(1))
				.getProviderExistFlag("", "dingValue");

	}

	@Test
	public void testExecuteRID_SRA2001_2195_01_3() throws Exception {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ProviderValidValuesVO providerValidValuesVO = new ProviderValidValuesVO();
		SystemListDetail sysListDetailDO = new SystemListDetail();
		Set<SystemListDetail> hipaaToMmisPrimaryMappingSet = null;
		String supplnEventProviderId = "";
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setProviderValidValuesVO(providerValidValuesVO);
		providerValidValuesVO
				.setHipaaToMmisPrimaryMappingSet(hipaaToMmisPrimaryMappingSet);
		PowerMockito.stub(
				PowerMockito.method(SAUIRules.class, "returnMappingValue"))
				.toReturn(sysListDetailDO);
		sysListDetailDO.setEndingValue("endingValue");
		sysListDetailDO.setStartingValue("test");
		PowerMockito.stub(
				PowerMockito.method(ServiceAuthDelegate.class,
						"getProviderExistFlag")).toReturn(true);
		boolean actual = SAUIRules
				.executeRID_SRA2001_2195_01(supplnEventProviderId);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_1967_01() {
		SAClaimUpdatesInfo saClaimUpdatesInfo = new SAClaimUpdatesInfo();
		EnterpriseClaimLineItem enterpriseClaimLineItem = new EnterpriseClaimLineItem();
		Set<Object> saClaimUpdatesSet = new HashSet<Object>();
		saClaimUpdatesSet.add(saClaimUpdatesInfo);
		LineItemDentalVO lineItemDentalVO = new LineItemDentalVO();
		saClaimUpdatesInfo.setEnterpriseClaimLineItem(enterpriseClaimLineItem);
		enterpriseClaimLineItem.setTcnNum("tcnNum");
		SAUIRules.executeRID_SRA2001_1967_01(saClaimUpdatesSet,
				lineItemDentalVO);
		assertNotNull(enterpriseClaimLineItem);
		assertEquals(true, lineItemDentalVO.isDentalIetmProtected());
	}

	@Test
	public void testExecuteRID_SRA2001_1022_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderVO = new ProviderDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> eventProviderDetailsList = new ArrayList<Object>();
		eventProviderDetailsList.add(eventProviderVO);
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setEventProviderDetailsList(eventProviderDetailsList);
		eventProviderVO.setEntityCode("SJ");
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		SAUIRules.executeRID_SRA2001_1022_01();
		assertNotNull(serviceAuthDataBean);
		assertEquals(1, serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthLineItemsVO().getServicingProviderLineItemList()
				.size());
	}

	@Test
	public void testCopyEventToServicingProvider_1() {
		ServicingProviderVO servProviderVO = new ServicingProviderVO();
		ProviderDetailsVO eventProviderVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		List<Object> servicingSuppProvList = new ArrayList<Object>();
		servicingSuppProvList.add(supplementalProviderVO);
		servicingSuppProvList.add(supplementalProviderVO);
		eventProviderVO.setEntityCode("ad");
		eventProviderVO.setSupplementalProviderList(servicingSuppProvList);
		servProviderVO = SAUIRules
				.copyEventToServicingProvider(eventProviderVO);
		assertNotNull(servProviderVO);
		assertEquals("ad", servProviderVO.getEntityCode());
	}

	@Test(expected = ClassCastException.class)
	public void testCopyEventToServicingProvider_2() {
		ProviderDetailsVO eventProviderVO = new ProviderDetailsVO();
		List<Object> servicingSuppProvList = new ArrayList<Object>();
		servicingSuppProvList.add(1);
		servicingSuppProvList.add(2);
		eventProviderVO.setSupplementalProviderList(servicingSuppProvList);
		SAUIRules.copyEventToServicingProvider(eventProviderVO);
	}

	@Test
	public void testCheckEventEntityCode_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		List<Object> list1 = new ArrayList<Object>();
		list1.add(eventProviderDetailsVO);
		List<Object> list2 = new ArrayList<Object>();
		list2.add(serviceAuthLineItemVO);
		List<Object> list3 = new ArrayList<Object>();
		list3.add(servicingProviderVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(list1);
		basicServicesDetailsVO.setServiceAuthLineItemsList(list2);
		eventProviderDetailsVO.setEntityCode("SJ");
		serviceAuthLineItemVO.setServicingProviderLineItemList(list3);
		SAUIRules.checkEventEntityCode(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		// no values have been set and mocking
	}

	@Test
	public void testCheckEventEntityCode_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		List<Object> list1 = new ArrayList<Object>();
		list1.add(eventProviderDetailsVO);
		List<Object> list2 = new ArrayList<Object>();
		list2.add(serviceAuthLineItemVO);
		List<Object> list3 = new ArrayList<Object>();
		list3.add(servicingProviderVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(list1);
		basicServicesDetailsVO.setServiceAuthLineItemsList(list2);
		eventProviderDetailsVO.setEntityCode("test");
		servicingProviderVO.setEntityCode("SJ");
		serviceAuthLineItemVO.setServicingProviderLineItemList(list3);
		SAUIRules.checkEventEntityCode(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		// no values have been set and mocking
	}

	@Test
	public void testCheckEventEntityCode_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO eventProviderDetailsVO = new ProviderDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemVO = new ServiceAuthLineItemsVO();
		ServicingProviderVO servicingProviderVO = new ServicingProviderVO();
		List<Object> list1 = new ArrayList<Object>();
		list1.add(eventProviderDetailsVO);
		List<Object> list2 = new ArrayList<Object>();
		list2.add(serviceAuthLineItemVO);
		List<Object> list3 = new ArrayList<Object>();
		list3.add(servicingProviderVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setEventProviderDetailsList(list1);
		basicServicesDetailsVO.setServiceAuthLineItemsList(list2);
		eventProviderDetailsVO.setEntityCode("test");
		servicingProviderVO.setEntityCode("test");
		serviceAuthLineItemVO.setServicingProviderLineItemList(list3);
		SAUIRules.checkEventEntityCode(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		// no values have been set and mocking
	}

	@Test
	public void testValidateDiagnosis_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		boolean actual = SAUIRules.validateDiagnosis();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosis_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		boolean actual = SAUIRules.validateDiagnosis();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosis_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		lineItemDiag.setThrid("thrid");
		boolean actual = SAUIRules.validateDiagnosis();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosis_4() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		lineItemDiag.setThrid("thrid");
		lineItemDiag.setFourth("fourth");
		boolean actual = SAUIRules.validateDiagnosis();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosis_5() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setFourth("fourth");
		boolean actual = SAUIRules.validateDiagnosis();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosis_6() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setThrid("thrid");
		boolean actual = SAUIRules.validateDiagnosis();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosis_7() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setSecond("second");
		boolean actual = SAUIRules.validateDiagnosis();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelectionInternal_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		lineItemDiag.setThrid("thrid");
		lineItemDiag.setFourth("fourth");
		boolean actual = SAUIRules.validateDiagnosisSelectionInternal();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosisSelectionInternal_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		lineItemDiag.setThrid("thrid");
		boolean actual = SAUIRules.validateDiagnosisSelectionInternal();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosisSelectionInternal_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		boolean actual = SAUIRules.validateDiagnosisSelectionInternal();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosisSelectionInternal_4() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		boolean actual = SAUIRules.validateDiagnosisSelectionInternal();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosisSelectionInternal_5() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setSecond("second");
		boolean actual = SAUIRules.validateDiagnosisSelectionInternal();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelectionInternal_6() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setThrid("thrid");
		boolean actual = SAUIRules.validateDiagnosisSelectionInternal();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelectionInternal_7() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setFourth("fourth");
		boolean actual = SAUIRules.validateDiagnosisSelectionInternal();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelection_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		lineItemDiag.setThrid("thrid");
		lineItemDiag.setFourth("fourth");
		boolean actual = SAUIRules.validateDiagnosisSelection();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelection_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		lineItemDiag.setThrid("thrid");
		boolean actual = SAUIRules.validateDiagnosisSelection();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelection_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		lineItemDiag.setSecond("second");
		boolean actual = SAUIRules.validateDiagnosisSelection();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelection_4() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setPrimary("primary");
		boolean actual = SAUIRules.validateDiagnosisSelection();
		assertFalse(actual);
	}

	@Test
	public void testValidateDiagnosisSelection_5() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setSecond("second");
		boolean actual = SAUIRules.validateDiagnosisSelection();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosisSelection_6() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setThrid("thrid");
		boolean actual = SAUIRules.validateDiagnosisSelection();
		assertTrue(actual);
	}

	@Test
	public void testValidateDiagnosisSelection_7() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		DiagnosisVO lineItemDiag = new DiagnosisVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		List<Object> diagnosisList = new ArrayList<Object>();
		diagnosisList.add(lineItemDiag);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		serviceAuthLineItemsVO.setDiagPointersList(diagnosisList);
		lineItemDiag.setFourth("fourth");
		boolean actual = SAUIRules.validateDiagnosisSelection();
		assertTrue(actual);
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecute_setEnteredDate() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		SAUIRules.execute_setEnteredDate();
		assertNotNull(serviceAuthDataBean);

		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");

	}

	@Test
	public void testExecute_SetReceviedDate() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthLineItemsVO(serviceAuthLineItemsVO);
		SAUIRules.execute_SetReceviedDate();
		assertNotNull(serviceAuthDataBean);
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("DE");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("AD", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_02() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("0");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("HC", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_03() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("1");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("HC", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_04() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceCode("serviceCode");
		saLineServiceInfo.setServiceTYCode("3");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_05() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceCode("serviceCode");
		saLineServiceInfo.setServiceTYCode("4");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		saLineServiceInfo.setServiceThroughCode("serviceThroughCode");
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_06() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("8");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("ID", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_07() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("9");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("ID", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_08() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("2");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_09() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("5");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals("", serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testExecuteRID_SRA2001_2407_10() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setMediaTypeCode("mediaTypeCode");
		PowerMockito.mockStatic(ServiceAuthHelper.class);
		PowerMockito.mockStatic(ServiceAuthBaseHelper.class);
		PowerMockito.mockStatic(EnterpriseBaseDataBean.class);
		PowerMockito.when(ServiceAuthHelper.getDataBean("serviceAuthDataBean"))
				.thenReturn(serviceAuthDataBean);
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceCode("serviceCode");
		saLineServiceInfo.setServiceTYCode("6");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		serviceAuthLineItem.setLineNumber(0);
		serviceAuthLineItemsVO.setLineItemNumber(0);
		serviceAuthorization.setAuthorizationTypeCode("test");
		SAUIRules.executeRID_SRA2001_2407_01(serviceAuthorization,
				serviceAuthLineItemsVO);
		assertNotNull(serviceAuthDataBean);
		assertEquals(null, serviceAuthLineItemsVO.getServiceQualifier());
		PowerMockito.verifyStatic(Mockito.times(1));
		ServiceAuthHelper.getDataBean("serviceAuthDataBean");
	}

	@Test
	public void testCheckAuthorizationType_1() {
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("0");
		saLineServiceInfo.setServiceInstitutionalCode("");
		boolean actual = SAUIRules.checkAuthorizationType(serviceAuthorization);
		assertFalse(actual);
	}

	@Test
	public void testCheckAuthorizationType_2() {
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("1");
		saLineServiceInfo.setServiceInstitutionalCode("");
		boolean actual = SAUIRules.checkAuthorizationType(serviceAuthorization);
		assertFalse(actual);
	}

	@Test
	public void testCheckAuthorizationType() {
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("0");
		saLineServiceInfo.setServiceInstitutionalCode("");
		boolean actual = SAUIRules.checkAuthorizationType(serviceAuthorization);
		assertFalse(actual);
	}

	@Test
	public void testCheckAuthorizationType_3() {
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("");
		saLineServiceInfo.setServiceInstitutionalCode("");
		boolean actual = SAUIRules.checkAuthorizationType(serviceAuthorization);
		assertTrue(actual);
	}

	@Test
	public void testCheckAuthorizationType_4() {
		SALineItemInfo serviceAuthLineItem = new SALineItemInfo();
		SALineServiceInfo saLineServiceInfo = new SALineServiceInfo();
		ServiceAuthorization serviceAuthorization = new ServiceAuthorization();
		serviceAuthorization.setAuthorizationTypeCode("MD");
		serviceAuthorization.setMediaTypeCode("IP");
		Set<Object> saLines = new HashSet<Object>();
		saLines.add(serviceAuthLineItem);
		serviceAuthorization.setSaLineItems(saLines);
		serviceAuthLineItem.setSaLineServiceInfo(saLineServiceInfo);
		saLineServiceInfo.setServiceTYCode("");
		saLineServiceInfo.setServiceInstitutionalCode("test");
		boolean actual = SAUIRules.checkAuthorizationType(serviceAuthorization);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2403_01() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		serviceAuthLineItemsVO.setServiceLevelCode("SV2");
		serviceAuthLineItemsVO.setServiceCodeFrom("test");
		serviceAuthLineItemsVO.setServiceQualifier("");
		SAUIRules.executeRID_SRA2001_2403_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked
	}

	@Test
	public void testExecuteRID_SRA2001_2404_01() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		serviceAuthLineItemsVO.setServiceLevelCode("SV2");
		serviceAuthLineItemsVO.setServiceCodeFrom("");
		serviceAuthLineItemsVO.setServiceQualifier("test");
		SAUIRules.executeRID_SRA2001_2404_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2405_01_1() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		LineItemModifierVO modifiersVO = new LineItemModifierVO();
		serviceAuthLineItemsVO.setServiceLevelCode("SV2");
		serviceAuthLineItemsVO.setModifiersVO(modifiersVO);
		modifiersVO.setModFrom1("modFrom1");
		modifiersVO.setModFrom2("");
		modifiersVO.setModFrom3("");
		modifiersVO.setModFrom4("");
		serviceAuthLineItemsVO.setServiceCodeFrom("");
		SAUIRules.executeRID_SRA2001_2405_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2405_01_2() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		LineItemModifierVO modifiersVO = new LineItemModifierVO();
		serviceAuthLineItemsVO.setServiceLevelCode("SV2");
		serviceAuthLineItemsVO.setModifiersVO(modifiersVO);
		modifiersVO.setModFrom1("");
		modifiersVO.setModFrom2("modFrom2");
		modifiersVO.setModFrom3("");
		modifiersVO.setModFrom4("");
		serviceAuthLineItemsVO.setServiceCodeFrom("");
		SAUIRules.executeRID_SRA2001_2405_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2405_01_3() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		LineItemModifierVO modifiersVO = new LineItemModifierVO();
		serviceAuthLineItemsVO.setServiceLevelCode("SV2");
		serviceAuthLineItemsVO.setModifiersVO(modifiersVO);
		modifiersVO.setModFrom1("");
		modifiersVO.setModFrom2("");
		modifiersVO.setModFrom3("modFrom3");
		modifiersVO.setModFrom4("");
		serviceAuthLineItemsVO.setServiceCodeFrom("");
		SAUIRules.executeRID_SRA2001_2405_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2405_01_4() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		LineItemModifierVO modifiersVO = new LineItemModifierVO();
		serviceAuthLineItemsVO.setServiceLevelCode("SV2");
		serviceAuthLineItemsVO.setModifiersVO(modifiersVO);
		modifiersVO.setModFrom1("");
		modifiersVO.setModFrom2("");
		modifiersVO.setModFrom3("");
		modifiersVO.setModFrom4("modFrom4");
		serviceAuthLineItemsVO.setServiceCodeFrom("");
		SAUIRules.executeRID_SRA2001_2405_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2406_01() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		serviceAuthLineItemsVO.setServiceLevelCode("SV2");
		serviceAuthLineItemsVO.setServiceCodeFrom("");
		serviceAuthLineItemsVO.setServiceQualifier("");
		SAUIRules.executeRID_SRA2001_2406_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2231_01_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("test");
		requestingProviderDetailsVO.setProviderID("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2231_01(serviceAuthDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2231_01_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("test");
		requestingProviderDetailsVO.setProviderID("test");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2231_01(serviceAuthDataBean);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2231_01_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("");
		requestingProviderDetailsVO.setProviderID("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2231_01(serviceAuthDataBean);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2231_01_4() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("");
		requestingProviderDetailsVO.setProviderID("test");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2231_01(serviceAuthDataBean);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2332_01ServiceAuthDataBean_1() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("");
		requestingProviderDetailsVO.setProviderID("test");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2332_01(serviceAuthDataBean);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2332_01ServiceAuthDataBean_2() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("test");
		requestingProviderDetailsVO.setProviderID("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2332_01(serviceAuthDataBean);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2332_01ServiceAuthDataBean_3() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("");
		requestingProviderDetailsVO.setProviderID("");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2332_01(serviceAuthDataBean);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2332_01ServiceAuthDataBean_4() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("test");
		requestingProviderDetailsVO.setProviderID("test");
		boolean actual = SAUIRules
				.executeRID_SRA2001_2332_01(serviceAuthDataBean);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2201_01_True() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		String level = "supplnLevel";
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("XX");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("ZH");
		boolean actual = SAUIRules.executeRID_SRA2001_2201_01(
				serviceAuthDataBean, level);
		assertTrue(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_2201_01_False() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		String level = "Level";
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ProviderDetailsVO requestingProviderDetailsVO = new ProviderDetailsVO();
		SupplementalProviderVO supplementalProviderVO = new SupplementalProviderVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setRequestingProviderDetailsVO(requestingProviderDetailsVO);
		requestingProviderDetailsVO.setProviderIDType("XX");
		requestingProviderDetailsVO
				.setSupplementalProviderVO(supplementalProviderVO);
		supplementalProviderVO.setProviderIDType("ZH");
		boolean actual = SAUIRules.executeRID_SRA2001_2201_01(
				serviceAuthDataBean, level);
		assertFalse(actual);
	}

	@Test
	public void testExecuteRID_SRA2001_0174_01() {
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		serviceAuthLineItemsVO.setStatusChangeReason("");
		SAUIRules.executeRID_SRA2001_0174_01(serviceAuthLineItemsVO);
		assertNotNull(serviceAuthLineItemsVO);
		// nothing is set or mocked

	}

	@Test
	public void testExecuteRID_SRA2001_2242_01_True() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setInputSource("K");
	//	SAUIRules.executeRID_SRA2001_2242_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(true, true);
		assertEquals(true, true);
		assertEquals(true, true);
	}

	@Test
	public void testExecuteRID_SRA2001_2242_01_False() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setInputSource("A");
	//	SAUIRules.executeRID_SRA2001_2242_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals(false, serviceAuthDataBean.isKeProFlag());
	}

	@Test
	public void testExecuteRID_SRA2001_0083_01() {
		ServiceAuthDataBean serviceAuthDataBean = new ServiceAuthDataBean();
		BasicServicesDetailsVO basicServicesDetailsVO = new BasicServicesDetailsVO();
		ServiceAuthHeaderDetailsVO serviceAuthHeaderDetails = new ServiceAuthHeaderDetailsVO();
		ServiceAuthLineItemsVO serviceAuthLineItemsVO = new ServiceAuthLineItemsVO();
		List<Object> lineItemList = new ArrayList<Object>();
		lineItemList.add(serviceAuthLineItemsVO);
		serviceAuthDataBean.setBasicServicesDetailsVO(basicServicesDetailsVO);
		basicServicesDetailsVO.setServiceAuthLineItemsList(lineItemList);
		basicServicesDetailsVO
				.setServiceAuthHeaderDetails(serviceAuthHeaderDetails);
		serviceAuthHeaderDetails.setCurrentStatus("P");
		serviceAuthLineItemsVO.setStatus("A");
	//	SAUIRules.executeRID_SRA2001_0083_01(serviceAuthDataBean);
		assertNotNull(serviceAuthDataBean);
		assertEquals("P", serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getCurrentStatus());
		assertEquals(null, serviceAuthDataBean.getBasicServicesDetailsVO()
				.getServiceAuthHeaderDetails().getReasonCode());
	}

}
