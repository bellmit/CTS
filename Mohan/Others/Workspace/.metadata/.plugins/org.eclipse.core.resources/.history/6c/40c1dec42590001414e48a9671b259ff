package com.xerox.enterprise.ghs.mmis.rif.rules.program;

import java.text.SimpleDateFormat;

import org.junit.Test;

import junit.framework.TestCase;

import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFException;
import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFPOJORulesException;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesContext;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesResult;
import com.xerox.enterprise.ghs.mmis.rif.core.api.RulesManager;

/**
 * The class <code>PGM4005_9002_NH01Test</code> contains tests for the class
 * {@link <code>PGM4005_9002_NH01</code>}
 * 
 * @pattern JUnit Test Case
 * 
 * @generatedBy CodePro at 12/10/14 12:21 PM
 * 
 * @author 414774
 * 
 * @version $Revision$
 */
public class PGM4005_9002_NH01Test extends TestCase {

	private String ruleId;
	
	
	/**
	 * Construct new test instance
	 * 
	 * @param name
	 *            the test name
	 */
	public PGM4005_9002_NH01Test(final String name) {
		super(name);
	}
	
	@Override
	protected void setUp() throws Exception {
		// TODO Auto-generated method stub
		super.setUp();
		ruleId = "PGM4005.9002.NH01";
	}
	

	/*
	 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId =
	 * com.instantiations.assist.eclipse.pattern.testCasePattern strategyId =
	 * com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
	 * additionalTestNames = assertTrue = false callTestMethod = true createMain
	 * = false createSetUp = false createTearDown = false createTestFixture =
	 * false createTestStubs = false methods = package = com.rules
	 * package.sourceFolder = MMIS_RIF_Rules/src superclassType =
	 * junit.framework.TestCase testCase = PGM4005_9002_NH01Test testClassType =
	 * com.rules.PGM4005_9002_NH01
	 */

	public void testExecute() throws RIFException {

		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		// Name of the rule to be executed.
		
		RulesContext ric = new RulesContext();
		// Adding object into rule invocation context.
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		ric.addObject(dateFormat);
		ric.addObject("01/12/2014");

		boolean result = false;

		RulesManager rulesManager = RulesManager.getRIFInstance();

		// Invoke RIF with rulename and rule invocation objects.
		RulesResult rulesResult = null;

		try {
			rulesResult = rulesManager.execute(ruleId, ric);
			result = rulesResult.isReturnBooleanValue();
			// System.out.println("Rule boolean " + result);
		} catch (RIFException re) {
			re.getErrorCode();
		}

		// System.out.println("Rule boolean " +
		// rulesResult.isReturnBooleanValue());
		assertTrue(rulesResult.isReturnBooleanValue());
	}
	
	/*
	 * RulesContext null check
	 */
	@Test(expected=RIFException.class)
	public void testExecute1() throws RIFException {

		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		
		RulesContext ric = null;
		
		boolean result = false;

		RulesManager rulesManager = RulesManager.getRIFInstance();

		// Invoke RIF with rulename and rule invocation objects.
		RulesResult rulesResult = null;

		try {
			rulesResult = rulesManager.execute(ruleId, ric);
			result = rulesResult.isReturnBooleanValue();
			// System.out.println("Rule boolean " + result);
		} catch (RIFException re) {
			re.getErrorCode();
		}

	}
	
	/*
	 * Rules input object NULL check
	 */
	@Test(expected=RIFException.class)
	public void testExecute2() throws RIFException {

		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		// Name of the rule to be executed.
		
		RulesContext ric = new RulesContext();
		// Adding object into rule invocation context.
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		ric.addObject(dateFormat);
		ric.addObject(null);

		boolean result = false;

		RulesManager rulesManager = RulesManager.getRIFInstance();

		// Invoke RIF with rulename and rule invocation objects.
		RulesResult rulesResult = null;

		try {
			rulesResult = rulesManager.execute(ruleId, ric);
			result = rulesResult.isReturnBooleanValue();
			// System.out.println("Rule boolean " + result);
		} catch (RIFException re) {
			re.getErrorCode();
		}

		
	}
	/*
	 * Rules input object NULL check
	 */
	@Test(expected=RIFException.class)
	public void testExecute3() throws RIFException {

		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		// Name of the rule to be executed.
		
		RulesContext ric = new RulesContext();
		// Adding object into rule invocation context.
		SimpleDateFormat dateFormat = null;
		ric.addObject(dateFormat);
		ric.addObject(null);

		boolean result = false;

		RulesManager rulesManager = RulesManager.getRIFInstance();

		// Invoke RIF with rulename and rule invocation objects.
		RulesResult rulesResult = null;

		try {
			rulesResult = rulesManager.execute(ruleId, ric);
			result = rulesResult.isReturnBooleanValue();
			// System.out.println("Rule boolean " + result);
		} catch (RIFException re) {
			re.getErrorCode();
		}

		
	}
	
	public void testINITIALIZE() {
		try {
			PGM4005_9002_NH01.initialize();
		} catch (RIFPOJORulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void testSHUTDOWN() {
		try {
			PGM4005_9002_NH01.shutdown();
		} catch (RIFPOJORulesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
