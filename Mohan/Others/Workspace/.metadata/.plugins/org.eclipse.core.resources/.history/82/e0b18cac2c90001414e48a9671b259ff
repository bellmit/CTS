package com.xerox.enterprise.ghs.mmis.rif.rules.provider;

import java.util.Date;

import junit.framework.TestCase;

import org.junit.Test;

import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFException;
import com.xerox.enterprise.ghs.mmis.rif.common.exception.RIFPOJORulesException;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesContext;
import com.xerox.enterprise.ghs.mmis.rif.core.RulesResult;
import com.xerox.enterprise.ghs.mmis.rif.core.api.RulesManager;

/**
 * The class <code>PRV0552_0002_01Test</code> contains tests for the class
 * {@link <code>PRV0552_0002_01</code>}
 *
 * @pattern JUnit Test Case
 *
 * @generatedBy CodePro at 12/15/14 8:40 PM
 *
 * @author 414774
 *
 * @version $Revision$
 */
public class PRV0552_0002_01Test extends TestCase {

	private String ruleId;
	
	/**
	 * Construct new test instance
	 *
	 * @param name the test name
	 */
	public PRV0552_0002_01Test(String name) {
		super(name);
	}
	
	@Override
	protected void setUp() throws Exception {
		// TODO Auto-generated method stub
		super.setUp();
		ruleId = "PRV0552.0002.01";
	}

	/*$CPS$ This comment was generated by CodePro. Do not edit it.
	 * patternId = com.instantiations.assist.eclipse.pattern.testCasePattern
	 * strategyId = com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
	 * additionalTestNames = 
	 * assertTrue = false
	 * callTestMethod = true
	 * createMain = false
	 * createSetUp = false
	 * createTearDown = false
	 * createTestFixture = false
	 * createTestStubs = false
	 * methods = 
	 * package = com.xerox.enterprise.ghs.mmis.rif.rules
	 * package.sourceFolder = RulesRIF/src/main/java
	 * superclassType = junit.framework.TestCase
	 * testCase = PRV0552_0002_01Test
	 * testClassType = com.xerox.enterprise.ghs.mmis.rif.rules.PRV0552_0002_01
	 */
	public void testExecute() throws RIFException {
		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		// Name of the rule to be executed.
		
		boolean isInvalidEvent = false;
		// boolean flag1=false;
		RulesContext ric = new RulesContext();
		// Adding object into rule invocation context.
		
		Date m580M590EventDate = new Date("07/12/2015");
		Date eventVoS509Date = new Date("07/12/2014") ;

		ric.addObject(m580M590EventDate);
		ric.addObject(eventVoS509Date);

		RulesManager rulesManager = RulesManager.getRIFInstance();

		// Invoke RIF with rulename and rule invocation objects.
		RulesResult rulesResult = null;

		
		try {
			rulesResult = rulesManager.execute(ruleId, ric);
			isInvalidEvent = rulesResult.isReturnBooleanValue();

		} catch (RIFException re) {
			re.getErrorCode();
		}
		/*System.out
				.println("Rule boolean " +isInvalidEvent);*/
		assertTrue(isInvalidEvent);
	}

	/*
	 * RulesContext NULL check
	 */
	@Test(expected=RIFException.class)
	public void testExecute1() throws RIFException {
		// Rule Invocation Context object holds object arrays used in rule
		// execution.
		// Name of the rule to be executed.
		
		boolean isInvalidEvent = false;
		// boolean flag1=false;
		RulesContext ric = null;
		
		RulesManager rulesManager = RulesManager.getRIFInstance();

		// Invoke RIF with rulename and rule invocation objects.
		RulesResult rulesResult = null;

		
		try {
			rulesResult = rulesManager.execute(ruleId, ric);
			isInvalidEvent = rulesResult.isReturnBooleanValue();

		} catch (RIFException re) {
			re.getErrorCode();
		}
		
	}
	
	/*
	 * Input Object NULL check
	 */
	@Test(expected=RIFPOJORulesException.class)
	public void testExecute2() throws RIFException {
			// Rule Invocation Context object holds object arrays used in rule
			// execution.
			
			boolean isInvalidEvent = false;
			// boolean flag1=false;
			RulesContext ric = new RulesContext();
			// Adding object into rule invocation context.
			
			Date m580M590EventDate = null;
			Date eventVoS509Date = new Date("07/12/2014") ;

			ric.addObject(m580M590EventDate);
			ric.addObject(eventVoS509Date);

			RulesManager rulesManager = RulesManager.getRIFInstance();

			// Invoke RIF with rulename and rule invocation objects.
			RulesResult rulesResult = null;

			
			try {
				rulesResult = rulesManager.execute(ruleId, ric);
				isInvalidEvent = rulesResult.isReturnBooleanValue();

			} catch (RIFException re) {
				re.getErrorCode();
			}
			
		}
	/*
	 * Input Object NULL check
	 */
	@Test(expected=RIFPOJORulesException.class)
	public void testExecute3() throws RIFException {
			// Rule Invocation Context object holds object arrays used in rule
			// execution.
			// Name of the rule to be executed.
			String ruleId = "PRV0552.0002.01";
			boolean isInvalidEvent = false;
			// boolean flag1=false;
			RulesContext ric = new RulesContext();
			// Adding object into rule invocation context.
			
			Date m580M590EventDate = new Date("07/12/2014");
			Date eventVoS509Date =  null;

			ric.addObject(m580M590EventDate);
			ric.addObject(eventVoS509Date);

			RulesManager rulesManager = RulesManager.getRIFInstance();

			// Invoke RIF with rulename and rule invocation objects.
			RulesResult rulesResult = null;

			
			try {
				rulesResult = rulesManager.execute(ruleId, ric);
				isInvalidEvent = rulesResult.isReturnBooleanValue();

			} catch (RIFException re) {
				re.getErrorCode();
			}
			
		}
	
	public void testINITIALIZE() {
		try {
			PRV0552_0002_01.initialize();
		} catch (RIFPOJORulesException e) {
			// TODO Auto-generated catch block
			e.getErrorCode();
		}
	}

	public void testSHUTDOWN() {
		try {
			PRV0552_0002_01.shutdown();
		} catch (RIFPOJORulesException e) {
			// TODO Auto-generated catch block
			e.getErrorCode();
		}
	}

}